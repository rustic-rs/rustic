pub mod rustic_core
pub use rustic_core::compression_level_range
pub mod rustic_core::repofile
pub enum rustic_core::repofile::BlobType
pub rustic_core::repofile::BlobType::Data
pub rustic_core::repofile::BlobType::Tree
impl core::clone::Clone for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::clone(&self) -> rustic_core::repofile::BlobType
impl core::cmp::Eq for rustic_core::repofile::BlobType
impl core::cmp::Ord for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::cmp(&self, other: &rustic_core::repofile::BlobType) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::BlobType> for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::eq(&self, other: &rustic_core::repofile::BlobType) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::BlobType> for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::partial_cmp(&self, other: &rustic_core::repofile::BlobType) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::repofile::BlobType
impl core::marker::StructuralEq for rustic_core::repofile::BlobType
impl core::marker::StructuralPartialEq for rustic_core::repofile::BlobType
impl enum_map::internal::Enum for rustic_core::repofile::BlobType
pub const rustic_core::repofile::BlobType::LENGTH: usize
pub fn rustic_core::repofile::BlobType::from_usize(value: usize) -> Self
pub fn rustic_core::repofile::BlobType::into_usize(self) -> usize
impl serde::ser::Serialize for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl<V> enum_map::internal::EnumArray<V> for rustic_core::repofile::BlobType
pub type rustic_core::repofile::BlobType::Array = [V; 2]
impl core::marker::Send for rustic_core::repofile::BlobType
impl core::marker::Sync for rustic_core::repofile::BlobType
impl core::marker::Unpin for rustic_core::repofile::BlobType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::BlobType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::BlobType
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::BlobType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::BlobType::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::BlobType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::BlobType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::BlobType where U: core::convert::From<T>
pub fn rustic_core::repofile::BlobType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::BlobType where U: core::convert::Into<T>
pub type rustic_core::repofile::BlobType::Error = core::convert::Infallible
pub fn rustic_core::repofile::BlobType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::BlobType where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::BlobType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::BlobType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::BlobType where T: core::clone::Clone
pub type rustic_core::repofile::BlobType::Owned = T
pub fn rustic_core::repofile::BlobType::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::BlobType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::BlobType where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::BlobType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::BlobType where T: core::marker::Sized
pub fn rustic_core::repofile::BlobType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::BlobType where T: core::marker::Sized
pub fn rustic_core::repofile::BlobType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::BlobType
pub fn rustic_core::repofile::BlobType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::BlobType
pub type rustic_core::repofile::BlobType::Init = T
pub const rustic_core::repofile::BlobType::ALIGN: usize
pub unsafe fn rustic_core::repofile::BlobType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::BlobType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::BlobType::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::BlobType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::BlobType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::BlobType
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::BlobType
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::BlobType
pub type rustic_core::repofile::BlobType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::BlobType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::BlobType::vzip(self) -> V
pub enum rustic_core::repofile::DeleteOption
pub rustic_core::repofile::DeleteOption::After(chrono::datetime::DateTime<chrono::offset::local::Local>)
pub rustic_core::repofile::DeleteOption::Never
pub rustic_core::repofile::DeleteOption::NotSet
impl core::default::Default for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::default() -> Self
impl core::clone::Clone for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::clone(&self) -> rustic_core::repofile::DeleteOption
impl core::cmp::Eq for rustic_core::repofile::DeleteOption
impl core::cmp::PartialEq<rustic_core::repofile::DeleteOption> for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::eq(&self, other: &rustic_core::repofile::DeleteOption) -> bool
impl core::fmt::Debug for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::DeleteOption
impl core::marker::StructuralEq for rustic_core::repofile::DeleteOption
impl core::marker::StructuralPartialEq for rustic_core::repofile::DeleteOption
impl serde::ser::Serialize for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::DeleteOption
impl core::marker::Sync for rustic_core::repofile::DeleteOption
impl core::marker::Unpin for rustic_core::repofile::DeleteOption
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::DeleteOption
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::DeleteOption
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::DeleteOption where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::DeleteOption::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::DeleteOption where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::DeleteOption::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::DeleteOption where U: core::convert::From<T>
pub fn rustic_core::repofile::DeleteOption::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::DeleteOption where U: core::convert::Into<T>
pub type rustic_core::repofile::DeleteOption::Error = core::convert::Infallible
pub fn rustic_core::repofile::DeleteOption::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::DeleteOption where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::DeleteOption::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::DeleteOption::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::DeleteOption where T: core::clone::Clone
pub type rustic_core::repofile::DeleteOption::Owned = T
pub fn rustic_core::repofile::DeleteOption::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::DeleteOption::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::DeleteOption where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::DeleteOption::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::DeleteOption::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::DeleteOption where T: core::marker::Sized
pub fn rustic_core::repofile::DeleteOption::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::DeleteOption
pub fn rustic_core::repofile::DeleteOption::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::DeleteOption
pub type rustic_core::repofile::DeleteOption::Init = T
pub const rustic_core::repofile::DeleteOption::ALIGN: usize
pub unsafe fn rustic_core::repofile::DeleteOption::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::DeleteOption::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::DeleteOption::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::DeleteOption::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::DeleteOption where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::DeleteOption
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::DeleteOption
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::DeleteOption
pub type rustic_core::repofile::DeleteOption::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::DeleteOption where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::DeleteOption::vzip(self) -> V
pub enum rustic_core::repofile::FileType
pub rustic_core::repofile::FileType::Config
pub rustic_core::repofile::FileType::Index
pub rustic_core::repofile::FileType::Key
pub rustic_core::repofile::FileType::Pack
pub rustic_core::repofile::FileType::Snapshot
impl core::clone::Clone for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::clone(&self) -> rustic_core::repofile::FileType
impl core::cmp::Eq for rustic_core::repofile::FileType
impl core::cmp::PartialEq<rustic_core::repofile::FileType> for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::eq(&self, other: &rustic_core::repofile::FileType) -> bool
impl core::fmt::Debug for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::FileType
impl core::marker::StructuralEq for rustic_core::repofile::FileType
impl core::marker::StructuralPartialEq for rustic_core::repofile::FileType
impl serde::ser::Serialize for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::FileType
impl core::marker::Sync for rustic_core::repofile::FileType
impl core::marker::Unpin for rustic_core::repofile::FileType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::FileType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::FileType
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::FileType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::FileType::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::FileType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::FileType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::FileType where U: core::convert::From<T>
pub fn rustic_core::repofile::FileType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::FileType where U: core::convert::Into<T>
pub type rustic_core::repofile::FileType::Error = core::convert::Infallible
pub fn rustic_core::repofile::FileType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::FileType where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::FileType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::FileType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::FileType where T: core::clone::Clone
pub type rustic_core::repofile::FileType::Owned = T
pub fn rustic_core::repofile::FileType::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::FileType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::FileType where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::FileType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::FileType where T: core::marker::Sized
pub fn rustic_core::repofile::FileType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::FileType where T: core::marker::Sized
pub fn rustic_core::repofile::FileType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::FileType
pub fn rustic_core::repofile::FileType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::FileType
pub type rustic_core::repofile::FileType::Init = T
pub const rustic_core::repofile::FileType::ALIGN: usize
pub unsafe fn rustic_core::repofile::FileType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::FileType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::FileType::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::FileType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::FileType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::FileType
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::FileType
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::FileType
pub type rustic_core::repofile::FileType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::FileType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::FileType::vzip(self) -> V
pub enum rustic_core::repofile::HeaderEntry
pub rustic_core::repofile::HeaderEntry::CompData
pub rustic_core::repofile::HeaderEntry::CompData::id: rustic_core::Id
pub rustic_core::repofile::HeaderEntry::CompData::len: u32
pub rustic_core::repofile::HeaderEntry::CompData::len_data: u32
pub rustic_core::repofile::HeaderEntry::CompTree
pub rustic_core::repofile::HeaderEntry::CompTree::id: rustic_core::Id
pub rustic_core::repofile::HeaderEntry::CompTree::len: u32
pub rustic_core::repofile::HeaderEntry::CompTree::len_data: u32
pub rustic_core::repofile::HeaderEntry::Data
pub rustic_core::repofile::HeaderEntry::Data::id: rustic_core::Id
pub rustic_core::repofile::HeaderEntry::Data::len: u32
pub rustic_core::repofile::HeaderEntry::Tree
pub rustic_core::repofile::HeaderEntry::Tree::id: rustic_core::Id
pub rustic_core::repofile::HeaderEntry::Tree::len: u32
impl binrw::meta::ReadEndian for rustic_core::repofile::HeaderEntry
pub const rustic_core::repofile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::HeaderEntry
pub const rustic_core::repofile::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::HeaderEntry
pub type rustic_core::repofile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::HeaderEntry::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::HeaderEntry
pub type rustic_core::repofile::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::HeaderEntry::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::HeaderEntry
pub fn rustic_core::repofile::HeaderEntry::clone(&self) -> rustic_core::repofile::HeaderEntry
impl core::fmt::Debug for rustic_core::repofile::HeaderEntry
pub fn rustic_core::repofile::HeaderEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::HeaderEntry
impl core::marker::Send for rustic_core::repofile::HeaderEntry
impl core::marker::Sync for rustic_core::repofile::HeaderEntry
impl core::marker::Unpin for rustic_core::repofile::HeaderEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::HeaderEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::HeaderEntry
impl<T, U> core::convert::Into<U> for rustic_core::repofile::HeaderEntry where U: core::convert::From<T>
pub fn rustic_core::repofile::HeaderEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::HeaderEntry where U: core::convert::Into<T>
pub type rustic_core::repofile::HeaderEntry::Error = core::convert::Infallible
pub fn rustic_core::repofile::HeaderEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::HeaderEntry where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::HeaderEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::HeaderEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::HeaderEntry where T: core::clone::Clone
pub type rustic_core::repofile::HeaderEntry::Owned = T
pub fn rustic_core::repofile::HeaderEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::HeaderEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::HeaderEntry where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::HeaderEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::HeaderEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::repofile::HeaderEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::HeaderEntry
pub fn rustic_core::repofile::HeaderEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::HeaderEntry
pub type rustic_core::repofile::HeaderEntry::Init = T
pub const rustic_core::repofile::HeaderEntry::ALIGN: usize
pub unsafe fn rustic_core::repofile::HeaderEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::HeaderEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::HeaderEntry::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::HeaderEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::HeaderEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::HeaderEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::HeaderEntry
pub type rustic_core::repofile::HeaderEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::HeaderEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::HeaderEntry::vzip(self) -> V
pub enum rustic_core::repofile::NodeType
pub rustic_core::repofile::NodeType::Chardev
pub rustic_core::repofile::NodeType::Chardev::device: u64
pub rustic_core::repofile::NodeType::Dev
pub rustic_core::repofile::NodeType::Dev::device: u64
pub rustic_core::repofile::NodeType::Dir
pub rustic_core::repofile::NodeType::Fifo
pub rustic_core::repofile::NodeType::File
pub rustic_core::repofile::NodeType::Socket
pub rustic_core::repofile::NodeType::Symlink
pub rustic_core::repofile::NodeType::Symlink::linktarget: alloc::string::String
pub rustic_core::repofile::NodeType::Symlink::linktarget_raw: core::option::Option<alloc::vec::Vec<u8>>
impl rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::from_link(target: &std::path::Path) -> Self
pub fn rustic_core::repofile::NodeType::to_link(&self) -> &std::path::Path
impl core::default::Default for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::default() -> Self
impl core::clone::Clone for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::clone(&self) -> rustic_core::repofile::NodeType
impl core::cmp::Eq for rustic_core::repofile::NodeType
impl core::cmp::PartialEq<rustic_core::repofile::NodeType> for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::eq(&self, other: &rustic_core::repofile::NodeType) -> bool
impl core::fmt::Debug for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::NodeType
impl core::marker::StructuralPartialEq for rustic_core::repofile::NodeType
impl serde::ser::Serialize for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::NodeType
impl core::marker::Sync for rustic_core::repofile::NodeType
impl core::marker::Unpin for rustic_core::repofile::NodeType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::NodeType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::NodeType
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::NodeType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::NodeType::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::NodeType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::NodeType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::NodeType where U: core::convert::From<T>
pub fn rustic_core::repofile::NodeType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::NodeType where U: core::convert::Into<T>
pub type rustic_core::repofile::NodeType::Error = core::convert::Infallible
pub fn rustic_core::repofile::NodeType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::NodeType where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::NodeType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::NodeType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::NodeType where T: core::clone::Clone
pub type rustic_core::repofile::NodeType::Owned = T
pub fn rustic_core::repofile::NodeType::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::NodeType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::NodeType where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::NodeType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::NodeType where T: core::marker::Sized
pub fn rustic_core::repofile::NodeType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::NodeType where T: core::marker::Sized
pub fn rustic_core::repofile::NodeType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::NodeType
pub fn rustic_core::repofile::NodeType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::NodeType
pub type rustic_core::repofile::NodeType::Init = T
pub const rustic_core::repofile::NodeType::ALIGN: usize
pub unsafe fn rustic_core::repofile::NodeType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::NodeType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::NodeType::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::NodeType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::NodeType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::NodeType
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::NodeType
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::NodeType
pub type rustic_core::repofile::NodeType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::NodeType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::NodeType::vzip(self) -> V
pub struct rustic_core::repofile::ConfigFile
pub rustic_core::repofile::ConfigFile::chunker_polynomial: alloc::string::String
pub rustic_core::repofile::ConfigFile::compression: core::option::Option<i32>
pub rustic_core::repofile::ConfigFile::datapack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::datapack_size: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::datapack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::id: rustic_core::Id
pub rustic_core::repofile::ConfigFile::is_hot: core::option::Option<bool>
pub rustic_core::repofile::ConfigFile::max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_growfactor: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_size: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::treepack_size_limit: core::option::Option<u32>
pub rustic_core::repofile::ConfigFile::version: u32
impl rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::new(version: u32, id: rustic_core::Id, poly: u64) -> Self
pub fn rustic_core::repofile::ConfigFile::packsize(&self, blob: rustic_core::repofile::BlobType) -> (u32, u32, u32)
pub fn rustic_core::repofile::ConfigFile::packsize_ok_percents(&self) -> (u32, u32)
pub fn rustic_core::repofile::ConfigFile::poly(&self) -> rustic_core::RusticResult<u64>
pub fn rustic_core::repofile::ConfigFile::zstd(&self) -> rustic_core::RusticResult<core::option::Option<i32>>
impl rustic_core::repofile::RepoFile for rustic_core::repofile::ConfigFile
pub const rustic_core::repofile::ConfigFile::TYPE: rustic_core::repofile::FileType
impl core::clone::Clone for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::clone(&self) -> rustic_core::repofile::ConfigFile
impl core::cmp::Eq for rustic_core::repofile::ConfigFile
impl core::cmp::PartialEq<rustic_core::repofile::ConfigFile> for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::eq(&self, other: &rustic_core::repofile::ConfigFile) -> bool
impl core::default::Default for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::default() -> rustic_core::repofile::ConfigFile
impl core::fmt::Debug for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::ConfigFile
impl core::marker::StructuralPartialEq for rustic_core::repofile::ConfigFile
impl serde::ser::Serialize for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::ConfigFile
impl core::marker::Sync for rustic_core::repofile::ConfigFile
impl core::marker::Unpin for rustic_core::repofile::ConfigFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::ConfigFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::ConfigFile
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::ConfigFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::ConfigFile::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::ConfigFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::ConfigFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::ConfigFile where U: core::convert::From<T>
pub fn rustic_core::repofile::ConfigFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::ConfigFile where U: core::convert::Into<T>
pub type rustic_core::repofile::ConfigFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::ConfigFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::ConfigFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::ConfigFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::ConfigFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::ConfigFile where T: core::clone::Clone
pub type rustic_core::repofile::ConfigFile::Owned = T
pub fn rustic_core::repofile::ConfigFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::ConfigFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::ConfigFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::ConfigFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::ConfigFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::ConfigFile where T: core::marker::Sized
pub fn rustic_core::repofile::ConfigFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::ConfigFile
pub fn rustic_core::repofile::ConfigFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::ConfigFile
pub type rustic_core::repofile::ConfigFile::Init = T
pub const rustic_core::repofile::ConfigFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::ConfigFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::ConfigFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::ConfigFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::ConfigFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::ConfigFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::ConfigFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::ConfigFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::ConfigFile
pub type rustic_core::repofile::ConfigFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::ConfigFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::ConfigFile::vzip(self) -> V
pub struct rustic_core::repofile::IndexBlob
pub rustic_core::repofile::IndexBlob::id: rustic_core::Id
pub rustic_core::repofile::IndexBlob::length: u32
pub rustic_core::repofile::IndexBlob::offset: u32
pub rustic_core::repofile::IndexBlob::tpe: rustic_core::repofile::BlobType
pub rustic_core::repofile::IndexBlob::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl core::cmp::Ord for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialOrd<rustic_core::repofile::IndexBlob> for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::clone::Clone for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::clone(&self) -> rustic_core::repofile::IndexBlob
impl core::cmp::Eq for rustic_core::repofile::IndexBlob
impl core::cmp::PartialEq<rustic_core::repofile::IndexBlob> for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::eq(&self, other: &rustic_core::repofile::IndexBlob) -> bool
impl core::fmt::Debug for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::IndexBlob
impl core::marker::StructuralEq for rustic_core::repofile::IndexBlob
impl core::marker::StructuralPartialEq for rustic_core::repofile::IndexBlob
impl serde::ser::Serialize for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::IndexBlob
impl core::marker::Sync for rustic_core::repofile::IndexBlob
impl core::marker::Unpin for rustic_core::repofile::IndexBlob
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::IndexBlob
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::IndexBlob
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::IndexBlob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::IndexBlob::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::IndexBlob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::IndexBlob::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::IndexBlob where U: core::convert::From<T>
pub fn rustic_core::repofile::IndexBlob::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::IndexBlob where U: core::convert::Into<T>
pub type rustic_core::repofile::IndexBlob::Error = core::convert::Infallible
pub fn rustic_core::repofile::IndexBlob::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::IndexBlob where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::IndexBlob::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::IndexBlob::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::IndexBlob where T: core::clone::Clone
pub type rustic_core::repofile::IndexBlob::Owned = T
pub fn rustic_core::repofile::IndexBlob::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::IndexBlob::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::IndexBlob where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::IndexBlob::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::IndexBlob::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::IndexBlob where T: core::marker::Sized
pub fn rustic_core::repofile::IndexBlob::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::IndexBlob
pub fn rustic_core::repofile::IndexBlob::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::IndexBlob
pub type rustic_core::repofile::IndexBlob::Init = T
pub const rustic_core::repofile::IndexBlob::ALIGN: usize
pub unsafe fn rustic_core::repofile::IndexBlob::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::IndexBlob::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::IndexBlob::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::IndexBlob::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::IndexBlob where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::IndexBlob
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::IndexBlob
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::IndexBlob
pub type rustic_core::repofile::IndexBlob::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::IndexBlob where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::IndexBlob::vzip(self) -> V
pub struct rustic_core::repofile::IndexFile
pub rustic_core::repofile::IndexFile::packs: alloc::vec::Vec<rustic_core::repofile::IndexPack>
pub rustic_core::repofile::IndexFile::packs_to_delete: alloc::vec::Vec<rustic_core::repofile::IndexPack>
pub rustic_core::repofile::IndexFile::supersedes: core::option::Option<alloc::vec::Vec<rustic_core::Id>>
impl rustic_core::repofile::RepoFile for rustic_core::repofile::IndexFile
pub const rustic_core::repofile::IndexFile::TYPE: rustic_core::repofile::FileType
impl core::default::Default for rustic_core::repofile::IndexFile
pub fn rustic_core::repofile::IndexFile::default() -> rustic_core::repofile::IndexFile
impl core::fmt::Debug for rustic_core::repofile::IndexFile
pub fn rustic_core::repofile::IndexFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::IndexFile
pub fn rustic_core::repofile::IndexFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::IndexFile
pub fn rustic_core::repofile::IndexFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::IndexFile
impl core::marker::Sync for rustic_core::repofile::IndexFile
impl core::marker::Unpin for rustic_core::repofile::IndexFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::IndexFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::IndexFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::IndexFile where U: core::convert::From<T>
pub fn rustic_core::repofile::IndexFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::IndexFile where U: core::convert::Into<T>
pub type rustic_core::repofile::IndexFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::IndexFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::IndexFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::IndexFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::IndexFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::IndexFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::IndexFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::IndexFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::IndexFile where T: core::marker::Sized
pub fn rustic_core::repofile::IndexFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::IndexFile
pub fn rustic_core::repofile::IndexFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::IndexFile
pub type rustic_core::repofile::IndexFile::Init = T
pub const rustic_core::repofile::IndexFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::IndexFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::IndexFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::IndexFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::IndexFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::IndexFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::IndexFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::IndexFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::IndexFile
pub type rustic_core::repofile::IndexFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::IndexFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::IndexFile::vzip(self) -> V
pub struct rustic_core::repofile::IndexPack
pub rustic_core::repofile::IndexPack::blobs: alloc::vec::Vec<rustic_core::repofile::IndexBlob>
pub rustic_core::repofile::IndexPack::id: rustic_core::Id
pub rustic_core::repofile::IndexPack::size: core::option::Option<u32>
pub rustic_core::repofile::IndexPack::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::blob_type(&self) -> rustic_core::repofile::BlobType
impl core::clone::Clone for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::clone(&self) -> rustic_core::repofile::IndexPack
impl core::default::Default for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::default() -> rustic_core::repofile::IndexPack
impl core::fmt::Debug for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::IndexPack
impl core::marker::Sync for rustic_core::repofile::IndexPack
impl core::marker::Unpin for rustic_core::repofile::IndexPack
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::IndexPack
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::IndexPack
impl<T, U> core::convert::Into<U> for rustic_core::repofile::IndexPack where U: core::convert::From<T>
pub fn rustic_core::repofile::IndexPack::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::IndexPack where U: core::convert::Into<T>
pub type rustic_core::repofile::IndexPack::Error = core::convert::Infallible
pub fn rustic_core::repofile::IndexPack::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::IndexPack where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::IndexPack::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::IndexPack::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::IndexPack where T: core::clone::Clone
pub type rustic_core::repofile::IndexPack::Owned = T
pub fn rustic_core::repofile::IndexPack::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::IndexPack::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::IndexPack where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::IndexPack::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::IndexPack::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::IndexPack where T: core::marker::Sized
pub fn rustic_core::repofile::IndexPack::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::IndexPack
pub fn rustic_core::repofile::IndexPack::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::IndexPack
pub type rustic_core::repofile::IndexPack::Init = T
pub const rustic_core::repofile::IndexPack::ALIGN: usize
pub unsafe fn rustic_core::repofile::IndexPack::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::IndexPack::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::IndexPack::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::IndexPack::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::IndexPack where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::IndexPack
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::IndexPack
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::IndexPack
pub type rustic_core::repofile::IndexPack::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::IndexPack where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::IndexPack::vzip(self) -> V
pub struct rustic_core::repofile::KeyFile
impl rustic_core::repofile::KeyFile
pub fn rustic_core::repofile::KeyFile::generate(key: Key, passwd: &impl core::convert::AsRef<[u8]>, hostname: core::option::Option<alloc::string::String>, username: core::option::Option<alloc::string::String>, with_created: bool) -> rustic_core::RusticResult<Self>
pub fn rustic_core::repofile::KeyFile::kdf_key(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::RusticResult<Key>
pub fn rustic_core::repofile::KeyFile::key_from_data(&self, key: &Key) -> rustic_core::RusticResult<Key>
pub fn rustic_core::repofile::KeyFile::key_from_password(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::RusticResult<Key>
impl core::fmt::Debug for rustic_core::repofile::KeyFile
pub fn rustic_core::repofile::KeyFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::KeyFile
pub fn rustic_core::repofile::KeyFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::KeyFile
pub fn rustic_core::repofile::KeyFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::KeyFile
impl core::marker::Sync for rustic_core::repofile::KeyFile
impl core::marker::Unpin for rustic_core::repofile::KeyFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::KeyFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::KeyFile
impl<T, U> core::convert::Into<U> for rustic_core::repofile::KeyFile where U: core::convert::From<T>
pub fn rustic_core::repofile::KeyFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::KeyFile where U: core::convert::Into<T>
pub type rustic_core::repofile::KeyFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::KeyFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::KeyFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::KeyFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::KeyFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::repofile::KeyFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::KeyFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::KeyFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::KeyFile where T: core::marker::Sized
pub fn rustic_core::repofile::KeyFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::KeyFile
pub fn rustic_core::repofile::KeyFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::KeyFile
pub type rustic_core::repofile::KeyFile::Init = T
pub const rustic_core::repofile::KeyFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::KeyFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::KeyFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::KeyFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::KeyFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::KeyFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::KeyFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::KeyFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::KeyFile
pub type rustic_core::repofile::KeyFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::KeyFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::KeyFile::vzip(self) -> V
pub struct rustic_core::repofile::Node
pub rustic_core::repofile::Node::content: core::option::Option<alloc::vec::Vec<rustic_core::Id>>
pub rustic_core::repofile::Node::meta: Metadata
pub rustic_core::repofile::Node::name: alloc::string::String
pub rustic_core::repofile::Node::node_type: rustic_core::repofile::NodeType
pub rustic_core::repofile::Node::subtree: core::option::Option<rustic_core::Id>
impl rustic_core::repofile::Node
pub const fn rustic_core::repofile::Node::is_dir(&self) -> bool
pub const fn rustic_core::repofile::Node::is_file(&self) -> bool
pub const fn rustic_core::repofile::Node::is_special(&self) -> bool
pub const fn rustic_core::repofile::Node::is_symlink(&self) -> bool
pub fn rustic_core::repofile::Node::name(&self) -> std::ffi::os_str::OsString
impl rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::new(name: alloc::string::String, node_type: rustic_core::repofile::NodeType, meta: Metadata, content: core::option::Option<alloc::vec::Vec<rustic_core::Id>>, subtree: core::option::Option<rustic_core::Id>) -> rustic_core::repofile::Node
impl core::clone::Clone for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::clone(&self) -> rustic_core::repofile::Node
impl core::cmp::Eq for rustic_core::repofile::Node
impl core::cmp::PartialEq<rustic_core::repofile::Node> for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::eq(&self, other: &rustic_core::repofile::Node) -> bool
impl core::default::Default for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::default() -> rustic_core::repofile::Node
impl core::fmt::Debug for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::repofile::Node
impl core::marker::StructuralPartialEq for rustic_core::repofile::Node
impl serde::ser::Serialize for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::Node
impl core::marker::Sync for rustic_core::repofile::Node
impl core::marker::Unpin for rustic_core::repofile::Node
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::Node
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::Node
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::Node where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::Node::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::Node where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::Node::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::Node where U: core::convert::From<T>
pub fn rustic_core::repofile::Node::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::Node where U: core::convert::Into<T>
pub type rustic_core::repofile::Node::Error = core::convert::Infallible
pub fn rustic_core::repofile::Node::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::Node where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::Node::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::Node::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::Node where T: core::clone::Clone
pub type rustic_core::repofile::Node::Owned = T
pub fn rustic_core::repofile::Node::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::Node::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::Node where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::Node::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::Node where T: core::marker::Sized
pub fn rustic_core::repofile::Node::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::Node where T: core::marker::Sized
pub fn rustic_core::repofile::Node::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::Node
pub fn rustic_core::repofile::Node::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::Node
pub type rustic_core::repofile::Node::Init = T
pub const rustic_core::repofile::Node::ALIGN: usize
pub unsafe fn rustic_core::repofile::Node::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::Node::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::Node::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::Node::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::Node where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::Node
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::Node
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::Node
pub type rustic_core::repofile::Node::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::Node where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::Node::vzip(self) -> V
pub struct rustic_core::repofile::PackHeader(pub alloc::vec::Vec<rustic_core::repofile::IndexBlob>)
impl core::clone::Clone for rustic_core::repofile::PackHeader
pub fn rustic_core::repofile::PackHeader::clone(&self) -> rustic_core::repofile::PackHeader
impl core::fmt::Debug for rustic_core::repofile::PackHeader
pub fn rustic_core::repofile::PackHeader::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::repofile::PackHeader
impl core::marker::Sync for rustic_core::repofile::PackHeader
impl core::marker::Unpin for rustic_core::repofile::PackHeader
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::PackHeader
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::PackHeader
impl<T, U> core::convert::Into<U> for rustic_core::repofile::PackHeader where U: core::convert::From<T>
pub fn rustic_core::repofile::PackHeader::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::PackHeader where U: core::convert::Into<T>
pub type rustic_core::repofile::PackHeader::Error = core::convert::Infallible
pub fn rustic_core::repofile::PackHeader::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::PackHeader where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::PackHeader::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::PackHeader::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::PackHeader where T: core::clone::Clone
pub type rustic_core::repofile::PackHeader::Owned = T
pub fn rustic_core::repofile::PackHeader::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::PackHeader::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::PackHeader where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::PackHeader::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeader::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::PackHeader where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeader::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::PackHeader
pub fn rustic_core::repofile::PackHeader::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::PackHeader
pub type rustic_core::repofile::PackHeader::Init = T
pub const rustic_core::repofile::PackHeader::ALIGN: usize
pub unsafe fn rustic_core::repofile::PackHeader::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::PackHeader::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::PackHeader::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::PackHeader::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::PackHeader
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::PackHeader
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::PackHeader
pub type rustic_core::repofile::PackHeader::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::PackHeader where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::PackHeader::vzip(self) -> V
pub struct rustic_core::repofile::PackHeaderLength(pub u32)
impl binrw::meta::ReadEndian for rustic_core::repofile::PackHeaderLength
pub const rustic_core::repofile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::repofile::PackHeaderLength
pub const rustic_core::repofile::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::repofile::PackHeaderLength
pub type rustic_core::repofile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::PackHeaderLength::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::repofile::PackHeaderLength
pub type rustic_core::repofile::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::repofile::PackHeaderLength::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::repofile::PackHeaderLength
pub fn rustic_core::repofile::PackHeaderLength::clone(&self) -> rustic_core::repofile::PackHeaderLength
impl core::fmt::Debug for rustic_core::repofile::PackHeaderLength
pub fn rustic_core::repofile::PackHeaderLength::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::repofile::PackHeaderLength
impl core::marker::Send for rustic_core::repofile::PackHeaderLength
impl core::marker::Sync for rustic_core::repofile::PackHeaderLength
impl core::marker::Unpin for rustic_core::repofile::PackHeaderLength
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::PackHeaderLength
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::PackHeaderLength
impl<T, U> core::convert::Into<U> for rustic_core::repofile::PackHeaderLength where U: core::convert::From<T>
pub fn rustic_core::repofile::PackHeaderLength::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::PackHeaderLength where U: core::convert::Into<T>
pub type rustic_core::repofile::PackHeaderLength::Error = core::convert::Infallible
pub fn rustic_core::repofile::PackHeaderLength::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::PackHeaderLength where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::PackHeaderLength::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::PackHeaderLength::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::PackHeaderLength where T: core::clone::Clone
pub type rustic_core::repofile::PackHeaderLength::Owned = T
pub fn rustic_core::repofile::PackHeaderLength::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::PackHeaderLength::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::PackHeaderLength where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::PackHeaderLength::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeaderLength::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeaderLength::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::PackHeaderLength
pub fn rustic_core::repofile::PackHeaderLength::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::PackHeaderLength
pub type rustic_core::repofile::PackHeaderLength::Init = T
pub const rustic_core::repofile::PackHeaderLength::ALIGN: usize
pub unsafe fn rustic_core::repofile::PackHeaderLength::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::PackHeaderLength::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::PackHeaderLength::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::PackHeaderLength::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::PackHeaderLength
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::PackHeaderLength
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::PackHeaderLength
pub type rustic_core::repofile::PackHeaderLength::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::PackHeaderLength where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::PackHeaderLength::vzip(self) -> V
pub struct rustic_core::repofile::PackHeaderRef<'a>(pub &'a [rustic_core::repofile::IndexBlob])
impl<'a> core::clone::Clone for rustic_core::repofile::PackHeaderRef<'a>
pub fn rustic_core::repofile::PackHeaderRef<'a>::clone(&self) -> rustic_core::repofile::PackHeaderRef<'a>
impl<'a> core::fmt::Debug for rustic_core::repofile::PackHeaderRef<'a>
pub fn rustic_core::repofile::PackHeaderRef<'a>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::marker::Send for rustic_core::repofile::PackHeaderRef<'a>
impl<'a> core::marker::Sync for rustic_core::repofile::PackHeaderRef<'a>
impl<'a> core::marker::Unpin for rustic_core::repofile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::PackHeaderRef<'a>
impl<T, U> core::convert::Into<U> for rustic_core::repofile::PackHeaderRef<'a> where U: core::convert::From<T>
pub fn rustic_core::repofile::PackHeaderRef<'a>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::PackHeaderRef<'a> where U: core::convert::Into<T>
pub type rustic_core::repofile::PackHeaderRef<'a>::Error = core::convert::Infallible
pub fn rustic_core::repofile::PackHeaderRef<'a>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::PackHeaderRef<'a> where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::PackHeaderRef<'a>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::PackHeaderRef<'a>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::PackHeaderRef<'a> where T: core::clone::Clone
pub type rustic_core::repofile::PackHeaderRef<'a>::Owned = T
pub fn rustic_core::repofile::PackHeaderRef<'a>::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::PackHeaderRef<'a>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::PackHeaderRef<'a> where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::PackHeaderRef<'a>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeaderRef<'a>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::repofile::PackHeaderRef<'a>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::PackHeaderRef<'a>
pub fn rustic_core::repofile::PackHeaderRef<'a>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::PackHeaderRef<'a>
pub type rustic_core::repofile::PackHeaderRef<'a>::Init = T
pub const rustic_core::repofile::PackHeaderRef<'a>::ALIGN: usize
pub unsafe fn rustic_core::repofile::PackHeaderRef<'a>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::PackHeaderRef<'a>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::PackHeaderRef<'a>::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::PackHeaderRef<'a>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::repofile::PackHeaderRef<'a>
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::PackHeaderRef<'a>
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::PackHeaderRef<'a>
pub type rustic_core::repofile::PackHeaderRef<'a>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::PackHeaderRef<'a> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::PackHeaderRef<'a>::vzip(self) -> V
pub struct rustic_core::repofile::PathList(_)
impl rustic_core::PathList
pub fn rustic_core::PathList::from_string(sources: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::PathList::from_strings<I>(source: I) -> Self where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::PathList::is_empty(&self) -> bool
pub fn rustic_core::PathList::len(&self) -> usize
pub fn rustic_core::PathList::merge(self) -> Self
pub fn rustic_core::PathList::sanitize(self) -> rustic_core::RusticResult<Self>
impl core::fmt::Display for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::PathList
pub fn rustic_core::PathList::clone(&self) -> rustic_core::PathList
impl core::cmp::Eq for rustic_core::PathList
impl core::cmp::Ord for rustic_core::PathList
pub fn rustic_core::PathList::cmp(&self, other: &rustic_core::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::eq(&self, other: &rustic_core::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::partial_cmp(&self, other: &rustic_core::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::PathList
pub fn rustic_core::PathList::default() -> rustic_core::PathList
impl core::fmt::Debug for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::PathList
impl core::marker::StructuralPartialEq for rustic_core::PathList
impl core::marker::Send for rustic_core::PathList
impl core::marker::Sync for rustic_core::PathList
impl core::marker::Unpin for rustic_core::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PathList
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::PathList::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::PathList where U: core::convert::From<T>
pub fn rustic_core::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PathList where U: core::convert::Into<T>
pub type rustic_core::PathList::Error = core::convert::Infallible
pub fn rustic_core::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PathList where T: core::clone::Clone
pub type rustic_core::PathList::Owned = T
pub fn rustic_core::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::PathList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PathList
pub fn rustic_core::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PathList
pub type rustic_core::PathList::Init = T
pub const rustic_core::PathList::ALIGN: usize
pub unsafe fn rustic_core::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::PathList
pub type rustic_core::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PathList::vzip(self) -> V
pub struct rustic_core::repofile::SnapshotFile
pub rustic_core::repofile::SnapshotFile::delete: rustic_core::repofile::DeleteOption
pub rustic_core::repofile::SnapshotFile::description: core::option::Option<alloc::string::String>
pub rustic_core::repofile::SnapshotFile::gid: u32
pub rustic_core::repofile::SnapshotFile::hostname: alloc::string::String
pub rustic_core::repofile::SnapshotFile::id: rustic_core::Id
pub rustic_core::repofile::SnapshotFile::label: alloc::string::String
pub rustic_core::repofile::SnapshotFile::original: core::option::Option<rustic_core::Id>
pub rustic_core::repofile::SnapshotFile::parent: core::option::Option<rustic_core::Id>
pub rustic_core::repofile::SnapshotFile::paths: rustic_core::StringList
pub rustic_core::repofile::SnapshotFile::program_version: alloc::string::String
pub rustic_core::repofile::SnapshotFile::summary: core::option::Option<rustic_core::repofile::SnapshotSummary>
pub rustic_core::repofile::SnapshotFile::tags: rustic_core::StringList
pub rustic_core::repofile::SnapshotFile::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotFile::tree: rustic_core::Id
pub rustic_core::repofile::SnapshotFile::uid: u32
pub rustic_core::repofile::SnapshotFile::username: alloc::string::String
impl rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::add_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::StringList>) -> bool
pub fn rustic_core::repofile::SnapshotFile::from_options(opts: &rustic_core::SnapshotOptions) -> rustic_core::RusticResult<Self>
pub fn rustic_core::repofile::SnapshotFile::has_group(&self, group: &rustic_core::SnapshotGroup) -> bool
pub fn rustic_core::repofile::SnapshotFile::modify_sn(&mut self, set: alloc::vec::Vec<rustic_core::StringList>, add: alloc::vec::Vec<rustic_core::StringList>, remove: &[rustic_core::StringList], delete: &core::option::Option<rustic_core::repofile::DeleteOption>) -> core::option::Option<Self>
pub fn rustic_core::repofile::SnapshotFile::must_delete(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::SnapshotFile::must_keep(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::repofile::SnapshotFile::remove_tags(&mut self, tag_lists: &[rustic_core::StringList]) -> bool
pub fn rustic_core::repofile::SnapshotFile::set_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::StringList>) -> bool
impl core::cmp::Eq for rustic_core::repofile::SnapshotFile
impl core::cmp::Ord for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::repofile::SnapshotFile> for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::eq(&self, other: &Self) -> bool
impl core::cmp::PartialOrd<rustic_core::repofile::SnapshotFile> for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::default() -> Self
impl rustic_core::repofile::RepoFile for rustic_core::repofile::SnapshotFile
pub const rustic_core::repofile::SnapshotFile::TYPE: rustic_core::repofile::FileType
impl core::clone::Clone for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::clone(&self) -> rustic_core::repofile::SnapshotFile
impl core::fmt::Debug for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::SnapshotFile
impl core::marker::Sync for rustic_core::repofile::SnapshotFile
impl core::marker::Unpin for rustic_core::repofile::SnapshotFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::SnapshotFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::SnapshotFile
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::repofile::SnapshotFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::SnapshotFile::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::repofile::SnapshotFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::repofile::SnapshotFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::repofile::SnapshotFile where U: core::convert::From<T>
pub fn rustic_core::repofile::SnapshotFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::SnapshotFile where U: core::convert::Into<T>
pub type rustic_core::repofile::SnapshotFile::Error = core::convert::Infallible
pub fn rustic_core::repofile::SnapshotFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::SnapshotFile where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::SnapshotFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::SnapshotFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::SnapshotFile where T: core::clone::Clone
pub type rustic_core::repofile::SnapshotFile::Owned = T
pub fn rustic_core::repofile::SnapshotFile::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::SnapshotFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::SnapshotFile where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::SnapshotFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::SnapshotFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::repofile::SnapshotFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::SnapshotFile
pub fn rustic_core::repofile::SnapshotFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::SnapshotFile
pub type rustic_core::repofile::SnapshotFile::Init = T
pub const rustic_core::repofile::SnapshotFile::ALIGN: usize
pub unsafe fn rustic_core::repofile::SnapshotFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::SnapshotFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::SnapshotFile::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::SnapshotFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::SnapshotFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::SnapshotFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::SnapshotFile
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::SnapshotFile
pub type rustic_core::repofile::SnapshotFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::SnapshotFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::SnapshotFile::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::repofile::SnapshotSummary
pub rustic_core::repofile::SnapshotSummary::backup_duration: f64
pub rustic_core::repofile::SnapshotSummary::backup_end: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotSummary::backup_start: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::repofile::SnapshotSummary::command: alloc::string::String
pub rustic_core::repofile::SnapshotSummary::data_added: u64
pub rustic_core::repofile::SnapshotSummary::data_added_files: u64
pub rustic_core::repofile::SnapshotSummary::data_added_files_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_added_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_added_trees: u64
pub rustic_core::repofile::SnapshotSummary::data_added_trees_packed: u64
pub rustic_core::repofile::SnapshotSummary::data_blobs: u64
pub rustic_core::repofile::SnapshotSummary::dirs_changed: u64
pub rustic_core::repofile::SnapshotSummary::dirs_new: u64
pub rustic_core::repofile::SnapshotSummary::dirs_unmodified: u64
pub rustic_core::repofile::SnapshotSummary::files_changed: u64
pub rustic_core::repofile::SnapshotSummary::files_new: u64
pub rustic_core::repofile::SnapshotSummary::files_unmodified: u64
pub rustic_core::repofile::SnapshotSummary::total_bytes_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_dirs_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_dirsize_processed: u64
pub rustic_core::repofile::SnapshotSummary::total_duration: f64
pub rustic_core::repofile::SnapshotSummary::total_files_processed: u64
pub rustic_core::repofile::SnapshotSummary::tree_blobs: u64
impl core::default::Default for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::default() -> Self
impl core::clone::Clone for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::clone(&self) -> rustic_core::repofile::SnapshotSummary
impl core::fmt::Debug for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::SnapshotSummary
impl core::marker::Sync for rustic_core::repofile::SnapshotSummary
impl core::marker::Unpin for rustic_core::repofile::SnapshotSummary
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::SnapshotSummary
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::SnapshotSummary
impl<T, U> core::convert::Into<U> for rustic_core::repofile::SnapshotSummary where U: core::convert::From<T>
pub fn rustic_core::repofile::SnapshotSummary::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::SnapshotSummary where U: core::convert::Into<T>
pub type rustic_core::repofile::SnapshotSummary::Error = core::convert::Infallible
pub fn rustic_core::repofile::SnapshotSummary::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::SnapshotSummary where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::SnapshotSummary::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::SnapshotSummary::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::SnapshotSummary where T: core::clone::Clone
pub type rustic_core::repofile::SnapshotSummary::Owned = T
pub fn rustic_core::repofile::SnapshotSummary::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::SnapshotSummary::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::SnapshotSummary where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::SnapshotSummary::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::SnapshotSummary::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::SnapshotSummary where T: core::marker::Sized
pub fn rustic_core::repofile::SnapshotSummary::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::SnapshotSummary
pub fn rustic_core::repofile::SnapshotSummary::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::SnapshotSummary
pub type rustic_core::repofile::SnapshotSummary::Init = T
pub const rustic_core::repofile::SnapshotSummary::ALIGN: usize
pub unsafe fn rustic_core::repofile::SnapshotSummary::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::SnapshotSummary::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::SnapshotSummary::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::SnapshotSummary::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::SnapshotSummary where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::SnapshotSummary
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::SnapshotSummary
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::SnapshotSummary
pub type rustic_core::repofile::SnapshotSummary::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::SnapshotSummary where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::SnapshotSummary::vzip(self) -> V
pub struct rustic_core::repofile::StringList(_)
impl rustic_core::StringList
pub fn rustic_core::StringList::add(&mut self, s: alloc::string::String)
pub fn rustic_core::StringList::add_all(&mut self, string_lists: alloc::vec::Vec<Self>)
pub fn rustic_core::StringList::add_list(&mut self, sl: Self)
pub fn rustic_core::StringList::contains(&self, s: &str) -> bool
pub fn rustic_core::StringList::contains_all(&self, sl: &Self) -> bool
pub fn rustic_core::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::StringList::remove_all(&mut self, string_lists: &[Self])
pub fn rustic_core::StringList::sort(&mut self)
impl core::fmt::Display for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::StringList
pub type rustic_core::StringList::Err = rustic_core::RusticError
pub fn rustic_core::StringList::from_str(s: &str) -> rustic_core::RusticResult<Self>
impl core::clone::Clone for rustic_core::StringList
pub fn rustic_core::StringList::clone(&self) -> rustic_core::StringList
impl core::cmp::Eq for rustic_core::StringList
impl core::cmp::Ord for rustic_core::StringList
pub fn rustic_core::StringList::cmp(&self, other: &rustic_core::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::eq(&self, other: &rustic_core::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::partial_cmp(&self, other: &rustic_core::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::StringList
pub fn rustic_core::StringList::default() -> rustic_core::StringList
impl core::fmt::Debug for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::StringList
impl core::marker::StructuralPartialEq for rustic_core::StringList
impl serde::ser::Serialize for rustic_core::StringList
pub fn rustic_core::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::StringList
pub fn rustic_core::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::StringList
impl core::marker::Sync for rustic_core::StringList
impl core::marker::Unpin for rustic_core::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::StringList
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::StringList::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::StringList where U: core::convert::From<T>
pub fn rustic_core::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::StringList where U: core::convert::Into<T>
pub type rustic_core::StringList::Error = core::convert::Infallible
pub fn rustic_core::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::StringList where T: core::clone::Clone
pub type rustic_core::StringList::Owned = T
pub fn rustic_core::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::StringList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::StringList
pub fn rustic_core::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::StringList
pub type rustic_core::StringList::Init = T
pub const rustic_core::StringList::ALIGN: usize
pub unsafe fn rustic_core::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::StringList
pub type rustic_core::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::StringList::vzip(self) -> V
pub struct rustic_core::repofile::Tree
pub rustic_core::repofile::Tree::nodes: alloc::vec::Vec<rustic_core::repofile::Node>
impl core::iter::traits::collect::IntoIterator for rustic_core::repofile::Tree
pub type rustic_core::repofile::Tree::IntoIter = alloc::vec::into_iter::IntoIter<rustic_core::repofile::Node, alloc::alloc::Global>
pub type rustic_core::repofile::Tree::Item = rustic_core::repofile::Node
pub fn rustic_core::repofile::Tree::into_iter(self) -> Self::IntoIter
impl core::clone::Clone for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::clone(&self) -> rustic_core::repofile::Tree
impl core::default::Default for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::default() -> rustic_core::repofile::Tree
impl core::fmt::Debug for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::repofile::Tree
impl core::marker::Sync for rustic_core::repofile::Tree
impl core::marker::Unpin for rustic_core::repofile::Tree
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::repofile::Tree
impl core::panic::unwind_safe::UnwindSafe for rustic_core::repofile::Tree
impl<T, U> core::convert::Into<U> for rustic_core::repofile::Tree where U: core::convert::From<T>
pub fn rustic_core::repofile::Tree::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::repofile::Tree where U: core::convert::Into<T>
pub type rustic_core::repofile::Tree::Error = core::convert::Infallible
pub fn rustic_core::repofile::Tree::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::repofile::Tree where U: core::convert::TryFrom<T>
pub type rustic_core::repofile::Tree::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::repofile::Tree::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::repofile::Tree where T: core::clone::Clone
pub type rustic_core::repofile::Tree::Owned = T
pub fn rustic_core::repofile::Tree::clone_into(&self, target: &mut T)
pub fn rustic_core::repofile::Tree::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::repofile::Tree where T: 'static + core::marker::Sized
pub fn rustic_core::repofile::Tree::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::repofile::Tree where T: core::marker::Sized
pub fn rustic_core::repofile::Tree::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::repofile::Tree where T: core::marker::Sized
pub fn rustic_core::repofile::Tree::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::repofile::Tree
pub fn rustic_core::repofile::Tree::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::repofile::Tree
pub type rustic_core::repofile::Tree::Init = T
pub const rustic_core::repofile::Tree::ALIGN: usize
pub unsafe fn rustic_core::repofile::Tree::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::repofile::Tree::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::repofile::Tree::drop(ptr: usize)
pub unsafe fn rustic_core::repofile::Tree::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::repofile::Tree where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::repofile::Tree
impl<T> tracing::instrument::WithSubscriber for rustic_core::repofile::Tree
impl<T> typenum::type_operators::Same<T> for rustic_core::repofile::Tree
pub type rustic_core::repofile::Tree::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::repofile::Tree where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::repofile::Tree::vzip(self) -> V
pub const rustic_core::repofile::ALL_BLOB_TYPES: _
pub const rustic_core::repofile::ALL_FILE_TYPES: _
pub trait rustic_core::repofile::RepoFile: serde::ser::Serialize + serde::de::DeserializeOwned + core::marker::Sized + core::marker::Send + core::marker::Sync + 'static
pub const rustic_core::repofile::RepoFile::TYPE: rustic_core::repofile::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::ConfigFile
pub const rustic_core::repofile::ConfigFile::TYPE: rustic_core::repofile::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::IndexFile
pub const rustic_core::repofile::IndexFile::TYPE: rustic_core::repofile::FileType
impl rustic_core::repofile::RepoFile for rustic_core::repofile::SnapshotFile
pub const rustic_core::repofile::SnapshotFile::TYPE: rustic_core::repofile::FileType
#[non_exhaustive] pub struct rustic_core::BackupOptions
pub rustic_core::BackupOptions::as_path: core::option::Option<std::path::PathBuf>
pub rustic_core::BackupOptions::dry_run: bool
pub rustic_core::BackupOptions::ignore_filter_opts: rustic_core::LocalSourceFilterOptions
pub rustic_core::BackupOptions::ignore_save_opts: rustic_core::LocalSourceSaveOptions
pub rustic_core::BackupOptions::parent_opts: rustic_core::ParentOptions
pub rustic_core::BackupOptions::stdin_filename: alloc::string::String
impl rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::as_path(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::BackupOptions::dry_run(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::BackupOptions::ignore_filter_opts(self, value: impl core::convert::Into<rustic_core::LocalSourceFilterOptions>) -> Self
pub fn rustic_core::BackupOptions::ignore_save_opts(self, value: impl core::convert::Into<rustic_core::LocalSourceSaveOptions>) -> Self
pub fn rustic_core::BackupOptions::parent_opts(self, value: impl core::convert::Into<rustic_core::ParentOptions>) -> Self
pub fn rustic_core::BackupOptions::stdin_filename(self, value: impl core::convert::Into<alloc::string::String>) -> Self
impl core::clone::Clone for rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::clone(&self) -> rustic_core::BackupOptions
impl core::default::Default for rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::default() -> rustic_core::BackupOptions
impl core::fmt::Debug for rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::BackupOptions where rustic_core::BackupOptions: core::default::Default
pub fn rustic_core::BackupOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::BackupOptions
impl core::marker::Sync for rustic_core::BackupOptions
impl core::marker::Unpin for rustic_core::BackupOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::BackupOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::BackupOptions
impl<T, U> core::convert::Into<U> for rustic_core::BackupOptions where U: core::convert::From<T>
pub fn rustic_core::BackupOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::BackupOptions where U: core::convert::Into<T>
pub type rustic_core::BackupOptions::Error = core::convert::Infallible
pub fn rustic_core::BackupOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::BackupOptions where U: core::convert::TryFrom<T>
pub type rustic_core::BackupOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::BackupOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::BackupOptions where T: core::clone::Clone
pub type rustic_core::BackupOptions::Owned = T
pub fn rustic_core::BackupOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::BackupOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::BackupOptions where T: 'static + core::marker::Sized
pub fn rustic_core::BackupOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::BackupOptions where T: core::marker::Sized
pub fn rustic_core::BackupOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::BackupOptions where T: core::marker::Sized
pub fn rustic_core::BackupOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::BackupOptions
pub fn rustic_core::BackupOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::BackupOptions
pub type rustic_core::BackupOptions::Init = T
pub const rustic_core::BackupOptions::ALIGN: usize
pub unsafe fn rustic_core::BackupOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::BackupOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::BackupOptions::drop(ptr: usize)
pub unsafe fn rustic_core::BackupOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::BackupOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::BackupOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::BackupOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::BackupOptions
pub type rustic_core::BackupOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::BackupOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::BackupOptions::vzip(self) -> V
pub struct rustic_core::BlobInfo
pub rustic_core::BlobInfo::blob_type: rustic_core::repofile::BlobType
pub rustic_core::BlobInfo::count: u64
pub rustic_core::BlobInfo::data_size: u64
pub rustic_core::BlobInfo::size: u64
impl core::clone::Clone for rustic_core::BlobInfo
pub fn rustic_core::BlobInfo::clone(&self) -> rustic_core::BlobInfo
impl core::fmt::Debug for rustic_core::BlobInfo
pub fn rustic_core::BlobInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::BlobInfo
impl serde::ser::Serialize for rustic_core::BlobInfo
pub fn rustic_core::BlobInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::BlobInfo
pub fn rustic_core::BlobInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::BlobInfo
impl core::marker::Sync for rustic_core::BlobInfo
impl core::marker::Unpin for rustic_core::BlobInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::BlobInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::BlobInfo
impl<T, U> core::convert::Into<U> for rustic_core::BlobInfo where U: core::convert::From<T>
pub fn rustic_core::BlobInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::BlobInfo where U: core::convert::Into<T>
pub type rustic_core::BlobInfo::Error = core::convert::Infallible
pub fn rustic_core::BlobInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::BlobInfo where U: core::convert::TryFrom<T>
pub type rustic_core::BlobInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::BlobInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::BlobInfo where T: core::clone::Clone
pub type rustic_core::BlobInfo::Owned = T
pub fn rustic_core::BlobInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::BlobInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::BlobInfo where T: 'static + core::marker::Sized
pub fn rustic_core::BlobInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::BlobInfo where T: core::marker::Sized
pub fn rustic_core::BlobInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::BlobInfo where T: core::marker::Sized
pub fn rustic_core::BlobInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::BlobInfo
pub fn rustic_core::BlobInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::BlobInfo
pub type rustic_core::BlobInfo::Init = T
pub const rustic_core::BlobInfo::ALIGN: usize
pub unsafe fn rustic_core::BlobInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::BlobInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::BlobInfo::drop(ptr: usize)
pub unsafe fn rustic_core::BlobInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::BlobInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::BlobInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::BlobInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::BlobInfo
pub type rustic_core::BlobInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::BlobInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::BlobInfo::vzip(self) -> V
pub struct rustic_core::CheckOptions
pub rustic_core::CheckOptions::read_data: bool
pub rustic_core::CheckOptions::trust_cache: bool
impl rustic_core::CheckOptions
pub fn rustic_core::CheckOptions::read_data(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::CheckOptions::trust_cache(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::CheckOptions
pub fn rustic_core::CheckOptions::clone(&self) -> rustic_core::CheckOptions
impl core::default::Default for rustic_core::CheckOptions
pub fn rustic_core::CheckOptions::default() -> rustic_core::CheckOptions
impl core::fmt::Debug for rustic_core::CheckOptions
pub fn rustic_core::CheckOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::CheckOptions
impl core::marker::Send for rustic_core::CheckOptions
impl core::marker::Sync for rustic_core::CheckOptions
impl core::marker::Unpin for rustic_core::CheckOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::CheckOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::CheckOptions
impl<T, U> core::convert::Into<U> for rustic_core::CheckOptions where U: core::convert::From<T>
pub fn rustic_core::CheckOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::CheckOptions where U: core::convert::Into<T>
pub type rustic_core::CheckOptions::Error = core::convert::Infallible
pub fn rustic_core::CheckOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::CheckOptions where U: core::convert::TryFrom<T>
pub type rustic_core::CheckOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::CheckOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::CheckOptions where T: core::clone::Clone
pub type rustic_core::CheckOptions::Owned = T
pub fn rustic_core::CheckOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::CheckOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::CheckOptions where T: 'static + core::marker::Sized
pub fn rustic_core::CheckOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::CheckOptions where T: core::marker::Sized
pub fn rustic_core::CheckOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::CheckOptions where T: core::marker::Sized
pub fn rustic_core::CheckOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::CheckOptions
pub fn rustic_core::CheckOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::CheckOptions
pub type rustic_core::CheckOptions::Init = T
pub const rustic_core::CheckOptions::ALIGN: usize
pub unsafe fn rustic_core::CheckOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::CheckOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::CheckOptions::drop(ptr: usize)
pub unsafe fn rustic_core::CheckOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::CheckOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::CheckOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::CheckOptions
pub type rustic_core::CheckOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::CheckOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::CheckOptions::vzip(self) -> V
pub struct rustic_core::ConfigOptions
pub rustic_core::ConfigOptions::set_compression: core::option::Option<i32>
pub rustic_core::ConfigOptions::set_datapack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_datapack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_datapack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_treepack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigOptions::set_treepack_size: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_treepack_size_limit: core::option::Option<bytesize::ByteSize>
pub rustic_core::ConfigOptions::set_version: core::option::Option<u32>
impl rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::apply(&self, config: &mut rustic_core::repofile::ConfigFile) -> rustic_core::RusticResult<()>
impl rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::set_compression(self, value: impl core::convert::Into<core::option::Option<i32>>) -> Self
pub fn rustic_core::ConfigOptions::set_datapack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::ConfigOptions::set_datapack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::ConfigOptions::set_datapack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::ConfigOptions::set_max_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::ConfigOptions::set_min_packsize_tolerate_percent(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::ConfigOptions::set_treepack_growfactor(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
pub fn rustic_core::ConfigOptions::set_treepack_size(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::ConfigOptions::set_treepack_size_limit(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::ConfigOptions::set_version(self, value: impl core::convert::Into<core::option::Option<u32>>) -> Self
impl core::clone::Clone for rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::clone(&self) -> rustic_core::ConfigOptions
impl core::default::Default for rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::default() -> rustic_core::ConfigOptions
impl core::fmt::Debug for rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::ConfigOptions
impl core::marker::Send for rustic_core::ConfigOptions
impl core::marker::Sync for rustic_core::ConfigOptions
impl core::marker::Unpin for rustic_core::ConfigOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ConfigOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ConfigOptions
impl<T, U> core::convert::Into<U> for rustic_core::ConfigOptions where U: core::convert::From<T>
pub fn rustic_core::ConfigOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ConfigOptions where U: core::convert::Into<T>
pub type rustic_core::ConfigOptions::Error = core::convert::Infallible
pub fn rustic_core::ConfigOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ConfigOptions where U: core::convert::TryFrom<T>
pub type rustic_core::ConfigOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ConfigOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::ConfigOptions where T: core::clone::Clone
pub type rustic_core::ConfigOptions::Owned = T
pub fn rustic_core::ConfigOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::ConfigOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::ConfigOptions where T: 'static + core::marker::Sized
pub fn rustic_core::ConfigOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::ConfigOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ConfigOptions where T: core::marker::Sized
pub fn rustic_core::ConfigOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ConfigOptions
pub fn rustic_core::ConfigOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ConfigOptions
pub type rustic_core::ConfigOptions::Init = T
pub const rustic_core::ConfigOptions::ALIGN: usize
pub unsafe fn rustic_core::ConfigOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ConfigOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ConfigOptions::drop(ptr: usize)
pub unsafe fn rustic_core::ConfigOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ConfigOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::ConfigOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::ConfigOptions
pub type rustic_core::ConfigOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ConfigOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ConfigOptions::vzip(self) -> V
pub struct rustic_core::CopySnapshot
pub rustic_core::CopySnapshot::relevant: bool
pub rustic_core::CopySnapshot::sn: rustic_core::repofile::SnapshotFile
impl core::fmt::Debug for rustic_core::CopySnapshot
pub fn rustic_core::CopySnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::CopySnapshot
impl core::marker::Sync for rustic_core::CopySnapshot
impl core::marker::Unpin for rustic_core::CopySnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::CopySnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::CopySnapshot
impl<T, U> core::convert::Into<U> for rustic_core::CopySnapshot where U: core::convert::From<T>
pub fn rustic_core::CopySnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::CopySnapshot where U: core::convert::Into<T>
pub type rustic_core::CopySnapshot::Error = core::convert::Infallible
pub fn rustic_core::CopySnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::CopySnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::CopySnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::CopySnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::CopySnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::CopySnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::CopySnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::CopySnapshot where T: core::marker::Sized
pub fn rustic_core::CopySnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::CopySnapshot
pub fn rustic_core::CopySnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::CopySnapshot
pub type rustic_core::CopySnapshot::Init = T
pub const rustic_core::CopySnapshot::ALIGN: usize
pub unsafe fn rustic_core::CopySnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::CopySnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::CopySnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::CopySnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::CopySnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::CopySnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::CopySnapshot
pub type rustic_core::CopySnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::CopySnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::CopySnapshot::vzip(self) -> V
pub struct rustic_core::FileDirStats
pub rustic_core::FileDirStats::additional: u64
pub rustic_core::FileDirStats::modify: u64
pub rustic_core::FileDirStats::restore: u64
pub rustic_core::FileDirStats::unchanged: u64
pub rustic_core::FileDirStats::verified: u64
impl core::clone::Clone for rustic_core::FileDirStats
pub fn rustic_core::FileDirStats::clone(&self) -> rustic_core::FileDirStats
impl core::default::Default for rustic_core::FileDirStats
pub fn rustic_core::FileDirStats::default() -> rustic_core::FileDirStats
impl core::fmt::Debug for rustic_core::FileDirStats
pub fn rustic_core::FileDirStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::FileDirStats
impl core::marker::Send for rustic_core::FileDirStats
impl core::marker::Sync for rustic_core::FileDirStats
impl core::marker::Unpin for rustic_core::FileDirStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::FileDirStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::FileDirStats
impl<T, U> core::convert::Into<U> for rustic_core::FileDirStats where U: core::convert::From<T>
pub fn rustic_core::FileDirStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::FileDirStats where U: core::convert::Into<T>
pub type rustic_core::FileDirStats::Error = core::convert::Infallible
pub fn rustic_core::FileDirStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::FileDirStats where U: core::convert::TryFrom<T>
pub type rustic_core::FileDirStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::FileDirStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::FileDirStats where T: core::clone::Clone
pub type rustic_core::FileDirStats::Owned = T
pub fn rustic_core::FileDirStats::clone_into(&self, target: &mut T)
pub fn rustic_core::FileDirStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::FileDirStats where T: 'static + core::marker::Sized
pub fn rustic_core::FileDirStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::FileDirStats where T: core::marker::Sized
pub fn rustic_core::FileDirStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::FileDirStats where T: core::marker::Sized
pub fn rustic_core::FileDirStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::FileDirStats
pub fn rustic_core::FileDirStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::FileDirStats
pub type rustic_core::FileDirStats::Init = T
pub const rustic_core::FileDirStats::ALIGN: usize
pub unsafe fn rustic_core::FileDirStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::FileDirStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::FileDirStats::drop(ptr: usize)
pub unsafe fn rustic_core::FileDirStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::FileDirStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::FileDirStats
impl<T> typenum::type_operators::Same<T> for rustic_core::FileDirStats
pub type rustic_core::FileDirStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::FileDirStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::FileDirStats::vzip(self) -> V
pub struct rustic_core::ForgetGroup
pub rustic_core::ForgetGroup::group: rustic_core::SnapshotGroup
pub rustic_core::ForgetGroup::snapshots: alloc::vec::Vec<rustic_core::ForgetSnapshot>
impl core::fmt::Debug for rustic_core::ForgetGroup
pub fn rustic_core::ForgetGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::ForgetGroup
pub fn rustic_core::ForgetGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::ForgetGroup
impl core::marker::Sync for rustic_core::ForgetGroup
impl core::marker::Unpin for rustic_core::ForgetGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ForgetGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ForgetGroup
impl<T, U> core::convert::Into<U> for rustic_core::ForgetGroup where U: core::convert::From<T>
pub fn rustic_core::ForgetGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ForgetGroup where U: core::convert::Into<T>
pub type rustic_core::ForgetGroup::Error = core::convert::Infallible
pub fn rustic_core::ForgetGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ForgetGroup where U: core::convert::TryFrom<T>
pub type rustic_core::ForgetGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ForgetGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::ForgetGroup where T: 'static + core::marker::Sized
pub fn rustic_core::ForgetGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::ForgetGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ForgetGroup where T: core::marker::Sized
pub fn rustic_core::ForgetGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ForgetGroup
pub fn rustic_core::ForgetGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ForgetGroup
pub type rustic_core::ForgetGroup::Init = T
pub const rustic_core::ForgetGroup::ALIGN: usize
pub unsafe fn rustic_core::ForgetGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ForgetGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ForgetGroup::drop(ptr: usize)
pub unsafe fn rustic_core::ForgetGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ForgetGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::ForgetGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::ForgetGroup
pub type rustic_core::ForgetGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ForgetGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ForgetGroup::vzip(self) -> V
pub struct rustic_core::ForgetGroups(pub alloc::vec::Vec<rustic_core::ForgetGroup>)
impl rustic_core::ForgetGroups
pub fn rustic_core::ForgetGroups::into_forget_ids(self) -> alloc::vec::Vec<rustic_core::Id>
impl core::fmt::Debug for rustic_core::ForgetGroups
pub fn rustic_core::ForgetGroups::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::ForgetGroups
pub fn rustic_core::ForgetGroups::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::ForgetGroups
impl core::marker::Sync for rustic_core::ForgetGroups
impl core::marker::Unpin for rustic_core::ForgetGroups
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ForgetGroups
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ForgetGroups
impl<T, U> core::convert::Into<U> for rustic_core::ForgetGroups where U: core::convert::From<T>
pub fn rustic_core::ForgetGroups::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ForgetGroups where U: core::convert::Into<T>
pub type rustic_core::ForgetGroups::Error = core::convert::Infallible
pub fn rustic_core::ForgetGroups::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ForgetGroups where U: core::convert::TryFrom<T>
pub type rustic_core::ForgetGroups::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ForgetGroups::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::ForgetGroups where T: 'static + core::marker::Sized
pub fn rustic_core::ForgetGroups::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::ForgetGroups::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ForgetGroups where T: core::marker::Sized
pub fn rustic_core::ForgetGroups::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ForgetGroups
pub fn rustic_core::ForgetGroups::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ForgetGroups
pub type rustic_core::ForgetGroups::Init = T
pub const rustic_core::ForgetGroups::ALIGN: usize
pub unsafe fn rustic_core::ForgetGroups::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ForgetGroups::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ForgetGroups::drop(ptr: usize)
pub unsafe fn rustic_core::ForgetGroups::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ForgetGroups
impl<T> tracing::instrument::WithSubscriber for rustic_core::ForgetGroups
impl<T> typenum::type_operators::Same<T> for rustic_core::ForgetGroups
pub type rustic_core::ForgetGroups::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ForgetGroups where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ForgetGroups::vzip(self) -> V
pub struct rustic_core::ForgetSnapshot
pub rustic_core::ForgetSnapshot::keep: bool
pub rustic_core::ForgetSnapshot::reasons: alloc::vec::Vec<alloc::string::String>
pub rustic_core::ForgetSnapshot::snapshot: rustic_core::repofile::SnapshotFile
impl core::fmt::Debug for rustic_core::ForgetSnapshot
pub fn rustic_core::ForgetSnapshot::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::ForgetSnapshot
pub fn rustic_core::ForgetSnapshot::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::ForgetSnapshot
impl core::marker::Sync for rustic_core::ForgetSnapshot
impl core::marker::Unpin for rustic_core::ForgetSnapshot
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ForgetSnapshot
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ForgetSnapshot
impl<T, U> core::convert::Into<U> for rustic_core::ForgetSnapshot where U: core::convert::From<T>
pub fn rustic_core::ForgetSnapshot::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ForgetSnapshot where U: core::convert::Into<T>
pub type rustic_core::ForgetSnapshot::Error = core::convert::Infallible
pub fn rustic_core::ForgetSnapshot::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ForgetSnapshot where U: core::convert::TryFrom<T>
pub type rustic_core::ForgetSnapshot::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ForgetSnapshot::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::ForgetSnapshot where T: 'static + core::marker::Sized
pub fn rustic_core::ForgetSnapshot::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::ForgetSnapshot::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ForgetSnapshot where T: core::marker::Sized
pub fn rustic_core::ForgetSnapshot::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ForgetSnapshot
pub fn rustic_core::ForgetSnapshot::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ForgetSnapshot
pub type rustic_core::ForgetSnapshot::Init = T
pub const rustic_core::ForgetSnapshot::ALIGN: usize
pub unsafe fn rustic_core::ForgetSnapshot::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ForgetSnapshot::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ForgetSnapshot::drop(ptr: usize)
pub unsafe fn rustic_core::ForgetSnapshot::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ForgetSnapshot
impl<T> tracing::instrument::WithSubscriber for rustic_core::ForgetSnapshot
impl<T> typenum::type_operators::Same<T> for rustic_core::ForgetSnapshot
pub type rustic_core::ForgetSnapshot::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ForgetSnapshot where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ForgetSnapshot::vzip(self) -> V
pub struct rustic_core::HexId(_)
impl rustic_core::HexId
pub fn rustic_core::HexId::as_str(&self) -> &str
impl core::convert::AsRef<std::path::Path> for rustic_core::HexId
pub fn rustic_core::HexId::as_ref(&self) -> &std::path::Path
impl core::ops::deref::Deref for rustic_core::HexId
pub type rustic_core::HexId::Target = str
pub fn rustic_core::HexId::deref(&self) -> &Self::Target
impl core::clone::Clone for rustic_core::HexId
pub fn rustic_core::HexId::clone(&self) -> rustic_core::HexId
impl core::fmt::Debug for rustic_core::HexId
pub fn rustic_core::HexId::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::HexId
impl core::marker::Send for rustic_core::HexId
impl core::marker::Sync for rustic_core::HexId
impl core::marker::Unpin for rustic_core::HexId
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::HexId
impl core::panic::unwind_safe::UnwindSafe for rustic_core::HexId
impl<T, U> core::convert::Into<U> for rustic_core::HexId where U: core::convert::From<T>
pub fn rustic_core::HexId::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::HexId where U: core::convert::Into<T>
pub type rustic_core::HexId::Error = core::convert::Infallible
pub fn rustic_core::HexId::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::HexId where U: core::convert::TryFrom<T>
pub type rustic_core::HexId::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::HexId::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::HexId where T: core::clone::Clone
pub type rustic_core::HexId::Owned = T
pub fn rustic_core::HexId::clone_into(&self, target: &mut T)
pub fn rustic_core::HexId::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::HexId where T: 'static + core::marker::Sized
pub fn rustic_core::HexId::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::HexId where T: core::marker::Sized
pub fn rustic_core::HexId::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::HexId where T: core::marker::Sized
pub fn rustic_core::HexId::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::HexId
pub fn rustic_core::HexId::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::HexId
pub type rustic_core::HexId::Init = T
pub const rustic_core::HexId::ALIGN: usize
pub unsafe fn rustic_core::HexId::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::HexId::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::HexId::drop(ptr: usize)
pub unsafe fn rustic_core::HexId::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::HexId
impl<T> tracing::instrument::WithSubscriber for rustic_core::HexId
impl<T> typenum::type_operators::Same<T> for rustic_core::HexId
pub type rustic_core::HexId::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::HexId where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::HexId::vzip(self) -> V
pub struct rustic_core::Id(_)
impl rustic_core::Id
pub fn rustic_core::Id::blob_matches_reader(&self, length: usize, r: &mut impl std::io::Read) -> bool
pub fn rustic_core::Id::from_hex(s: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::Id::is_null(&self) -> bool
pub fn rustic_core::Id::random() -> Self
pub fn rustic_core::Id::to_hex(self) -> rustic_core::HexId
impl rustic_core::Id
pub fn rustic_core::Id::new(__0: [u8; 32]) -> rustic_core::Id
impl core::fmt::Debug for rustic_core::Id
pub fn rustic_core::Id::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for rustic_core::Id
pub fn rustic_core::Id::fmt(&self, _derive_more_display_formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl binrw::binread::BinRead for rustic_core::Id
pub type rustic_core::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::Id::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::Id
pub type rustic_core::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::Id::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::Id
pub fn rustic_core::Id::clone(&self) -> rustic_core::Id
impl core::cmp::Eq for rustic_core::Id
impl core::cmp::Ord for rustic_core::Id
pub fn rustic_core::Id::cmp(&self, other: &rustic_core::Id) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::Id> for rustic_core::Id
pub fn rustic_core::Id::eq(&self, other: &rustic_core::Id) -> bool
impl core::cmp::PartialOrd<rustic_core::Id> for rustic_core::Id
pub fn rustic_core::Id::partial_cmp(&self, other: &rustic_core::Id) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::Id
pub fn rustic_core::Id::default() -> rustic_core::Id
impl core::hash::Hash for rustic_core::Id
pub fn rustic_core::Id::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for rustic_core::Id
impl core::marker::StructuralEq for rustic_core::Id
impl core::marker::StructuralPartialEq for rustic_core::Id
impl serde::ser::Serialize for rustic_core::Id
pub fn rustic_core::Id::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::Id
pub fn rustic_core::Id::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::Id
impl core::marker::Sync for rustic_core::Id
impl core::marker::Unpin for rustic_core::Id
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Id
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Id
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::Id where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::Id::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::Id where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::Id::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::Id where U: core::convert::From<T>
pub fn rustic_core::Id::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Id where U: core::convert::Into<T>
pub type rustic_core::Id::Error = core::convert::Infallible
pub fn rustic_core::Id::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Id where U: core::convert::TryFrom<T>
pub type rustic_core::Id::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Id::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Id where T: core::clone::Clone
pub type rustic_core::Id::Owned = T
pub fn rustic_core::Id::clone_into(&self, target: &mut T)
pub fn rustic_core::Id::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::Id where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::Id::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::Id where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::Id::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::Id::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::Id::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::Id where T: 'static + core::marker::Sized
pub fn rustic_core::Id::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Id where T: core::marker::Sized
pub fn rustic_core::Id::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Id where T: core::marker::Sized
pub fn rustic_core::Id::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Id
pub fn rustic_core::Id::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Id
pub type rustic_core::Id::Init = T
pub const rustic_core::Id::ALIGN: usize
pub unsafe fn rustic_core::Id::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Id::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Id::drop(ptr: usize)
pub unsafe fn rustic_core::Id::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::Id where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::Id
impl<T> tracing::instrument::WithSubscriber for rustic_core::Id
impl<T> typenum::type_operators::Same<T> for rustic_core::Id
pub type rustic_core::Id::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Id where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Id::vzip(self) -> V
pub struct rustic_core::IndexInfos
pub rustic_core::IndexInfos::blobs: alloc::vec::Vec<rustic_core::BlobInfo>
pub rustic_core::IndexInfos::blobs_delete: alloc::vec::Vec<rustic_core::BlobInfo>
pub rustic_core::IndexInfos::packs: alloc::vec::Vec<rustic_core::PackInfo>
pub rustic_core::IndexInfos::packs_delete: alloc::vec::Vec<rustic_core::PackInfo>
impl core::clone::Clone for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::clone(&self) -> rustic_core::IndexInfos
impl core::default::Default for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::default() -> rustic_core::IndexInfos
impl core::fmt::Debug for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::IndexInfos
impl core::marker::Sync for rustic_core::IndexInfos
impl core::marker::Unpin for rustic_core::IndexInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexInfos
impl<T, U> core::convert::Into<U> for rustic_core::IndexInfos where U: core::convert::From<T>
pub fn rustic_core::IndexInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexInfos where U: core::convert::Into<T>
pub type rustic_core::IndexInfos::Error = core::convert::Infallible
pub fn rustic_core::IndexInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexInfos where U: core::convert::TryFrom<T>
pub type rustic_core::IndexInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexInfos where T: core::clone::Clone
pub type rustic_core::IndexInfos::Owned = T
pub fn rustic_core::IndexInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexInfos where T: 'static + core::marker::Sized
pub fn rustic_core::IndexInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexInfos where T: core::marker::Sized
pub fn rustic_core::IndexInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexInfos where T: core::marker::Sized
pub fn rustic_core::IndexInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexInfos
pub fn rustic_core::IndexInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexInfos
pub type rustic_core::IndexInfos::Init = T
pub const rustic_core::IndexInfos::ALIGN: usize
pub unsafe fn rustic_core::IndexInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexInfos::drop(ptr: usize)
pub unsafe fn rustic_core::IndexInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::IndexInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::IndexInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexInfos
pub type rustic_core::IndexInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexInfos::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::KeepOptions
pub rustic_core::KeepOptions::keep_daily: i32
pub rustic_core::KeepOptions::keep_half_yearly: i32
pub rustic_core::KeepOptions::keep_hourly: i32
pub rustic_core::KeepOptions::keep_ids: alloc::vec::Vec<alloc::string::String>
pub rustic_core::KeepOptions::keep_last: i32
pub rustic_core::KeepOptions::keep_monthly: i32
pub rustic_core::KeepOptions::keep_quarter_yearly: i32
pub rustic_core::KeepOptions::keep_tags: alloc::vec::Vec<rustic_core::StringList>
pub rustic_core::KeepOptions::keep_weekly: i32
pub rustic_core::KeepOptions::keep_within: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_daily: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_half_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_hourly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_monthly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_quarter_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_weekly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_within_yearly: humantime::wrapper::Duration
pub rustic_core::KeepOptions::keep_yearly: i32
impl rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::apply(&self, snapshots: alloc::vec::Vec<rustic_core::repofile::SnapshotFile>, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> alloc::vec::Vec<rustic_core::ForgetSnapshot>
impl rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::keep_daily(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_half_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_hourly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_ids(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::KeepOptions::keep_last(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_monthly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_quarter_yearly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_tags(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::StringList>>) -> Self
pub fn rustic_core::KeepOptions::keep_weekly(self, value: impl core::convert::Into<i32>) -> Self
pub fn rustic_core::KeepOptions::keep_within(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_daily(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_half_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_hourly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_monthly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_quarter_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_weekly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_within_yearly(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::KeepOptions::keep_yearly(self, value: impl core::convert::Into<i32>) -> Self
impl core::default::Default for rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::default() -> Self
impl core::clone::Clone for rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::clone(&self) -> rustic_core::KeepOptions
impl core::cmp::Eq for rustic_core::KeepOptions
impl core::cmp::PartialEq<rustic_core::KeepOptions> for rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::eq(&self, other: &rustic_core::KeepOptions) -> bool
impl core::fmt::Debug for rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::KeepOptions
impl core::marker::StructuralPartialEq for rustic_core::KeepOptions
impl<'de> serde::de::Deserialize<'de> for rustic_core::KeepOptions where rustic_core::KeepOptions: core::default::Default
pub fn rustic_core::KeepOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::KeepOptions
impl core::marker::Sync for rustic_core::KeepOptions
impl core::marker::Unpin for rustic_core::KeepOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::KeepOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::KeepOptions
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::KeepOptions where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::KeepOptions::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::KeepOptions where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::KeepOptions::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::KeepOptions where U: core::convert::From<T>
pub fn rustic_core::KeepOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::KeepOptions where U: core::convert::Into<T>
pub type rustic_core::KeepOptions::Error = core::convert::Infallible
pub fn rustic_core::KeepOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::KeepOptions where U: core::convert::TryFrom<T>
pub type rustic_core::KeepOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::KeepOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::KeepOptions where T: core::clone::Clone
pub type rustic_core::KeepOptions::Owned = T
pub fn rustic_core::KeepOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::KeepOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::KeepOptions where T: 'static + core::marker::Sized
pub fn rustic_core::KeepOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::KeepOptions where T: core::marker::Sized
pub fn rustic_core::KeepOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::KeepOptions where T: core::marker::Sized
pub fn rustic_core::KeepOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::KeepOptions
pub fn rustic_core::KeepOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::KeepOptions
pub type rustic_core::KeepOptions::Init = T
pub const rustic_core::KeepOptions::ALIGN: usize
pub unsafe fn rustic_core::KeepOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::KeepOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::KeepOptions::drop(ptr: usize)
pub unsafe fn rustic_core::KeepOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::KeepOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::KeepOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::KeepOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::KeepOptions
pub type rustic_core::KeepOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::KeepOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::KeepOptions::vzip(self) -> V
pub struct rustic_core::KeyOptions
pub rustic_core::KeyOptions::hostname: core::option::Option<alloc::string::String>
pub rustic_core::KeyOptions::username: core::option::Option<alloc::string::String>
pub rustic_core::KeyOptions::with_created: bool
impl rustic_core::KeyOptions
pub fn rustic_core::KeyOptions::hostname(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::KeyOptions::username(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::KeyOptions::with_created(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::KeyOptions
pub fn rustic_core::KeyOptions::clone(&self) -> rustic_core::KeyOptions
impl core::default::Default for rustic_core::KeyOptions
pub fn rustic_core::KeyOptions::default() -> rustic_core::KeyOptions
impl core::fmt::Debug for rustic_core::KeyOptions
pub fn rustic_core::KeyOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::KeyOptions
impl core::marker::Sync for rustic_core::KeyOptions
impl core::marker::Unpin for rustic_core::KeyOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::KeyOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::KeyOptions
impl<T, U> core::convert::Into<U> for rustic_core::KeyOptions where U: core::convert::From<T>
pub fn rustic_core::KeyOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::KeyOptions where U: core::convert::Into<T>
pub type rustic_core::KeyOptions::Error = core::convert::Infallible
pub fn rustic_core::KeyOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::KeyOptions where U: core::convert::TryFrom<T>
pub type rustic_core::KeyOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::KeyOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::KeyOptions where T: core::clone::Clone
pub type rustic_core::KeyOptions::Owned = T
pub fn rustic_core::KeyOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::KeyOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::KeyOptions where T: 'static + core::marker::Sized
pub fn rustic_core::KeyOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::KeyOptions where T: core::marker::Sized
pub fn rustic_core::KeyOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::KeyOptions where T: core::marker::Sized
pub fn rustic_core::KeyOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::KeyOptions
pub fn rustic_core::KeyOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::KeyOptions
pub type rustic_core::KeyOptions::Init = T
pub const rustic_core::KeyOptions::ALIGN: usize
pub unsafe fn rustic_core::KeyOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::KeyOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::KeyOptions::drop(ptr: usize)
pub unsafe fn rustic_core::KeyOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::KeyOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::KeyOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::KeyOptions
pub type rustic_core::KeyOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::KeyOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::KeyOptions::vzip(self) -> V
pub struct rustic_core::LocalDestination
impl rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::create_dir(&self, item: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::create_special(&self, item: impl core::convert::AsRef<std::path::Path>, node: &rustic_core::repofile::Node) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::get_matching_file(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> core::option::Option<std::fs::File>
pub fn rustic_core::LocalDestination::new(path: &str, create: bool, expect_file: bool) -> rustic_core::RusticResult<Self>
pub fn rustic_core::LocalDestination::read_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, length: u64) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::LocalDestination::remove_dir(&self, dirname: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::remove_file(&self, filename: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_extended_attributes(&self, item: impl core::convert::AsRef<std::path::Path>, extended_attributes: &[ExtendedAttribute]) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_length(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_permission(&self, item: impl core::convert::AsRef<std::path::Path>, node: &rustic_core::repofile::Node) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_times(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_uid_gid(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_user_group(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::write_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, data: &[u8]) -> rustic_core::RusticResult<()>
impl core::clone::Clone for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::clone(&self) -> rustic_core::LocalDestination
impl core::fmt::Debug for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::LocalDestination
impl core::marker::Sync for rustic_core::LocalDestination
impl core::marker::Unpin for rustic_core::LocalDestination
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalDestination
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalDestination
impl<T, U> core::convert::Into<U> for rustic_core::LocalDestination where U: core::convert::From<T>
pub fn rustic_core::LocalDestination::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalDestination where U: core::convert::Into<T>
pub type rustic_core::LocalDestination::Error = core::convert::Infallible
pub fn rustic_core::LocalDestination::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalDestination where U: core::convert::TryFrom<T>
pub type rustic_core::LocalDestination::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalDestination::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalDestination where T: core::clone::Clone
pub type rustic_core::LocalDestination::Owned = T
pub fn rustic_core::LocalDestination::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalDestination::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalDestination where T: 'static + core::marker::Sized
pub fn rustic_core::LocalDestination::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalDestination where T: core::marker::Sized
pub fn rustic_core::LocalDestination::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalDestination where T: core::marker::Sized
pub fn rustic_core::LocalDestination::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalDestination
pub type rustic_core::LocalDestination::Init = T
pub const rustic_core::LocalDestination::ALIGN: usize
pub unsafe fn rustic_core::LocalDestination::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalDestination::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalDestination::drop(ptr: usize)
pub unsafe fn rustic_core::LocalDestination::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::LocalDestination
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalDestination
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalDestination
pub type rustic_core::LocalDestination::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalDestination where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalDestination::vzip(self) -> V
pub struct rustic_core::LocalSource
impl rustic_core::LocalSource
pub fn rustic_core::LocalSource::new(save_opts: rustic_core::LocalSourceSaveOptions, filter_opts: &rustic_core::LocalSourceFilterOptions, backup_paths: &[impl core::convert::AsRef<std::path::Path>]) -> rustic_core::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::LocalSource
pub type rustic_core::LocalSource::Item = core::result::Result<rustic_core::ReadSourceEntry<OpenFile>, rustic_core::RusticError>
pub fn rustic_core::LocalSource::next(&mut self) -> core::option::Option<Self::Item>
impl core::marker::Send for rustic_core::LocalSource
impl core::marker::Sync for rustic_core::LocalSource
impl core::marker::Unpin for rustic_core::LocalSource
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSource
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::LocalSource::IntoIter = I
pub type rustic_core::LocalSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::LocalSource::into_iter(self) -> I
impl<I> pariter::IteratorExt for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
impl<T, U> core::convert::Into<U> for rustic_core::LocalSource where U: core::convert::From<T>
pub fn rustic_core::LocalSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSource where U: core::convert::Into<T>
pub type rustic_core::LocalSource::Error = core::convert::Infallible
pub fn rustic_core::LocalSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSource where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::LocalSource where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSource where T: core::marker::Sized
pub fn rustic_core::LocalSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSource where T: core::marker::Sized
pub fn rustic_core::LocalSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSource
pub fn rustic_core::LocalSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSource
pub type rustic_core::LocalSource::Init = T
pub const rustic_core::LocalSource::ALIGN: usize
pub unsafe fn rustic_core::LocalSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSource::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> rayon::iter::par_bridge::ParallelBridge for rustic_core::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Send, <T as core::iter::traits::iterator::Iterator>::Item: core::marker::Send
pub fn rustic_core::LocalSource::par_bridge(self) -> rayon::iter::par_bridge::IterBridge<T>
impl<T> tracing::instrument::Instrument for rustic_core::LocalSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSource
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSource
pub type rustic_core::LocalSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSource::vzip(self) -> V
pub struct rustic_core::LocalSourceFilterOptions
pub rustic_core::LocalSourceFilterOptions::exclude_if_present: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::exclude_larger_than: core::option::Option<bytesize::ByteSize>
pub rustic_core::LocalSourceFilterOptions::git_ignore: bool
pub rustic_core::LocalSourceFilterOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LocalSourceFilterOptions::no_require_git: bool
pub rustic_core::LocalSourceFilterOptions::one_file_system: bool
impl rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::exclude_if_present(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::exclude_larger_than(self, value: impl core::convert::Into<core::option::Option<bytesize::ByteSize>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::git_ignore(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::no_require_git(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::LocalSourceFilterOptions::one_file_system(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::clone(&self) -> rustic_core::LocalSourceFilterOptions
impl core::default::Default for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::default() -> rustic_core::LocalSourceFilterOptions
impl core::fmt::Debug for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::LocalSourceFilterOptions where rustic_core::LocalSourceFilterOptions: core::default::Default
pub fn rustic_core::LocalSourceFilterOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::LocalSourceFilterOptions
impl core::marker::Sync for rustic_core::LocalSourceFilterOptions
impl core::marker::Unpin for rustic_core::LocalSourceFilterOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSourceFilterOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSourceFilterOptions
impl<T, U> core::convert::Into<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::From<T>
pub fn rustic_core::LocalSourceFilterOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::Into<T>
pub type rustic_core::LocalSourceFilterOptions::Error = core::convert::Infallible
pub fn rustic_core::LocalSourceFilterOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSourceFilterOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSourceFilterOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalSourceFilterOptions where T: core::clone::Clone
pub type rustic_core::LocalSourceFilterOptions::Owned = T
pub fn rustic_core::LocalSourceFilterOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalSourceFilterOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalSourceFilterOptions where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSourceFilterOptions
pub type rustic_core::LocalSourceFilterOptions::Init = T
pub const rustic_core::LocalSourceFilterOptions::ALIGN: usize
pub unsafe fn rustic_core::LocalSourceFilterOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSourceFilterOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSourceFilterOptions::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSourceFilterOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::LocalSourceFilterOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::LocalSourceFilterOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSourceFilterOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSourceFilterOptions
pub type rustic_core::LocalSourceFilterOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSourceFilterOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSourceFilterOptions::vzip(self) -> V
pub struct rustic_core::LocalSourceSaveOptions
pub rustic_core::LocalSourceSaveOptions::ignore_devid: bool
pub rustic_core::LocalSourceSaveOptions::with_atime: bool
impl rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::ignore_devid(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::LocalSourceSaveOptions::with_atime(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::clone(&self) -> rustic_core::LocalSourceSaveOptions
impl core::default::Default for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::default() -> rustic_core::LocalSourceSaveOptions
impl core::fmt::Debug for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::LocalSourceSaveOptions
impl serde::ser::Serialize for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::LocalSourceSaveOptions where rustic_core::LocalSourceSaveOptions: core::default::Default
pub fn rustic_core::LocalSourceSaveOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::LocalSourceSaveOptions
impl core::marker::Sync for rustic_core::LocalSourceSaveOptions
impl core::marker::Unpin for rustic_core::LocalSourceSaveOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSourceSaveOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSourceSaveOptions
impl<T, U> core::convert::Into<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::From<T>
pub fn rustic_core::LocalSourceSaveOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::Into<T>
pub type rustic_core::LocalSourceSaveOptions::Error = core::convert::Infallible
pub fn rustic_core::LocalSourceSaveOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSourceSaveOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSourceSaveOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalSourceSaveOptions where T: core::clone::Clone
pub type rustic_core::LocalSourceSaveOptions::Owned = T
pub fn rustic_core::LocalSourceSaveOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalSourceSaveOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalSourceSaveOptions where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSourceSaveOptions
pub type rustic_core::LocalSourceSaveOptions::Init = T
pub const rustic_core::LocalSourceSaveOptions::ALIGN: usize
pub unsafe fn rustic_core::LocalSourceSaveOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSourceSaveOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSourceSaveOptions::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSourceSaveOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::LocalSourceSaveOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::LocalSourceSaveOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSourceSaveOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSourceSaveOptions
pub type rustic_core::LocalSourceSaveOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSourceSaveOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSourceSaveOptions::vzip(self) -> V
pub struct rustic_core::LsOptions
pub rustic_core::LsOptions::glob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::glob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::iglob: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::iglob_file: alloc::vec::Vec<alloc::string::String>
pub rustic_core::LsOptions::recursive: bool
impl rustic_core::LsOptions
pub fn rustic_core::LsOptions::glob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LsOptions::glob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LsOptions::iglob(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LsOptions::iglob_file(self, value: impl core::convert::Into<alloc::vec::Vec<alloc::string::String>>) -> Self
pub fn rustic_core::LsOptions::recursive(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::LsOptions
pub fn rustic_core::LsOptions::default() -> Self
impl core::clone::Clone for rustic_core::LsOptions
pub fn rustic_core::LsOptions::clone(&self) -> rustic_core::LsOptions
impl core::fmt::Debug for rustic_core::LsOptions
pub fn rustic_core::LsOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::LsOptions
impl core::marker::Sync for rustic_core::LsOptions
impl core::marker::Unpin for rustic_core::LsOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LsOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LsOptions
impl<T, U> core::convert::Into<U> for rustic_core::LsOptions where U: core::convert::From<T>
pub fn rustic_core::LsOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LsOptions where U: core::convert::Into<T>
pub type rustic_core::LsOptions::Error = core::convert::Infallible
pub fn rustic_core::LsOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LsOptions where U: core::convert::TryFrom<T>
pub type rustic_core::LsOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LsOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LsOptions where T: core::clone::Clone
pub type rustic_core::LsOptions::Owned = T
pub fn rustic_core::LsOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::LsOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LsOptions where T: 'static + core::marker::Sized
pub fn rustic_core::LsOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LsOptions where T: core::marker::Sized
pub fn rustic_core::LsOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LsOptions where T: core::marker::Sized
pub fn rustic_core::LsOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LsOptions
pub fn rustic_core::LsOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LsOptions
pub type rustic_core::LsOptions::Init = T
pub const rustic_core::LsOptions::ALIGN: usize
pub unsafe fn rustic_core::LsOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LsOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LsOptions::drop(ptr: usize)
pub unsafe fn rustic_core::LsOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::LsOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::LsOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::LsOptions
pub type rustic_core::LsOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LsOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LsOptions::vzip(self) -> V
pub struct rustic_core::NoProgress
impl rustic_core::Progress for rustic_core::NoProgress
pub fn rustic_core::NoProgress::finish(&self)
pub fn rustic_core::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::NoProgress::set_title(&self, title: &'static str)
impl core::clone::Clone for rustic_core::NoProgress
pub fn rustic_core::NoProgress::clone(&self) -> rustic_core::NoProgress
impl core::fmt::Debug for rustic_core::NoProgress
pub fn rustic_core::NoProgress::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::NoProgress
impl core::marker::Send for rustic_core::NoProgress
impl core::marker::Sync for rustic_core::NoProgress
impl core::marker::Unpin for rustic_core::NoProgress
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::NoProgress
impl core::panic::unwind_safe::UnwindSafe for rustic_core::NoProgress
impl<T, U> core::convert::Into<U> for rustic_core::NoProgress where U: core::convert::From<T>
pub fn rustic_core::NoProgress::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::NoProgress where U: core::convert::Into<T>
pub type rustic_core::NoProgress::Error = core::convert::Infallible
pub fn rustic_core::NoProgress::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::NoProgress where U: core::convert::TryFrom<T>
pub type rustic_core::NoProgress::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::NoProgress::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::NoProgress where T: core::clone::Clone
pub type rustic_core::NoProgress::Owned = T
pub fn rustic_core::NoProgress::clone_into(&self, target: &mut T)
pub fn rustic_core::NoProgress::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::NoProgress where T: 'static + core::marker::Sized
pub fn rustic_core::NoProgress::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::NoProgress where T: core::marker::Sized
pub fn rustic_core::NoProgress::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::NoProgress where T: core::marker::Sized
pub fn rustic_core::NoProgress::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::NoProgress
pub fn rustic_core::NoProgress::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::NoProgress
pub type rustic_core::NoProgress::Init = T
pub const rustic_core::NoProgress::ALIGN: usize
pub unsafe fn rustic_core::NoProgress::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::NoProgress::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::NoProgress::drop(ptr: usize)
pub unsafe fn rustic_core::NoProgress::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::NoProgress
impl<T> tracing::instrument::WithSubscriber for rustic_core::NoProgress
impl<T> typenum::type_operators::Same<T> for rustic_core::NoProgress
pub type rustic_core::NoProgress::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::NoProgress where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::NoProgress::vzip(self) -> V
pub struct rustic_core::NoProgressBars
impl rustic_core::ProgressBars for rustic_core::NoProgressBars
pub type rustic_core::NoProgressBars::P = rustic_core::NoProgress
pub fn rustic_core::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl core::clone::Clone for rustic_core::NoProgressBars
pub fn rustic_core::NoProgressBars::clone(&self) -> rustic_core::NoProgressBars
impl core::fmt::Debug for rustic_core::NoProgressBars
pub fn rustic_core::NoProgressBars::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::NoProgressBars
impl core::marker::Send for rustic_core::NoProgressBars
impl core::marker::Sync for rustic_core::NoProgressBars
impl core::marker::Unpin for rustic_core::NoProgressBars
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::NoProgressBars
impl core::panic::unwind_safe::UnwindSafe for rustic_core::NoProgressBars
impl<T, U> core::convert::Into<U> for rustic_core::NoProgressBars where U: core::convert::From<T>
pub fn rustic_core::NoProgressBars::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::NoProgressBars where U: core::convert::Into<T>
pub type rustic_core::NoProgressBars::Error = core::convert::Infallible
pub fn rustic_core::NoProgressBars::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::NoProgressBars where U: core::convert::TryFrom<T>
pub type rustic_core::NoProgressBars::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::NoProgressBars::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::NoProgressBars where T: core::clone::Clone
pub type rustic_core::NoProgressBars::Owned = T
pub fn rustic_core::NoProgressBars::clone_into(&self, target: &mut T)
pub fn rustic_core::NoProgressBars::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::NoProgressBars where T: 'static + core::marker::Sized
pub fn rustic_core::NoProgressBars::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::NoProgressBars::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::NoProgressBars where T: core::marker::Sized
pub fn rustic_core::NoProgressBars::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::NoProgressBars
pub fn rustic_core::NoProgressBars::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::NoProgressBars
pub type rustic_core::NoProgressBars::Init = T
pub const rustic_core::NoProgressBars::ALIGN: usize
pub unsafe fn rustic_core::NoProgressBars::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::NoProgressBars::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::NoProgressBars::drop(ptr: usize)
pub unsafe fn rustic_core::NoProgressBars::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::NoProgressBars
impl<T> tracing::instrument::WithSubscriber for rustic_core::NoProgressBars
impl<T> typenum::type_operators::Same<T> for rustic_core::NoProgressBars
pub type rustic_core::NoProgressBars::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::NoProgressBars where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::NoProgressBars::vzip(self) -> V
pub struct rustic_core::OpenStatus
impl core::fmt::Debug for rustic_core::OpenStatus
pub fn rustic_core::OpenStatus::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::OpenStatus
impl core::marker::Sync for rustic_core::OpenStatus
impl core::marker::Unpin for rustic_core::OpenStatus
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::OpenStatus
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::OpenStatus
impl<T, U> core::convert::Into<U> for rustic_core::OpenStatus where U: core::convert::From<T>
pub fn rustic_core::OpenStatus::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::OpenStatus where U: core::convert::Into<T>
pub type rustic_core::OpenStatus::Error = core::convert::Infallible
pub fn rustic_core::OpenStatus::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::OpenStatus where U: core::convert::TryFrom<T>
pub type rustic_core::OpenStatus::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::OpenStatus::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::OpenStatus where T: 'static + core::marker::Sized
pub fn rustic_core::OpenStatus::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::OpenStatus where T: core::marker::Sized
pub fn rustic_core::OpenStatus::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::OpenStatus where T: core::marker::Sized
pub fn rustic_core::OpenStatus::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::OpenStatus
pub fn rustic_core::OpenStatus::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::OpenStatus
pub type rustic_core::OpenStatus::Init = T
pub const rustic_core::OpenStatus::ALIGN: usize
pub unsafe fn rustic_core::OpenStatus::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::OpenStatus::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::OpenStatus::drop(ptr: usize)
pub unsafe fn rustic_core::OpenStatus::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::OpenStatus
impl<T> tracing::instrument::WithSubscriber for rustic_core::OpenStatus
impl<T> typenum::type_operators::Same<T> for rustic_core::OpenStatus
pub type rustic_core::OpenStatus::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::OpenStatus where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::OpenStatus::vzip(self) -> V
pub struct rustic_core::PackInfo
pub rustic_core::PackInfo::blob_type: rustic_core::repofile::BlobType
pub rustic_core::PackInfo::count: u64
pub rustic_core::PackInfo::max_size: core::option::Option<u64>
pub rustic_core::PackInfo::min_size: core::option::Option<u64>
impl core::clone::Clone for rustic_core::PackInfo
pub fn rustic_core::PackInfo::clone(&self) -> rustic_core::PackInfo
impl core::fmt::Debug for rustic_core::PackInfo
pub fn rustic_core::PackInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::PackInfo
impl serde::ser::Serialize for rustic_core::PackInfo
pub fn rustic_core::PackInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::PackInfo
pub fn rustic_core::PackInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::PackInfo
impl core::marker::Sync for rustic_core::PackInfo
impl core::marker::Unpin for rustic_core::PackInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PackInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PackInfo
impl<T, U> core::convert::Into<U> for rustic_core::PackInfo where U: core::convert::From<T>
pub fn rustic_core::PackInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PackInfo where U: core::convert::Into<T>
pub type rustic_core::PackInfo::Error = core::convert::Infallible
pub fn rustic_core::PackInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PackInfo where U: core::convert::TryFrom<T>
pub type rustic_core::PackInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PackInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PackInfo where T: core::clone::Clone
pub type rustic_core::PackInfo::Owned = T
pub fn rustic_core::PackInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::PackInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PackInfo where T: 'static + core::marker::Sized
pub fn rustic_core::PackInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PackInfo where T: core::marker::Sized
pub fn rustic_core::PackInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PackInfo where T: core::marker::Sized
pub fn rustic_core::PackInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PackInfo
pub fn rustic_core::PackInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PackInfo
pub type rustic_core::PackInfo::Init = T
pub const rustic_core::PackInfo::ALIGN: usize
pub unsafe fn rustic_core::PackInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PackInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PackInfo::drop(ptr: usize)
pub unsafe fn rustic_core::PackInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::PackInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::PackInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::PackInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::PackInfo
pub type rustic_core::PackInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PackInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PackInfo::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::ParentOptions
pub rustic_core::ParentOptions::force: bool
pub rustic_core::ParentOptions::group_by: core::option::Option<rustic_core::SnapshotGroupCriterion>
pub rustic_core::ParentOptions::ignore_ctime: bool
pub rustic_core::ParentOptions::ignore_inode: bool
pub rustic_core::ParentOptions::parent: core::option::Option<alloc::string::String>
impl rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::force(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::ParentOptions::group_by(self, value: impl core::convert::Into<core::option::Option<rustic_core::SnapshotGroupCriterion>>) -> Self
pub fn rustic_core::ParentOptions::ignore_ctime(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::ParentOptions::ignore_inode(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::ParentOptions::parent(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
impl core::clone::Clone for rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::clone(&self) -> rustic_core::ParentOptions
impl core::default::Default for rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::default() -> rustic_core::ParentOptions
impl core::fmt::Debug for rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::ParentOptions where rustic_core::ParentOptions: core::default::Default
pub fn rustic_core::ParentOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::ParentOptions
impl core::marker::Sync for rustic_core::ParentOptions
impl core::marker::Unpin for rustic_core::ParentOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ParentOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ParentOptions
impl<T, U> core::convert::Into<U> for rustic_core::ParentOptions where U: core::convert::From<T>
pub fn rustic_core::ParentOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ParentOptions where U: core::convert::Into<T>
pub type rustic_core::ParentOptions::Error = core::convert::Infallible
pub fn rustic_core::ParentOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ParentOptions where U: core::convert::TryFrom<T>
pub type rustic_core::ParentOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ParentOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::ParentOptions where T: core::clone::Clone
pub type rustic_core::ParentOptions::Owned = T
pub fn rustic_core::ParentOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::ParentOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::ParentOptions where T: 'static + core::marker::Sized
pub fn rustic_core::ParentOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ParentOptions where T: core::marker::Sized
pub fn rustic_core::ParentOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ParentOptions where T: core::marker::Sized
pub fn rustic_core::ParentOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ParentOptions
pub fn rustic_core::ParentOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ParentOptions
pub type rustic_core::ParentOptions::Init = T
pub const rustic_core::ParentOptions::ALIGN: usize
pub unsafe fn rustic_core::ParentOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ParentOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ParentOptions::drop(ptr: usize)
pub unsafe fn rustic_core::ParentOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::ParentOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::ParentOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::ParentOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::ParentOptions
pub type rustic_core::ParentOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ParentOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ParentOptions::vzip(self) -> V
pub struct rustic_core::PathList(_)
impl rustic_core::PathList
pub fn rustic_core::PathList::from_string(sources: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::PathList::from_strings<I>(source: I) -> Self where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::PathList::is_empty(&self) -> bool
pub fn rustic_core::PathList::len(&self) -> usize
pub fn rustic_core::PathList::merge(self) -> Self
pub fn rustic_core::PathList::sanitize(self) -> rustic_core::RusticResult<Self>
impl core::fmt::Display for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::PathList
pub fn rustic_core::PathList::clone(&self) -> rustic_core::PathList
impl core::cmp::Eq for rustic_core::PathList
impl core::cmp::Ord for rustic_core::PathList
pub fn rustic_core::PathList::cmp(&self, other: &rustic_core::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::eq(&self, other: &rustic_core::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::partial_cmp(&self, other: &rustic_core::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::PathList
pub fn rustic_core::PathList::default() -> rustic_core::PathList
impl core::fmt::Debug for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::PathList
impl core::marker::StructuralPartialEq for rustic_core::PathList
impl core::marker::Send for rustic_core::PathList
impl core::marker::Sync for rustic_core::PathList
impl core::marker::Unpin for rustic_core::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PathList
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::PathList::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::PathList where U: core::convert::From<T>
pub fn rustic_core::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PathList where U: core::convert::Into<T>
pub type rustic_core::PathList::Error = core::convert::Infallible
pub fn rustic_core::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PathList where T: core::clone::Clone
pub type rustic_core::PathList::Owned = T
pub fn rustic_core::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::PathList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PathList
pub fn rustic_core::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PathList
pub type rustic_core::PathList::Init = T
pub const rustic_core::PathList::ALIGN: usize
pub unsafe fn rustic_core::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::PathList
pub type rustic_core::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PathList::vzip(self) -> V
pub struct rustic_core::PruneOptions
pub rustic_core::PruneOptions::fast_repack: bool
pub rustic_core::PruneOptions::ignore_snaps: alloc::vec::Vec<rustic_core::Id>
pub rustic_core::PruneOptions::instant_delete: bool
pub rustic_core::PruneOptions::keep_delete: humantime::wrapper::Duration
pub rustic_core::PruneOptions::keep_pack: humantime::wrapper::Duration
pub rustic_core::PruneOptions::max_repack: LimitOption
pub rustic_core::PruneOptions::max_unused: LimitOption
pub rustic_core::PruneOptions::no_resize: bool
pub rustic_core::PruneOptions::repack_all: bool
pub rustic_core::PruneOptions::repack_cacheable_only: core::option::Option<bool>
pub rustic_core::PruneOptions::repack_uncompressed: bool
impl rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::fast_repack(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::PruneOptions::ignore_snaps(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::Id>>) -> Self
pub fn rustic_core::PruneOptions::instant_delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::PruneOptions::keep_delete(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::PruneOptions::keep_pack(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
pub fn rustic_core::PruneOptions::max_repack(self, value: impl core::convert::Into<LimitOption>) -> Self
pub fn rustic_core::PruneOptions::max_unused(self, value: impl core::convert::Into<LimitOption>) -> Self
pub fn rustic_core::PruneOptions::no_resize(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::PruneOptions::repack_all(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::PruneOptions::repack_cacheable_only(self, value: impl core::convert::Into<core::option::Option<bool>>) -> Self
pub fn rustic_core::PruneOptions::repack_uncompressed(self, value: impl core::convert::Into<bool>) -> Self
impl rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::get_plan<P: rustic_core::ProgressBars, S: Open>(&self, repo: &rustic_core::Repository<P, S>) -> rustic_core::RusticResult<rustic_core::PrunePlan>
impl core::default::Default for rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::default() -> Self
impl core::clone::Clone for rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::clone(&self) -> rustic_core::PruneOptions
impl core::fmt::Debug for rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::PruneOptions
impl core::marker::Sync for rustic_core::PruneOptions
impl core::marker::Unpin for rustic_core::PruneOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PruneOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PruneOptions
impl<T, U> core::convert::Into<U> for rustic_core::PruneOptions where U: core::convert::From<T>
pub fn rustic_core::PruneOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PruneOptions where U: core::convert::Into<T>
pub type rustic_core::PruneOptions::Error = core::convert::Infallible
pub fn rustic_core::PruneOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PruneOptions where U: core::convert::TryFrom<T>
pub type rustic_core::PruneOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PruneOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PruneOptions where T: core::clone::Clone
pub type rustic_core::PruneOptions::Owned = T
pub fn rustic_core::PruneOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::PruneOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PruneOptions where T: 'static + core::marker::Sized
pub fn rustic_core::PruneOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PruneOptions where T: core::marker::Sized
pub fn rustic_core::PruneOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PruneOptions where T: core::marker::Sized
pub fn rustic_core::PruneOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PruneOptions
pub fn rustic_core::PruneOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PruneOptions
pub type rustic_core::PruneOptions::Init = T
pub const rustic_core::PruneOptions::ALIGN: usize
pub unsafe fn rustic_core::PruneOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PruneOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PruneOptions::drop(ptr: usize)
pub unsafe fn rustic_core::PruneOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PruneOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::PruneOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::PruneOptions
pub type rustic_core::PruneOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PruneOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PruneOptions::vzip(self) -> V
pub struct rustic_core::PrunePlan
pub rustic_core::PrunePlan::stats: rustic_core::PruneStats
impl rustic_core::PrunePlan
pub fn rustic_core::PrunePlan::do_prune<P: rustic_core::ProgressBars, S: Open>(self, repo: &rustic_core::Repository<P, S>, opts: &rustic_core::PruneOptions) -> rustic_core::RusticResult<()>
pub fn rustic_core::PrunePlan::repack_packs(&self) -> alloc::vec::Vec<rustic_core::Id>
impl core::fmt::Debug for rustic_core::PrunePlan
pub fn rustic_core::PrunePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::PrunePlan
impl core::marker::Sync for rustic_core::PrunePlan
impl core::marker::Unpin for rustic_core::PrunePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PrunePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PrunePlan
impl<T, U> core::convert::Into<U> for rustic_core::PrunePlan where U: core::convert::From<T>
pub fn rustic_core::PrunePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PrunePlan where U: core::convert::Into<T>
pub type rustic_core::PrunePlan::Error = core::convert::Infallible
pub fn rustic_core::PrunePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PrunePlan where U: core::convert::TryFrom<T>
pub type rustic_core::PrunePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PrunePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::PrunePlan where T: 'static + core::marker::Sized
pub fn rustic_core::PrunePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PrunePlan where T: core::marker::Sized
pub fn rustic_core::PrunePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PrunePlan where T: core::marker::Sized
pub fn rustic_core::PrunePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PrunePlan
pub fn rustic_core::PrunePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PrunePlan
pub type rustic_core::PrunePlan::Init = T
pub const rustic_core::PrunePlan::ALIGN: usize
pub unsafe fn rustic_core::PrunePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PrunePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PrunePlan::drop(ptr: usize)
pub unsafe fn rustic_core::PrunePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PrunePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::PrunePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::PrunePlan
pub type rustic_core::PrunePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PrunePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PrunePlan::vzip(self) -> V
pub struct rustic_core::PruneStats
pub rustic_core::PruneStats::blobs: enum_map::EnumMap<rustic_core::repofile::BlobType, SizeStats>
pub rustic_core::PruneStats::index_files: u64
pub rustic_core::PruneStats::index_files_rebuild: u64
pub rustic_core::PruneStats::packs: PackStats
pub rustic_core::PruneStats::packs_to_delete: DeleteStats
pub rustic_core::PruneStats::packs_unref: u64
pub rustic_core::PruneStats::size: enum_map::EnumMap<rustic_core::repofile::BlobType, SizeStats>
pub rustic_core::PruneStats::size_to_delete: DeleteStats
pub rustic_core::PruneStats::size_unref: u64
impl rustic_core::PruneStats
pub fn rustic_core::PruneStats::blobs_sum(&self) -> SizeStats
pub fn rustic_core::PruneStats::size_sum(&self) -> SizeStats
impl core::default::Default for rustic_core::PruneStats
pub fn rustic_core::PruneStats::default() -> rustic_core::PruneStats
impl core::fmt::Debug for rustic_core::PruneStats
pub fn rustic_core::PruneStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::PruneStats
impl core::marker::Sync for rustic_core::PruneStats
impl core::marker::Unpin for rustic_core::PruneStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PruneStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PruneStats
impl<T, U> core::convert::Into<U> for rustic_core::PruneStats where U: core::convert::From<T>
pub fn rustic_core::PruneStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PruneStats where U: core::convert::Into<T>
pub type rustic_core::PruneStats::Error = core::convert::Infallible
pub fn rustic_core::PruneStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PruneStats where U: core::convert::TryFrom<T>
pub type rustic_core::PruneStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PruneStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::PruneStats where T: 'static + core::marker::Sized
pub fn rustic_core::PruneStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PruneStats where T: core::marker::Sized
pub fn rustic_core::PruneStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PruneStats where T: core::marker::Sized
pub fn rustic_core::PruneStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PruneStats
pub fn rustic_core::PruneStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PruneStats
pub type rustic_core::PruneStats::Init = T
pub const rustic_core::PruneStats::ALIGN: usize
pub unsafe fn rustic_core::PruneStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PruneStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PruneStats::drop(ptr: usize)
pub unsafe fn rustic_core::PruneStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PruneStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::PruneStats
impl<T> typenum::type_operators::Same<T> for rustic_core::PruneStats
pub type rustic_core::PruneStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PruneStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PruneStats::vzip(self) -> V
pub struct rustic_core::ReadSourceEntry<O>
pub rustic_core::ReadSourceEntry::node: rustic_core::repofile::Node
pub rustic_core::ReadSourceEntry::open: core::option::Option<O>
pub rustic_core::ReadSourceEntry::path: std::path::PathBuf
impl<O: core::clone::Clone> core::clone::Clone for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry<O>::clone(&self) -> rustic_core::ReadSourceEntry<O>
impl<O: core::fmt::Debug> core::fmt::Debug for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry<O>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<O> core::marker::Send for rustic_core::ReadSourceEntry<O> where O: core::marker::Send
impl<O> core::marker::Sync for rustic_core::ReadSourceEntry<O> where O: core::marker::Sync
impl<O> core::marker::Unpin for rustic_core::ReadSourceEntry<O> where O: core::marker::Unpin
impl<O> core::panic::unwind_safe::RefUnwindSafe for rustic_core::ReadSourceEntry<O> where O: core::panic::unwind_safe::RefUnwindSafe
impl<O> core::panic::unwind_safe::UnwindSafe for rustic_core::ReadSourceEntry<O> where O: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::From<T>
pub fn rustic_core::ReadSourceEntry<O>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::Into<T>
pub type rustic_core::ReadSourceEntry<O>::Error = core::convert::Infallible
pub fn rustic_core::ReadSourceEntry<O>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::TryFrom<T>
pub type rustic_core::ReadSourceEntry<O>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ReadSourceEntry<O>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::ReadSourceEntry<O> where T: core::clone::Clone
pub type rustic_core::ReadSourceEntry<O>::Owned = T
pub fn rustic_core::ReadSourceEntry<O>::clone_into(&self, target: &mut T)
pub fn rustic_core::ReadSourceEntry<O>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::ReadSourceEntry<O> where T: 'static + core::marker::Sized
pub fn rustic_core::ReadSourceEntry<O>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::ReadSourceEntry<O>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::ReadSourceEntry<O>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry<O>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ReadSourceEntry<O>
pub type rustic_core::ReadSourceEntry<O>::Init = T
pub const rustic_core::ReadSourceEntry<O>::ALIGN: usize
pub unsafe fn rustic_core::ReadSourceEntry<O>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ReadSourceEntry<O>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ReadSourceEntry<O>::drop(ptr: usize)
pub unsafe fn rustic_core::ReadSourceEntry<O>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ReadSourceEntry<O>
impl<T> tracing::instrument::WithSubscriber for rustic_core::ReadSourceEntry<O>
impl<T> typenum::type_operators::Same<T> for rustic_core::ReadSourceEntry<O>
pub type rustic_core::ReadSourceEntry<O>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ReadSourceEntry<O> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ReadSourceEntry<O>::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::RepairIndexOptions
pub rustic_core::RepairIndexOptions::read_all: bool
impl rustic_core::RepairIndexOptions
pub fn rustic_core::RepairIndexOptions::read_all(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::RepairIndexOptions
pub fn rustic_core::RepairIndexOptions::clone(&self) -> rustic_core::RepairIndexOptions
impl core::default::Default for rustic_core::RepairIndexOptions
pub fn rustic_core::RepairIndexOptions::default() -> rustic_core::RepairIndexOptions
impl core::fmt::Debug for rustic_core::RepairIndexOptions
pub fn rustic_core::RepairIndexOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RepairIndexOptions
impl core::marker::Send for rustic_core::RepairIndexOptions
impl core::marker::Sync for rustic_core::RepairIndexOptions
impl core::marker::Unpin for rustic_core::RepairIndexOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepairIndexOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepairIndexOptions
impl<T, U> core::convert::Into<U> for rustic_core::RepairIndexOptions where U: core::convert::From<T>
pub fn rustic_core::RepairIndexOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepairIndexOptions where U: core::convert::Into<T>
pub type rustic_core::RepairIndexOptions::Error = core::convert::Infallible
pub fn rustic_core::RepairIndexOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepairIndexOptions where U: core::convert::TryFrom<T>
pub type rustic_core::RepairIndexOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepairIndexOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepairIndexOptions where T: core::clone::Clone
pub type rustic_core::RepairIndexOptions::Owned = T
pub fn rustic_core::RepairIndexOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::RepairIndexOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepairIndexOptions where T: 'static + core::marker::Sized
pub fn rustic_core::RepairIndexOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::RepairIndexOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepairIndexOptions where T: core::marker::Sized
pub fn rustic_core::RepairIndexOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepairIndexOptions
pub fn rustic_core::RepairIndexOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepairIndexOptions
pub type rustic_core::RepairIndexOptions::Init = T
pub const rustic_core::RepairIndexOptions::ALIGN: usize
pub unsafe fn rustic_core::RepairIndexOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepairIndexOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepairIndexOptions::drop(ptr: usize)
pub unsafe fn rustic_core::RepairIndexOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RepairIndexOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepairIndexOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::RepairIndexOptions
pub type rustic_core::RepairIndexOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepairIndexOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepairIndexOptions::vzip(self) -> V
pub struct rustic_core::RepairSnapshotsOptions
pub rustic_core::RepairSnapshotsOptions::delete: bool
pub rustic_core::RepairSnapshotsOptions::suffix: alloc::string::String
pub rustic_core::RepairSnapshotsOptions::tag: alloc::vec::Vec<rustic_core::StringList>
impl rustic_core::RepairSnapshotsOptions
pub fn rustic_core::RepairSnapshotsOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RepairSnapshotsOptions::suffix(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepairSnapshotsOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::StringList>>) -> Self
impl core::default::Default for rustic_core::RepairSnapshotsOptions
pub fn rustic_core::RepairSnapshotsOptions::default() -> Self
impl core::fmt::Debug for rustic_core::RepairSnapshotsOptions
pub fn rustic_core::RepairSnapshotsOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::RepairSnapshotsOptions
impl core::marker::Sync for rustic_core::RepairSnapshotsOptions
impl core::marker::Unpin for rustic_core::RepairSnapshotsOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepairSnapshotsOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepairSnapshotsOptions
impl<T, U> core::convert::Into<U> for rustic_core::RepairSnapshotsOptions where U: core::convert::From<T>
pub fn rustic_core::RepairSnapshotsOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepairSnapshotsOptions where U: core::convert::Into<T>
pub type rustic_core::RepairSnapshotsOptions::Error = core::convert::Infallible
pub fn rustic_core::RepairSnapshotsOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepairSnapshotsOptions where U: core::convert::TryFrom<T>
pub type rustic_core::RepairSnapshotsOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepairSnapshotsOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::RepairSnapshotsOptions where T: 'static + core::marker::Sized
pub fn rustic_core::RepairSnapshotsOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::RepairSnapshotsOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepairSnapshotsOptions where T: core::marker::Sized
pub fn rustic_core::RepairSnapshotsOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepairSnapshotsOptions
pub fn rustic_core::RepairSnapshotsOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepairSnapshotsOptions
pub type rustic_core::RepairSnapshotsOptions::Init = T
pub const rustic_core::RepairSnapshotsOptions::ALIGN: usize
pub unsafe fn rustic_core::RepairSnapshotsOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepairSnapshotsOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepairSnapshotsOptions::drop(ptr: usize)
pub unsafe fn rustic_core::RepairSnapshotsOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RepairSnapshotsOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepairSnapshotsOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::RepairSnapshotsOptions
pub type rustic_core::RepairSnapshotsOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepairSnapshotsOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepairSnapshotsOptions::vzip(self) -> V
pub struct rustic_core::RepoFileInfo
pub rustic_core::RepoFileInfo::count: u64
pub rustic_core::RepoFileInfo::size: u64
pub rustic_core::RepoFileInfo::tpe: rustic_core::repofile::FileType
impl core::clone::Clone for rustic_core::RepoFileInfo
pub fn rustic_core::RepoFileInfo::clone(&self) -> rustic_core::RepoFileInfo
impl core::fmt::Debug for rustic_core::RepoFileInfo
pub fn rustic_core::RepoFileInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RepoFileInfo
impl serde::ser::Serialize for rustic_core::RepoFileInfo
pub fn rustic_core::RepoFileInfo::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::RepoFileInfo
pub fn rustic_core::RepoFileInfo::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::RepoFileInfo
impl core::marker::Sync for rustic_core::RepoFileInfo
impl core::marker::Unpin for rustic_core::RepoFileInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepoFileInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepoFileInfo
impl<T, U> core::convert::Into<U> for rustic_core::RepoFileInfo where U: core::convert::From<T>
pub fn rustic_core::RepoFileInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepoFileInfo where U: core::convert::Into<T>
pub type rustic_core::RepoFileInfo::Error = core::convert::Infallible
pub fn rustic_core::RepoFileInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepoFileInfo where U: core::convert::TryFrom<T>
pub type rustic_core::RepoFileInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepoFileInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepoFileInfo where T: core::clone::Clone
pub type rustic_core::RepoFileInfo::Owned = T
pub fn rustic_core::RepoFileInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::RepoFileInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepoFileInfo where T: 'static + core::marker::Sized
pub fn rustic_core::RepoFileInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::RepoFileInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepoFileInfo where T: core::marker::Sized
pub fn rustic_core::RepoFileInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepoFileInfo
pub fn rustic_core::RepoFileInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepoFileInfo
pub type rustic_core::RepoFileInfo::Init = T
pub const rustic_core::RepoFileInfo::ALIGN: usize
pub unsafe fn rustic_core::RepoFileInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepoFileInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepoFileInfo::drop(ptr: usize)
pub unsafe fn rustic_core::RepoFileInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::RepoFileInfo where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::RepoFileInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepoFileInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::RepoFileInfo
pub type rustic_core::RepoFileInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepoFileInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepoFileInfo::vzip(self) -> V
pub struct rustic_core::RepoFileInfos
pub rustic_core::RepoFileInfos::repo: alloc::vec::Vec<rustic_core::RepoFileInfo>
pub rustic_core::RepoFileInfos::repo_hot: core::option::Option<alloc::vec::Vec<rustic_core::RepoFileInfo>>
impl core::clone::Clone for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::clone(&self) -> rustic_core::RepoFileInfos
impl core::default::Default for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::default() -> rustic_core::RepoFileInfos
impl core::fmt::Debug for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::RepoFileInfos
impl core::marker::Sync for rustic_core::RepoFileInfos
impl core::marker::Unpin for rustic_core::RepoFileInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepoFileInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepoFileInfos
impl<T, U> core::convert::Into<U> for rustic_core::RepoFileInfos where U: core::convert::From<T>
pub fn rustic_core::RepoFileInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepoFileInfos where U: core::convert::Into<T>
pub type rustic_core::RepoFileInfos::Error = core::convert::Infallible
pub fn rustic_core::RepoFileInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepoFileInfos where U: core::convert::TryFrom<T>
pub type rustic_core::RepoFileInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepoFileInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepoFileInfos where T: core::clone::Clone
pub type rustic_core::RepoFileInfos::Owned = T
pub fn rustic_core::RepoFileInfos::clone_into(&self, target: &mut T)
pub fn rustic_core::RepoFileInfos::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepoFileInfos where T: 'static + core::marker::Sized
pub fn rustic_core::RepoFileInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::RepoFileInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepoFileInfos where T: core::marker::Sized
pub fn rustic_core::RepoFileInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepoFileInfos
pub fn rustic_core::RepoFileInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepoFileInfos
pub type rustic_core::RepoFileInfos::Init = T
pub const rustic_core::RepoFileInfos::ALIGN: usize
pub unsafe fn rustic_core::RepoFileInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepoFileInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepoFileInfos::drop(ptr: usize)
pub unsafe fn rustic_core::RepoFileInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::RepoFileInfos where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::RepoFileInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepoFileInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::RepoFileInfos
pub type rustic_core::RepoFileInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepoFileInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepoFileInfos::vzip(self) -> V
pub struct rustic_core::Repository<P, S>
pub rustic_core::Repository::name: alloc::string::String
impl rustic_core::Repository<rustic_core::NoProgressBars, ()>
pub fn rustic_core::Repository<rustic_core::NoProgressBars, ()>::new(opts: &rustic_core::RepositoryOptions) -> rustic_core::RusticResult<Self>
impl<P, S: Open> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::add_key(&self, pass: &str, opts: &rustic_core::KeyOptions) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::Repository<P, S>::apply_config(&self, opts: &rustic_core::ConfigOptions) -> rustic_core::RusticResult<bool>
pub fn rustic_core::Repository<P, S>::cat_file(&self, tpe: rustic_core::repofile::FileType, id: &str) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::Repository<P, S>::config(&self) -> &rustic_core::repofile::ConfigFile
impl<P, S: rustic_core::IndexedFull> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::get_index_entry(&self, tpe: rustic_core::repofile::BlobType, id: &rustic_core::Id) -> rustic_core::RusticResult<IndexEntry>
impl<P, S> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::config_id(&self) -> rustic_core::RusticResult<core::option::Option<rustic_core::Id>>
pub fn rustic_core::Repository<P, S>::init(self, key_opts: &rustic_core::KeyOptions, config_opts: &rustic_core::ConfigOptions) -> rustic_core::RusticResult<rustic_core::Repository<P, rustic_core::OpenStatus>>
pub fn rustic_core::Repository<P, S>::init_with_config(self, password: &str, key_opts: &rustic_core::KeyOptions, config: rustic_core::repofile::ConfigFile) -> rustic_core::RusticResult<rustic_core::Repository<P, rustic_core::OpenStatus>>
pub fn rustic_core::Repository<P, S>::init_with_password(self, pass: &str, key_opts: &rustic_core::KeyOptions, config_opts: &rustic_core::ConfigOptions) -> rustic_core::RusticResult<rustic_core::Repository<P, rustic_core::OpenStatus>>
pub fn rustic_core::Repository<P, S>::list(&self, tpe: rustic_core::repofile::FileType) -> rustic_core::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::Id>>
pub fn rustic_core::Repository<P, S>::open(self) -> rustic_core::RusticResult<rustic_core::Repository<P, rustic_core::OpenStatus>>
pub fn rustic_core::Repository<P, S>::open_with_password(self, password: &str) -> rustic_core::RusticResult<rustic_core::Repository<P, rustic_core::OpenStatus>>
pub fn rustic_core::Repository<P, S>::password(&self) -> rustic_core::RusticResult<core::option::Option<alloc::string::String>>
impl<P: rustic_core::ProgressBars, S: IndexedIds> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::backup(&self, opts: &rustic_core::BackupOptions, source: rustic_core::PathList, snap: rustic_core::repofile::SnapshotFile) -> rustic_core::RusticResult<rustic_core::repofile::SnapshotFile>
impl<P: rustic_core::ProgressBars, S: IndexedTree> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::cat_tree(&self, snap: &str, sn_filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::Repository<P, S>::ls(&self, node: &rustic_core::repofile::Node, ls_opts: &rustic_core::LsOptions) -> rustic_core::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::RusticResult<(std::path::PathBuf, rustic_core::repofile::Node)>> + core::clone::Clone>
pub fn rustic_core::Repository<P, S>::merge_snapshots(&self, snaps: &[rustic_core::repofile::SnapshotFile], cmp: &impl core::ops::function::Fn(&rustic_core::repofile::Node, &rustic_core::repofile::Node) -> core::cmp::Ordering, snap: rustic_core::repofile::SnapshotFile) -> rustic_core::RusticResult<rustic_core::repofile::SnapshotFile>
pub fn rustic_core::Repository<P, S>::merge_trees(&self, trees: &[rustic_core::Id], cmp: &impl core::ops::function::Fn(&rustic_core::repofile::Node, &rustic_core::repofile::Node) -> core::cmp::Ordering, summary: &mut rustic_core::repofile::SnapshotSummary) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::Repository<P, S>::node_from_snapshot_and_path(&self, snap: &rustic_core::repofile::SnapshotFile, path: &str) -> rustic_core::RusticResult<rustic_core::repofile::Node>
pub fn rustic_core::Repository<P, S>::node_from_snapshot_path(&self, snap_path: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::RusticResult<rustic_core::repofile::Node>
pub fn rustic_core::Repository<P, S>::restore(&self, restore_infos: rustic_core::RestorePlan, opts: &rustic_core::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::RusticResult<(std::path::PathBuf, rustic_core::repofile::Node)>>, dest: &rustic_core::LocalDestination) -> rustic_core::RusticResult<()>
impl<P: rustic_core::ProgressBars, S: Open> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::check(&self, opts: rustic_core::CheckOptions) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::delete_snapshots(&self, ids: &[rustic_core::Id]) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::get_all_snapshots(&self) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::repofile::SnapshotFile>>
pub fn rustic_core::Repository<P, S>::get_forget_snapshots(&self, keep: &rustic_core::KeepOptions, group_by: rustic_core::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool) -> rustic_core::RusticResult<rustic_core::ForgetGroups>
pub fn rustic_core::Repository<P, S>::get_matching_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::repofile::SnapshotFile>>
pub fn rustic_core::Repository<P, S>::get_snapshot_from_str(&self, id: &str, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool + core::marker::Send + core::marker::Sync) -> rustic_core::RusticResult<rustic_core::repofile::SnapshotFile>
pub fn rustic_core::Repository<P, S>::get_snapshot_group(&self, ids: &[alloc::string::String], group_by: rustic_core::SnapshotGroupCriterion, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool) -> rustic_core::RusticResult<alloc::vec::Vec<(rustic_core::SnapshotGroup, alloc::vec::Vec<rustic_core::repofile::SnapshotFile>)>>
pub fn rustic_core::Repository<P, S>::get_snapshots<T: core::convert::AsRef<str>>(&self, ids: &[T]) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::repofile::SnapshotFile>>
pub fn rustic_core::Repository<P, S>::infos_index(&self) -> rustic_core::RusticResult<rustic_core::IndexInfos>
pub fn rustic_core::Repository<P, S>::prune_plan(&self, opts: &rustic_core::PruneOptions) -> rustic_core::RusticResult<rustic_core::PrunePlan>
pub fn rustic_core::Repository<P, S>::relevant_copy_snapshots(&self, filter: impl core::ops::function::FnMut(&rustic_core::repofile::SnapshotFile) -> bool, snaps: &[rustic_core::repofile::SnapshotFile]) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::CopySnapshot>>
pub fn rustic_core::Repository<P, S>::repair_index(&self, opts: &rustic_core::RepairIndexOptions, dry_run: bool) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::save_snapshots(&self, snaps: alloc::vec::Vec<rustic_core::repofile::SnapshotFile>) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::stream_files<F: rustic_core::repofile::RepoFile>(&self) -> rustic_core::RusticResult<impl core::iter::traits::iterator::Iterator<Item = rustic_core::RusticResult<(rustic_core::Id, F)>>>
pub fn rustic_core::Repository<P, S>::to_indexed(self) -> rustic_core::RusticResult<rustic_core::Repository<P, IndexedStatus<FullIndex, S>>>
pub fn rustic_core::Repository<P, S>::to_indexed_ids(self) -> rustic_core::RusticResult<rustic_core::Repository<P, IndexedStatus<IdIndex, S>>>
impl<P: rustic_core::ProgressBars, S: rustic_core::IndexedFull> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::cat_blob(&self, tpe: rustic_core::repofile::BlobType, id: &str) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::Repository<P, S>::copy<'a, Q: rustic_core::ProgressBars, R: IndexedIds>(&self, repo_dest: &rustic_core::Repository<Q, R>, snapshots: impl core::iter::traits::collect::IntoIterator<Item = &'a rustic_core::repofile::SnapshotFile>) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::dump(&self, node: &rustic_core::repofile::Node, w: &mut impl std::io::Write) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::prepare_restore(&self, opts: &rustic_core::RestoreOptions, node_streamer: impl core::iter::traits::iterator::Iterator<Item = rustic_core::RusticResult<(std::path::PathBuf, rustic_core::repofile::Node)>>, dest: &rustic_core::LocalDestination, dry_run: bool) -> rustic_core::RusticResult<rustic_core::RestorePlan>
pub fn rustic_core::Repository<P, S>::repair_snapshots(&self, opts: &rustic_core::RepairSnapshotsOptions, snapshots: alloc::vec::Vec<rustic_core::repofile::SnapshotFile>, dry_run: bool) -> rustic_core::RusticResult<()>
impl<P: rustic_core::ProgressBars, S> rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::infos_files(&self) -> rustic_core::RusticResult<rustic_core::RepoFileInfos>
pub fn rustic_core::Repository<P, S>::warm_up(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::Id>) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repository<P, S>::warm_up_wait(&self, packs: impl core::iter::traits::exact_size::ExactSizeIterator<Item = rustic_core::Id>) -> rustic_core::RusticResult<()>
impl<P> rustic_core::Repository<P, ()>
pub fn rustic_core::Repository<P, ()>::new_with_progress(opts: &rustic_core::RepositoryOptions, pb: P) -> rustic_core::RusticResult<Self>
impl<P: core::clone::Clone, S: core::clone::Clone> core::clone::Clone for rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::clone(&self) -> rustic_core::Repository<P, S>
impl<P: core::fmt::Debug, S: core::fmt::Debug> core::fmt::Debug for rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<P, S> core::marker::Send for rustic_core::Repository<P, S> where P: core::marker::Send, S: core::marker::Send
impl<P, S> core::marker::Sync for rustic_core::Repository<P, S> where P: core::marker::Sync, S: core::marker::Sync
impl<P, S> core::marker::Unpin for rustic_core::Repository<P, S> where P: core::marker::Unpin, S: core::marker::Unpin
impl<P, S> !core::panic::unwind_safe::RefUnwindSafe for rustic_core::Repository<P, S>
impl<P, S> !core::panic::unwind_safe::UnwindSafe for rustic_core::Repository<P, S>
impl<T, U> core::convert::Into<U> for rustic_core::Repository<P, S> where U: core::convert::From<T>
pub fn rustic_core::Repository<P, S>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Repository<P, S> where U: core::convert::Into<T>
pub type rustic_core::Repository<P, S>::Error = core::convert::Infallible
pub fn rustic_core::Repository<P, S>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Repository<P, S> where U: core::convert::TryFrom<T>
pub type rustic_core::Repository<P, S>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Repository<P, S>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Repository<P, S> where T: core::clone::Clone
pub type rustic_core::Repository<P, S>::Owned = T
pub fn rustic_core::Repository<P, S>::clone_into(&self, target: &mut T)
pub fn rustic_core::Repository<P, S>::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Repository<P, S> where T: 'static + core::marker::Sized
pub fn rustic_core::Repository<P, S>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::Repository<P, S>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Repository<P, S> where T: core::marker::Sized
pub fn rustic_core::Repository<P, S>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Repository<P, S>
pub fn rustic_core::Repository<P, S>::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Repository<P, S>
pub type rustic_core::Repository<P, S>::Init = T
pub const rustic_core::Repository<P, S>::ALIGN: usize
pub unsafe fn rustic_core::Repository<P, S>::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Repository<P, S>::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Repository<P, S>::drop(ptr: usize)
pub unsafe fn rustic_core::Repository<P, S>::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Repository<P, S>
impl<T> tracing::instrument::WithSubscriber for rustic_core::Repository<P, S>
impl<T> typenum::type_operators::Same<T> for rustic_core::Repository<P, S>
pub type rustic_core::Repository<P, S>::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Repository<P, S> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Repository<P, S>::vzip(self) -> V
pub struct rustic_core::RepositoryOptions
pub rustic_core::RepositoryOptions::cache_dir: core::option::Option<std::path::PathBuf>
pub rustic_core::RepositoryOptions::no_cache: bool
pub rustic_core::RepositoryOptions::options: std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>
pub rustic_core::RepositoryOptions::password: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::password_command: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::password_file: core::option::Option<std::path::PathBuf>
pub rustic_core::RepositoryOptions::repo_hot: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::repository: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::warm_up: bool
pub rustic_core::RepositoryOptions::warm_up_command: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::warm_up_wait: core::option::Option<humantime::wrapper::Duration>
impl rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::cache_dir(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::RepositoryOptions::no_cache(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RepositoryOptions::options(self, value: impl core::convert::Into<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>) -> Self
pub fn rustic_core::RepositoryOptions::password(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepositoryOptions::password_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepositoryOptions::password_file(self, value: impl core::convert::Into<std::path::PathBuf>) -> Self
pub fn rustic_core::RepositoryOptions::repo_hot(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepositoryOptions::repository(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepositoryOptions::warm_up(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RepositoryOptions::warm_up_command(self, value: impl core::convert::Into<alloc::string::String>) -> Self
pub fn rustic_core::RepositoryOptions::warm_up_wait(self, value: impl core::convert::Into<humantime::wrapper::Duration>) -> Self
impl rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::to_repository(&self) -> rustic_core::RusticResult<rustic_core::Repository<rustic_core::NoProgressBars, ()>>
impl core::clone::Clone for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::clone(&self) -> rustic_core::RepositoryOptions
impl core::default::Default for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::default() -> rustic_core::RepositoryOptions
impl core::fmt::Debug for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::RepositoryOptions where rustic_core::RepositoryOptions: core::default::Default
pub fn rustic_core::RepositoryOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::RepositoryOptions
impl core::marker::Sync for rustic_core::RepositoryOptions
impl core::marker::Unpin for rustic_core::RepositoryOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepositoryOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepositoryOptions
impl<T, U> core::convert::Into<U> for rustic_core::RepositoryOptions where U: core::convert::From<T>
pub fn rustic_core::RepositoryOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepositoryOptions where U: core::convert::Into<T>
pub type rustic_core::RepositoryOptions::Error = core::convert::Infallible
pub fn rustic_core::RepositoryOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepositoryOptions where U: core::convert::TryFrom<T>
pub type rustic_core::RepositoryOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepositoryOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepositoryOptions where T: core::clone::Clone
pub type rustic_core::RepositoryOptions::Owned = T
pub fn rustic_core::RepositoryOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::RepositoryOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepositoryOptions where T: 'static + core::marker::Sized
pub fn rustic_core::RepositoryOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::RepositoryOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::RepositoryOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepositoryOptions
pub type rustic_core::RepositoryOptions::Init = T
pub const rustic_core::RepositoryOptions::ALIGN: usize
pub unsafe fn rustic_core::RepositoryOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepositoryOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepositoryOptions::drop(ptr: usize)
pub unsafe fn rustic_core::RepositoryOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::RepositoryOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::RepositoryOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepositoryOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::RepositoryOptions
pub type rustic_core::RepositoryOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepositoryOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepositoryOptions::vzip(self) -> V
pub struct rustic_core::RestoreOptions
pub rustic_core::RestoreOptions::delete: bool
pub rustic_core::RestoreOptions::no_ownership: bool
pub rustic_core::RestoreOptions::numeric_id: bool
pub rustic_core::RestoreOptions::verify_existing: bool
impl rustic_core::RestoreOptions
pub fn rustic_core::RestoreOptions::delete(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RestoreOptions::no_ownership(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RestoreOptions::numeric_id(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::RestoreOptions::verify_existing(self, value: impl core::convert::Into<bool>) -> Self
impl core::clone::Clone for rustic_core::RestoreOptions
pub fn rustic_core::RestoreOptions::clone(&self) -> rustic_core::RestoreOptions
impl core::default::Default for rustic_core::RestoreOptions
pub fn rustic_core::RestoreOptions::default() -> rustic_core::RestoreOptions
impl core::fmt::Debug for rustic_core::RestoreOptions
pub fn rustic_core::RestoreOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RestoreOptions
impl core::marker::Send for rustic_core::RestoreOptions
impl core::marker::Sync for rustic_core::RestoreOptions
impl core::marker::Unpin for rustic_core::RestoreOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RestoreOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RestoreOptions
impl<T, U> core::convert::Into<U> for rustic_core::RestoreOptions where U: core::convert::From<T>
pub fn rustic_core::RestoreOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RestoreOptions where U: core::convert::Into<T>
pub type rustic_core::RestoreOptions::Error = core::convert::Infallible
pub fn rustic_core::RestoreOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RestoreOptions where U: core::convert::TryFrom<T>
pub type rustic_core::RestoreOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RestoreOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RestoreOptions where T: core::clone::Clone
pub type rustic_core::RestoreOptions::Owned = T
pub fn rustic_core::RestoreOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::RestoreOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RestoreOptions where T: 'static + core::marker::Sized
pub fn rustic_core::RestoreOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::RestoreOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RestoreOptions where T: core::marker::Sized
pub fn rustic_core::RestoreOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RestoreOptions
pub fn rustic_core::RestoreOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RestoreOptions
pub type rustic_core::RestoreOptions::Init = T
pub const rustic_core::RestoreOptions::ALIGN: usize
pub unsafe fn rustic_core::RestoreOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RestoreOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RestoreOptions::drop(ptr: usize)
pub unsafe fn rustic_core::RestoreOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RestoreOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::RestoreOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::RestoreOptions
pub type rustic_core::RestoreOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RestoreOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RestoreOptions::vzip(self) -> V
pub struct rustic_core::RestorePlan
pub rustic_core::RestorePlan::matched_size: u64
pub rustic_core::RestorePlan::restore_size: u64
pub rustic_core::RestorePlan::stats: rustic_core::RestoreStats
impl rustic_core::RestorePlan
pub fn rustic_core::RestorePlan::to_packs(&self) -> alloc::vec::Vec<rustic_core::Id>
impl core::default::Default for rustic_core::RestorePlan
pub fn rustic_core::RestorePlan::default() -> rustic_core::RestorePlan
impl core::fmt::Debug for rustic_core::RestorePlan
pub fn rustic_core::RestorePlan::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::RestorePlan
impl core::marker::Sync for rustic_core::RestorePlan
impl core::marker::Unpin for rustic_core::RestorePlan
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RestorePlan
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RestorePlan
impl<T, U> core::convert::Into<U> for rustic_core::RestorePlan where U: core::convert::From<T>
pub fn rustic_core::RestorePlan::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RestorePlan where U: core::convert::Into<T>
pub type rustic_core::RestorePlan::Error = core::convert::Infallible
pub fn rustic_core::RestorePlan::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RestorePlan where U: core::convert::TryFrom<T>
pub type rustic_core::RestorePlan::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RestorePlan::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::RestorePlan where T: 'static + core::marker::Sized
pub fn rustic_core::RestorePlan::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RestorePlan where T: core::marker::Sized
pub fn rustic_core::RestorePlan::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RestorePlan where T: core::marker::Sized
pub fn rustic_core::RestorePlan::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RestorePlan
pub fn rustic_core::RestorePlan::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RestorePlan
pub type rustic_core::RestorePlan::Init = T
pub const rustic_core::RestorePlan::ALIGN: usize
pub unsafe fn rustic_core::RestorePlan::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RestorePlan::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RestorePlan::drop(ptr: usize)
pub unsafe fn rustic_core::RestorePlan::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RestorePlan
impl<T> tracing::instrument::WithSubscriber for rustic_core::RestorePlan
impl<T> typenum::type_operators::Same<T> for rustic_core::RestorePlan
pub type rustic_core::RestorePlan::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RestorePlan where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RestorePlan::vzip(self) -> V
pub struct rustic_core::RestoreStats
pub rustic_core::RestoreStats::dirs: rustic_core::FileDirStats
pub rustic_core::RestoreStats::files: rustic_core::FileDirStats
impl core::clone::Clone for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::clone(&self) -> rustic_core::RestoreStats
impl core::default::Default for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::default() -> rustic_core::RestoreStats
impl core::fmt::Debug for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RestoreStats
impl core::marker::Send for rustic_core::RestoreStats
impl core::marker::Sync for rustic_core::RestoreStats
impl core::marker::Unpin for rustic_core::RestoreStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RestoreStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RestoreStats
impl<T, U> core::convert::Into<U> for rustic_core::RestoreStats where U: core::convert::From<T>
pub fn rustic_core::RestoreStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RestoreStats where U: core::convert::Into<T>
pub type rustic_core::RestoreStats::Error = core::convert::Infallible
pub fn rustic_core::RestoreStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RestoreStats where U: core::convert::TryFrom<T>
pub type rustic_core::RestoreStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RestoreStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RestoreStats where T: core::clone::Clone
pub type rustic_core::RestoreStats::Owned = T
pub fn rustic_core::RestoreStats::clone_into(&self, target: &mut T)
pub fn rustic_core::RestoreStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RestoreStats where T: 'static + core::marker::Sized
pub fn rustic_core::RestoreStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RestoreStats where T: core::marker::Sized
pub fn rustic_core::RestoreStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RestoreStats where T: core::marker::Sized
pub fn rustic_core::RestoreStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RestoreStats
pub type rustic_core::RestoreStats::Init = T
pub const rustic_core::RestoreStats::ALIGN: usize
pub unsafe fn rustic_core::RestoreStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RestoreStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RestoreStats::drop(ptr: usize)
pub unsafe fn rustic_core::RestoreStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RestoreStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::RestoreStats
impl<T> typenum::type_operators::Same<T> for rustic_core::RestoreStats
pub type rustic_core::RestoreStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RestoreStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RestoreStats::vzip(self) -> V
pub struct rustic_core::RusticError(_)
impl rustic_core::RusticError
pub fn rustic_core::RusticError::into_inner(self) -> RusticErrorKind
impl core::error::Error for rustic_core::RusticError
pub fn rustic_core::RusticError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::RusticError
pub fn rustic_core::RusticError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<E> core::convert::From<E> for rustic_core::RusticError where E: RusticErrorMarker, RusticErrorKind: core::convert::From<E>
pub fn rustic_core::RusticError::from(value: E) -> Self
impl core::fmt::Debug for rustic_core::RusticError
pub fn rustic_core::RusticError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::RusticError
impl core::marker::Sync for rustic_core::RusticError
impl core::marker::Unpin for rustic_core::RusticError
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::RusticError
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::RusticError
impl<T, U> core::convert::Into<U> for rustic_core::RusticError where U: core::convert::From<T>
pub fn rustic_core::RusticError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RusticError where U: core::convert::Into<T>
pub type rustic_core::RusticError::Error = core::convert::Infallible
pub fn rustic_core::RusticError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RusticError where U: core::convert::TryFrom<T>
pub type rustic_core::RusticError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RusticError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::RusticError where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::RusticError::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::RusticError where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::RusticError::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::RusticError::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::RusticError::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::RusticError where T: 'static + core::marker::Sized
pub fn rustic_core::RusticError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RusticError where T: core::marker::Sized
pub fn rustic_core::RusticError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RusticError where T: core::marker::Sized
pub fn rustic_core::RusticError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RusticError
pub fn rustic_core::RusticError::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RusticError
pub type rustic_core::RusticError::Init = T
pub const rustic_core::RusticError::ALIGN: usize
pub unsafe fn rustic_core::RusticError::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RusticError::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RusticError::drop(ptr: usize)
pub unsafe fn rustic_core::RusticError::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RusticError
impl<T> tracing::instrument::WithSubscriber for rustic_core::RusticError
impl<T> typenum::type_operators::Same<T> for rustic_core::RusticError
pub type rustic_core::RusticError::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RusticError where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RusticError::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotGroup
pub rustic_core::SnapshotGroup::hostname: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotGroup::label: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotGroup::paths: core::option::Option<rustic_core::StringList>
pub rustic_core::SnapshotGroup::tags: core::option::Option<rustic_core::StringList>
impl rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::from_snapshot(sn: &rustic_core::repofile::SnapshotFile, crit: rustic_core::SnapshotGroupCriterion) -> Self
pub fn rustic_core::SnapshotGroup::is_empty(&self) -> bool
impl core::fmt::Display for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::cmp::Eq for rustic_core::SnapshotGroup
impl core::cmp::PartialEq<rustic_core::SnapshotGroup> for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::eq(&self, other: &rustic_core::SnapshotGroup) -> bool
impl core::default::Default for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::default() -> rustic_core::SnapshotGroup
impl core::fmt::Debug for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::SnapshotGroup
impl core::marker::StructuralPartialEq for rustic_core::SnapshotGroup
impl serde::ser::Serialize for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::SnapshotGroup
impl core::marker::Sync for rustic_core::SnapshotGroup
impl core::marker::Unpin for rustic_core::SnapshotGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotGroup
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::SnapshotGroup where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::SnapshotGroup::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::SnapshotGroup where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::SnapshotGroup::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotGroup where U: core::convert::From<T>
pub fn rustic_core::SnapshotGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotGroup where U: core::convert::Into<T>
pub type rustic_core::SnapshotGroup::Error = core::convert::Infallible
pub fn rustic_core::SnapshotGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotGroup where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::SnapshotGroup where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::SnapshotGroup::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::SnapshotGroup where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::SnapshotGroup::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::SnapshotGroup::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::SnapshotGroup::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::SnapshotGroup where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::SnapshotGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::SnapshotGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotGroup
pub type rustic_core::SnapshotGroup::Init = T
pub const rustic_core::SnapshotGroup::ALIGN: usize
pub unsafe fn rustic_core::SnapshotGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotGroup::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotGroup
pub type rustic_core::SnapshotGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotGroup::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotGroupCriterion
pub rustic_core::SnapshotGroupCriterion::hostname: bool
pub rustic_core::SnapshotGroupCriterion::label: bool
pub rustic_core::SnapshotGroupCriterion::paths: bool
pub rustic_core::SnapshotGroupCriterion::tags: bool
impl rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::hostname(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::SnapshotGroupCriterion::label(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::SnapshotGroupCriterion::paths(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::SnapshotGroupCriterion::tags(self, value: impl core::convert::Into<bool>) -> Self
impl core::default::Default for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::default() -> Self
impl core::fmt::Display for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Err = rustic_core::RusticError
pub fn rustic_core::SnapshotGroupCriterion::from_str(s: &str) -> rustic_core::RusticResult<Self>
impl core::clone::Clone for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::clone(&self) -> rustic_core::SnapshotGroupCriterion
impl core::fmt::Debug for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::SnapshotGroupCriterion
impl core::marker::Send for rustic_core::SnapshotGroupCriterion
impl core::marker::Sync for rustic_core::SnapshotGroupCriterion
impl core::marker::Unpin for rustic_core::SnapshotGroupCriterion
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotGroupCriterion
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotGroupCriterion
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::From<T>
pub fn rustic_core::SnapshotGroupCriterion::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::Into<T>
pub type rustic_core::SnapshotGroupCriterion::Error = core::convert::Infallible
pub fn rustic_core::SnapshotGroupCriterion::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotGroupCriterion::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotGroupCriterion::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::SnapshotGroupCriterion where T: core::clone::Clone
pub type rustic_core::SnapshotGroupCriterion::Owned = T
pub fn rustic_core::SnapshotGroupCriterion::clone_into(&self, target: &mut T)
pub fn rustic_core::SnapshotGroupCriterion::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::SnapshotGroupCriterion where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::SnapshotGroupCriterion where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::SnapshotGroupCriterion::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::SnapshotGroupCriterion::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::SnapshotGroupCriterion::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::SnapshotGroupCriterion where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Init = T
pub const rustic_core::SnapshotGroupCriterion::ALIGN: usize
pub unsafe fn rustic_core::SnapshotGroupCriterion::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotGroupCriterion::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotGroupCriterion::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotGroupCriterion::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotGroupCriterion
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotGroupCriterion
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotGroupCriterion where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotGroupCriterion::vzip(self) -> V
#[non_exhaustive] pub struct rustic_core::SnapshotOptions
pub rustic_core::SnapshotOptions::command: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::delete_after: core::option::Option<humantime::wrapper::Duration>
pub rustic_core::SnapshotOptions::delete_never: bool
pub rustic_core::SnapshotOptions::description: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::description_from: core::option::Option<std::path::PathBuf>
pub rustic_core::SnapshotOptions::host: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::label: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotOptions::tag: alloc::vec::Vec<rustic_core::StringList>
pub rustic_core::SnapshotOptions::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::add_tags(self, tag: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::SnapshotOptions::to_snapshot(&self) -> rustic_core::RusticResult<rustic_core::repofile::SnapshotFile>
impl rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::command(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::SnapshotOptions::delete_after(self, value: impl core::convert::Into<core::option::Option<humantime::wrapper::Duration>>) -> Self
pub fn rustic_core::SnapshotOptions::delete_never(self, value: impl core::convert::Into<bool>) -> Self
pub fn rustic_core::SnapshotOptions::description(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::SnapshotOptions::description_from(self, value: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> Self
pub fn rustic_core::SnapshotOptions::host(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::SnapshotOptions::label(self, value: impl core::convert::Into<core::option::Option<alloc::string::String>>) -> Self
pub fn rustic_core::SnapshotOptions::tag(self, value: impl core::convert::Into<alloc::vec::Vec<rustic_core::StringList>>) -> Self
pub fn rustic_core::SnapshotOptions::time(self, value: impl core::convert::Into<core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>>) -> Self
impl core::clone::Clone for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::clone(&self) -> rustic_core::SnapshotOptions
impl core::default::Default for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::default() -> rustic_core::SnapshotOptions
impl core::fmt::Debug for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::SnapshotOptions where rustic_core::SnapshotOptions: core::default::Default
pub fn rustic_core::SnapshotOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::SnapshotOptions
impl core::marker::Sync for rustic_core::SnapshotOptions
impl core::marker::Unpin for rustic_core::SnapshotOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotOptions
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotOptions where U: core::convert::From<T>
pub fn rustic_core::SnapshotOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotOptions where U: core::convert::Into<T>
pub type rustic_core::SnapshotOptions::Error = core::convert::Infallible
pub fn rustic_core::SnapshotOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotOptions where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::SnapshotOptions where T: core::clone::Clone
pub type rustic_core::SnapshotOptions::Owned = T
pub fn rustic_core::SnapshotOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::SnapshotOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::SnapshotOptions where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::SnapshotOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::SnapshotOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotOptions
pub type rustic_core::SnapshotOptions::Init = T
pub const rustic_core::SnapshotOptions::ALIGN: usize
pub unsafe fn rustic_core::SnapshotOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotOptions::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::SnapshotOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotOptions
pub type rustic_core::SnapshotOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotOptions::vzip(self) -> V
pub struct rustic_core::StringList(_)
impl rustic_core::StringList
pub fn rustic_core::StringList::add(&mut self, s: alloc::string::String)
pub fn rustic_core::StringList::add_all(&mut self, string_lists: alloc::vec::Vec<Self>)
pub fn rustic_core::StringList::add_list(&mut self, sl: Self)
pub fn rustic_core::StringList::contains(&self, s: &str) -> bool
pub fn rustic_core::StringList::contains_all(&self, sl: &Self) -> bool
pub fn rustic_core::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::StringList::remove_all(&mut self, string_lists: &[Self])
pub fn rustic_core::StringList::sort(&mut self)
impl core::fmt::Display for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::StringList
pub type rustic_core::StringList::Err = rustic_core::RusticError
pub fn rustic_core::StringList::from_str(s: &str) -> rustic_core::RusticResult<Self>
impl core::clone::Clone for rustic_core::StringList
pub fn rustic_core::StringList::clone(&self) -> rustic_core::StringList
impl core::cmp::Eq for rustic_core::StringList
impl core::cmp::Ord for rustic_core::StringList
pub fn rustic_core::StringList::cmp(&self, other: &rustic_core::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::eq(&self, other: &rustic_core::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::partial_cmp(&self, other: &rustic_core::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::StringList
pub fn rustic_core::StringList::default() -> rustic_core::StringList
impl core::fmt::Debug for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::StringList
impl core::marker::StructuralPartialEq for rustic_core::StringList
impl serde::ser::Serialize for rustic_core::StringList
pub fn rustic_core::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::StringList
pub fn rustic_core::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::StringList
impl core::marker::Sync for rustic_core::StringList
impl core::marker::Unpin for rustic_core::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::StringList
impl<Q, K> hashbrown::Equivalent<K> for rustic_core::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::StringList::equivalent(&self, key: &K) -> bool
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::StringList where U: core::convert::From<T>
pub fn rustic_core::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::StringList where U: core::convert::Into<T>
pub type rustic_core::StringList::Error = core::convert::Infallible
pub fn rustic_core::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::StringList where T: core::clone::Clone
pub type rustic_core::StringList::Owned = T
pub fn rustic_core::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::StringList where T: core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync + 'static
pub fn rustic_core::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Sync + core::marker::Send + 'static)
pub fn rustic_core::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Sync + core::marker::Send), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::StringList
pub fn rustic_core::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::StringList
pub type rustic_core::StringList::Init = T
pub const rustic_core::StringList::ALIGN: usize
pub unsafe fn rustic_core::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::StringList
pub type rustic_core::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::StringList::vzip(self) -> V
pub trait rustic_core::IndexedFull: IndexedIds
pub trait rustic_core::Progress: core::marker::Send + core::marker::Sync + core::clone::Clone
pub fn rustic_core::Progress::finish(&self)
pub fn rustic_core::Progress::inc(&self, inc: u64)
pub fn rustic_core::Progress::is_hidden(&self) -> bool
pub fn rustic_core::Progress::set_length(&self, len: u64)
pub fn rustic_core::Progress::set_title(&self, title: &'static str)
impl rustic_core::Progress for rustic_core::NoProgress
pub fn rustic_core::NoProgress::finish(&self)
pub fn rustic_core::NoProgress::inc(&self, _inc: u64)
pub fn rustic_core::NoProgress::is_hidden(&self) -> bool
pub fn rustic_core::NoProgress::set_length(&self, _len: u64)
pub fn rustic_core::NoProgress::set_title(&self, title: &'static str)
pub trait rustic_core::ProgressBars
pub type rustic_core::ProgressBars::P: rustic_core::Progress
pub fn rustic_core::ProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::ProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::ProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::ProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
impl rustic_core::ProgressBars for rustic_core::NoProgressBars
pub type rustic_core::NoProgressBars::P = rustic_core::NoProgress
pub fn rustic_core::NoProgressBars::progress_bytes(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::NoProgressBars::progress_counter(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::NoProgressBars::progress_hidden(&self) -> Self::P
pub fn rustic_core::NoProgressBars::progress_spinner(&self, prefix: impl core::convert::Into<alloc::borrow::Cow<'static, str>>) -> Self::P
pub fn rustic_core::last_modified_node(n1: &rustic_core::repofile::Node, n2: &rustic_core::repofile::Node) -> core::cmp::Ordering
pub fn rustic_core::max_compression_level() -> i32
pub type rustic_core::RusticResult<T> = core::result::Result<T, rustic_core::RusticError>
