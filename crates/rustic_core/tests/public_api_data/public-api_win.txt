pub mod rustic_core
pub mod rustic_core::helpers
pub fn rustic_core::helpers::bytes_size_to_string(b: u64) -> alloc::string::String
pub enum rustic_core::AddFileResult
pub rustic_core::AddFileResult::Existing
pub rustic_core::AddFileResult::Modify(u64)
pub rustic_core::AddFileResult::New(u64)
pub rustic_core::AddFileResult::Verified
impl core::clone::Clone for rustic_core::AddFileResult
pub fn rustic_core::AddFileResult::clone(&self) -> rustic_core::AddFileResult
impl core::fmt::Debug for rustic_core::AddFileResult
pub fn rustic_core::AddFileResult::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::AddFileResult
impl core::marker::Send for rustic_core::AddFileResult
impl core::marker::Sync for rustic_core::AddFileResult
impl core::marker::Unpin for rustic_core::AddFileResult
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::AddFileResult
impl core::panic::unwind_safe::UnwindSafe for rustic_core::AddFileResult
impl<T, U> core::convert::Into<U> for rustic_core::AddFileResult where U: core::convert::From<T>
pub fn rustic_core::AddFileResult::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::AddFileResult where U: core::convert::Into<T>
pub type rustic_core::AddFileResult::Error = core::convert::Infallible
pub fn rustic_core::AddFileResult::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::AddFileResult where U: core::convert::TryFrom<T>
pub type rustic_core::AddFileResult::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::AddFileResult::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::AddFileResult where T: core::clone::Clone
pub type rustic_core::AddFileResult::Owned = T
pub fn rustic_core::AddFileResult::clone_into(&self, target: &mut T)
pub fn rustic_core::AddFileResult::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::AddFileResult where T: 'static + core::marker::Sized
pub fn rustic_core::AddFileResult::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::AddFileResult where T: core::marker::Sized
pub fn rustic_core::AddFileResult::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::AddFileResult where T: core::marker::Sized
pub fn rustic_core::AddFileResult::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::AddFileResult
pub fn rustic_core::AddFileResult::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::AddFileResult
pub type rustic_core::AddFileResult::Init = T
pub const rustic_core::AddFileResult::ALIGN: usize
pub unsafe fn rustic_core::AddFileResult::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::AddFileResult::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::AddFileResult::drop(ptr: usize)
pub unsafe fn rustic_core::AddFileResult::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::AddFileResult
impl<T> tracing::instrument::WithSubscriber for rustic_core::AddFileResult
impl<T> typenum::type_operators::Same<T> for rustic_core::AddFileResult
pub type rustic_core::AddFileResult::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::AddFileResult where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::AddFileResult::vzip(self) -> V
pub enum rustic_core::BlobType
pub rustic_core::BlobType::Data
pub rustic_core::BlobType::Tree
impl rustic_core::BlobType
pub const fn rustic_core::BlobType::is_cacheable(self) -> bool
impl core::clone::Clone for rustic_core::BlobType
pub fn rustic_core::BlobType::clone(&self) -> rustic_core::BlobType
impl core::cmp::Eq for rustic_core::BlobType
impl core::cmp::Ord for rustic_core::BlobType
pub fn rustic_core::BlobType::cmp(&self, other: &rustic_core::BlobType) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::BlobType> for rustic_core::BlobType
pub fn rustic_core::BlobType::eq(&self, other: &rustic_core::BlobType) -> bool
impl core::cmp::PartialOrd<rustic_core::BlobType> for rustic_core::BlobType
pub fn rustic_core::BlobType::partial_cmp(&self, other: &rustic_core::BlobType) -> core::option::Option<core::cmp::Ordering>
impl core::fmt::Debug for rustic_core::BlobType
pub fn rustic_core::BlobType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for rustic_core::BlobType
pub fn rustic_core::BlobType::hash<__H: core::hash::Hasher>(&self, state: &mut __H) -> ()
impl core::marker::Copy for rustic_core::BlobType
impl core::marker::StructuralEq for rustic_core::BlobType
impl core::marker::StructuralPartialEq for rustic_core::BlobType
impl enum_map::internal::Enum for rustic_core::BlobType
pub const rustic_core::BlobType::LENGTH: usize
pub fn rustic_core::BlobType::from_usize(value: usize) -> Self
pub fn rustic_core::BlobType::into_usize(self) -> usize
impl serde::ser::Serialize for rustic_core::BlobType
pub fn rustic_core::BlobType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::BlobType
pub fn rustic_core::BlobType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl<V> enum_map::internal::EnumArray<V> for rustic_core::BlobType
pub type rustic_core::BlobType::Array = [V; 2]
impl core::marker::Send for rustic_core::BlobType
impl core::marker::Sync for rustic_core::BlobType
impl core::marker::Unpin for rustic_core::BlobType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::BlobType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::BlobType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::BlobType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::BlobType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::BlobType where U: core::convert::From<T>
pub fn rustic_core::BlobType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::BlobType where U: core::convert::Into<T>
pub type rustic_core::BlobType::Error = core::convert::Infallible
pub fn rustic_core::BlobType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::BlobType where U: core::convert::TryFrom<T>
pub type rustic_core::BlobType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::BlobType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::BlobType where T: core::clone::Clone
pub type rustic_core::BlobType::Owned = T
pub fn rustic_core::BlobType::clone_into(&self, target: &mut T)
pub fn rustic_core::BlobType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::BlobType where T: 'static + core::marker::Sized
pub fn rustic_core::BlobType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::BlobType where T: core::marker::Sized
pub fn rustic_core::BlobType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::BlobType where T: core::marker::Sized
pub fn rustic_core::BlobType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::BlobType
pub fn rustic_core::BlobType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::BlobType
pub type rustic_core::BlobType::Init = T
pub const rustic_core::BlobType::ALIGN: usize
pub unsafe fn rustic_core::BlobType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::BlobType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::BlobType::drop(ptr: usize)
pub unsafe fn rustic_core::BlobType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::BlobType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::BlobType
impl<T> tracing::instrument::WithSubscriber for rustic_core::BlobType
impl<T> typenum::type_operators::Same<T> for rustic_core::BlobType
pub type rustic_core::BlobType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::BlobType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::BlobType::vzip(self) -> V
pub enum rustic_core::DeleteOption
pub rustic_core::DeleteOption::After(chrono::datetime::DateTime<chrono::offset::local::Local>)
pub rustic_core::DeleteOption::Never
pub rustic_core::DeleteOption::NotSet
impl core::default::Default for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::default() -> Self
impl core::clone::Clone for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::clone(&self) -> rustic_core::DeleteOption
impl core::cmp::Eq for rustic_core::DeleteOption
impl core::cmp::PartialEq<rustic_core::DeleteOption> for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::eq(&self, other: &rustic_core::DeleteOption) -> bool
impl core::fmt::Debug for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::DeleteOption
impl core::marker::StructuralEq for rustic_core::DeleteOption
impl core::marker::StructuralPartialEq for rustic_core::DeleteOption
impl serde::ser::Serialize for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::DeleteOption
impl core::marker::Sync for rustic_core::DeleteOption
impl core::marker::Unpin for rustic_core::DeleteOption
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::DeleteOption
impl core::panic::unwind_safe::UnwindSafe for rustic_core::DeleteOption
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::DeleteOption where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::DeleteOption::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::DeleteOption where U: core::convert::From<T>
pub fn rustic_core::DeleteOption::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::DeleteOption where U: core::convert::Into<T>
pub type rustic_core::DeleteOption::Error = core::convert::Infallible
pub fn rustic_core::DeleteOption::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::DeleteOption where U: core::convert::TryFrom<T>
pub type rustic_core::DeleteOption::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::DeleteOption::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::DeleteOption where T: core::clone::Clone
pub type rustic_core::DeleteOption::Owned = T
pub fn rustic_core::DeleteOption::clone_into(&self, target: &mut T)
pub fn rustic_core::DeleteOption::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::DeleteOption where T: 'static + core::marker::Sized
pub fn rustic_core::DeleteOption::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::DeleteOption where T: core::marker::Sized
pub fn rustic_core::DeleteOption::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::DeleteOption where T: core::marker::Sized
pub fn rustic_core::DeleteOption::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::DeleteOption
pub fn rustic_core::DeleteOption::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::DeleteOption
pub type rustic_core::DeleteOption::Init = T
pub const rustic_core::DeleteOption::ALIGN: usize
pub unsafe fn rustic_core::DeleteOption::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::DeleteOption::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::DeleteOption::drop(ptr: usize)
pub unsafe fn rustic_core::DeleteOption::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::DeleteOption where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::DeleteOption
impl<T> tracing::instrument::WithSubscriber for rustic_core::DeleteOption
impl<T> typenum::type_operators::Same<T> for rustic_core::DeleteOption
pub type rustic_core::DeleteOption::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::DeleteOption where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::DeleteOption::vzip(self) -> V
pub enum rustic_core::FileType
pub rustic_core::FileType::Config
pub rustic_core::FileType::Index
pub rustic_core::FileType::Key
pub rustic_core::FileType::Pack
pub rustic_core::FileType::Snapshot
impl core::convert::From<rustic_core::FileType> for &'static str
pub fn rustic_core::FileType::from(value: rustic_core::FileType) -> &'static str
impl core::fmt::Display for rustic_core::FileType
pub fn rustic_core::FileType::fmt(&self, formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::FileType
pub fn rustic_core::FileType::clone(&self) -> rustic_core::FileType
impl core::cmp::Eq for rustic_core::FileType
impl core::cmp::PartialEq<rustic_core::FileType> for rustic_core::FileType
pub fn rustic_core::FileType::eq(&self, other: &rustic_core::FileType) -> bool
impl core::fmt::Debug for rustic_core::FileType
pub fn rustic_core::FileType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::FileType
impl core::marker::StructuralEq for rustic_core::FileType
impl core::marker::StructuralPartialEq for rustic_core::FileType
impl core::marker::Send for rustic_core::FileType
impl core::marker::Sync for rustic_core::FileType
impl core::marker::Unpin for rustic_core::FileType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::FileType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::FileType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::FileType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::FileType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::FileType where U: core::convert::From<T>
pub fn rustic_core::FileType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::FileType where U: core::convert::Into<T>
pub type rustic_core::FileType::Error = core::convert::Infallible
pub fn rustic_core::FileType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::FileType where U: core::convert::TryFrom<T>
pub type rustic_core::FileType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::FileType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::FileType where T: core::clone::Clone
pub type rustic_core::FileType::Owned = T
pub fn rustic_core::FileType::clone_into(&self, target: &mut T)
pub fn rustic_core::FileType::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::FileType where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::FileType::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::FileType where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::FileType::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::FileType::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::FileType::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::FileType where T: 'static + core::marker::Sized
pub fn rustic_core::FileType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::FileType where T: core::marker::Sized
pub fn rustic_core::FileType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::FileType where T: core::marker::Sized
pub fn rustic_core::FileType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::FileType
pub fn rustic_core::FileType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::FileType
pub type rustic_core::FileType::Init = T
pub const rustic_core::FileType::ALIGN: usize
pub unsafe fn rustic_core::FileType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::FileType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::FileType::drop(ptr: usize)
pub unsafe fn rustic_core::FileType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::FileType
impl<T> tracing::instrument::WithSubscriber for rustic_core::FileType
impl<T> typenum::type_operators::Same<T> for rustic_core::FileType
pub type rustic_core::FileType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::FileType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::FileType::vzip(self) -> V
pub enum rustic_core::HeaderEntry
pub rustic_core::HeaderEntry::CompData
pub rustic_core::HeaderEntry::CompData::id: rustic_core::Id
pub rustic_core::HeaderEntry::CompData::len: u32
pub rustic_core::HeaderEntry::CompData::len_data: u32
pub rustic_core::HeaderEntry::CompTree
pub rustic_core::HeaderEntry::CompTree::id: rustic_core::Id
pub rustic_core::HeaderEntry::CompTree::len: u32
pub rustic_core::HeaderEntry::CompTree::len_data: u32
pub rustic_core::HeaderEntry::Data
pub rustic_core::HeaderEntry::Data::id: rustic_core::Id
pub rustic_core::HeaderEntry::Data::len: u32
pub rustic_core::HeaderEntry::Tree
pub rustic_core::HeaderEntry::Tree::id: rustic_core::Id
pub rustic_core::HeaderEntry::Tree::len: u32
impl rustic_core::HeaderEntry
pub const rustic_core::HeaderEntry::ENTRY_LEN_COMPRESSED: u32
impl binrw::meta::ReadEndian for rustic_core::HeaderEntry
pub const rustic_core::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::HeaderEntry
pub const rustic_core::HeaderEntry::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::HeaderEntry
pub type rustic_core::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::HeaderEntry::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::HeaderEntry
pub type rustic_core::HeaderEntry::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::HeaderEntry::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::HeaderEntry
pub fn rustic_core::HeaderEntry::clone(&self) -> rustic_core::HeaderEntry
impl core::fmt::Debug for rustic_core::HeaderEntry
pub fn rustic_core::HeaderEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::HeaderEntry
impl core::marker::Send for rustic_core::HeaderEntry
impl core::marker::Sync for rustic_core::HeaderEntry
impl core::marker::Unpin for rustic_core::HeaderEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::HeaderEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::HeaderEntry
impl<T, U> core::convert::Into<U> for rustic_core::HeaderEntry where U: core::convert::From<T>
pub fn rustic_core::HeaderEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::HeaderEntry where U: core::convert::Into<T>
pub type rustic_core::HeaderEntry::Error = core::convert::Infallible
pub fn rustic_core::HeaderEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::HeaderEntry where U: core::convert::TryFrom<T>
pub type rustic_core::HeaderEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::HeaderEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::HeaderEntry where T: core::clone::Clone
pub type rustic_core::HeaderEntry::Owned = T
pub fn rustic_core::HeaderEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::HeaderEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::HeaderEntry where T: 'static + core::marker::Sized
pub fn rustic_core::HeaderEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::HeaderEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::HeaderEntry where T: core::marker::Sized
pub fn rustic_core::HeaderEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::HeaderEntry
pub fn rustic_core::HeaderEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::HeaderEntry
pub type rustic_core::HeaderEntry::Init = T
pub const rustic_core::HeaderEntry::ALIGN: usize
pub unsafe fn rustic_core::HeaderEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::HeaderEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::HeaderEntry::drop(ptr: usize)
pub unsafe fn rustic_core::HeaderEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::HeaderEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::HeaderEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::HeaderEntry
pub type rustic_core::HeaderEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::HeaderEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::HeaderEntry::vzip(self) -> V
pub enum rustic_core::IndexType
pub rustic_core::IndexType::Full
pub rustic_core::IndexType::FullTrees
pub rustic_core::IndexType::OnlyTrees
impl core::clone::Clone for rustic_core::IndexType
pub fn rustic_core::IndexType::clone(&self) -> rustic_core::IndexType
impl core::fmt::Debug for rustic_core::IndexType
pub fn rustic_core::IndexType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::IndexType
impl core::marker::Send for rustic_core::IndexType
impl core::marker::Sync for rustic_core::IndexType
impl core::marker::Unpin for rustic_core::IndexType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexType
impl<T, U> core::convert::Into<U> for rustic_core::IndexType where U: core::convert::From<T>
pub fn rustic_core::IndexType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexType where U: core::convert::Into<T>
pub type rustic_core::IndexType::Error = core::convert::Infallible
pub fn rustic_core::IndexType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexType where U: core::convert::TryFrom<T>
pub type rustic_core::IndexType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexType where T: core::clone::Clone
pub type rustic_core::IndexType::Owned = T
pub fn rustic_core::IndexType::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexType where T: 'static + core::marker::Sized
pub fn rustic_core::IndexType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexType where T: core::marker::Sized
pub fn rustic_core::IndexType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexType where T: core::marker::Sized
pub fn rustic_core::IndexType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexType
pub fn rustic_core::IndexType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexType
pub type rustic_core::IndexType::Init = T
pub const rustic_core::IndexType::ALIGN: usize
pub unsafe fn rustic_core::IndexType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexType::drop(ptr: usize)
pub unsafe fn rustic_core::IndexType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::IndexType
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexType
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexType
pub type rustic_core::IndexType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexType::vzip(self) -> V
pub enum rustic_core::NodeType
pub rustic_core::NodeType::Chardev
pub rustic_core::NodeType::Chardev::device: u64
pub rustic_core::NodeType::Dev
pub rustic_core::NodeType::Dev::device: u64
pub rustic_core::NodeType::Dir
pub rustic_core::NodeType::Fifo
pub rustic_core::NodeType::File
pub rustic_core::NodeType::Socket
pub rustic_core::NodeType::Symlink
pub rustic_core::NodeType::Symlink::linktarget: alloc::string::String
impl rustic_core::NodeType
pub fn rustic_core::NodeType::is_chardev(&self) -> bool
pub fn rustic_core::NodeType::is_dev(&self) -> bool
pub fn rustic_core::NodeType::is_dir(&self) -> bool
pub fn rustic_core::NodeType::is_fifo(&self) -> bool
pub fn rustic_core::NodeType::is_file(&self) -> bool
pub fn rustic_core::NodeType::is_socket(&self) -> bool
pub fn rustic_core::NodeType::is_symlink(&self) -> bool
impl core::default::Default for rustic_core::NodeType
pub fn rustic_core::NodeType::default() -> Self
impl core::clone::Clone for rustic_core::NodeType
pub fn rustic_core::NodeType::clone(&self) -> rustic_core::NodeType
impl core::cmp::Eq for rustic_core::NodeType
impl core::cmp::PartialEq<rustic_core::NodeType> for rustic_core::NodeType
pub fn rustic_core::NodeType::eq(&self, other: &rustic_core::NodeType) -> bool
impl core::fmt::Debug for rustic_core::NodeType
pub fn rustic_core::NodeType::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::NodeType
impl core::marker::StructuralPartialEq for rustic_core::NodeType
impl serde::ser::Serialize for rustic_core::NodeType
pub fn rustic_core::NodeType::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::NodeType
pub fn rustic_core::NodeType::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::NodeType
impl core::marker::Sync for rustic_core::NodeType
impl core::marker::Unpin for rustic_core::NodeType
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::NodeType
impl core::panic::unwind_safe::UnwindSafe for rustic_core::NodeType
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::NodeType where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::NodeType::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::NodeType where U: core::convert::From<T>
pub fn rustic_core::NodeType::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::NodeType where U: core::convert::Into<T>
pub type rustic_core::NodeType::Error = core::convert::Infallible
pub fn rustic_core::NodeType::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::NodeType where U: core::convert::TryFrom<T>
pub type rustic_core::NodeType::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::NodeType::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::NodeType where T: core::clone::Clone
pub type rustic_core::NodeType::Owned = T
pub fn rustic_core::NodeType::clone_into(&self, target: &mut T)
pub fn rustic_core::NodeType::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::NodeType where T: 'static + core::marker::Sized
pub fn rustic_core::NodeType::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::NodeType where T: core::marker::Sized
pub fn rustic_core::NodeType::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::NodeType where T: core::marker::Sized
pub fn rustic_core::NodeType::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::NodeType
pub fn rustic_core::NodeType::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::NodeType
pub type rustic_core::NodeType::Init = T
pub const rustic_core::NodeType::ALIGN: usize
pub unsafe fn rustic_core::NodeType::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::NodeType::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::NodeType::drop(ptr: usize)
pub unsafe fn rustic_core::NodeType::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::NodeType where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::NodeType
impl<T> tracing::instrument::WithSubscriber for rustic_core::NodeType
impl<T> typenum::type_operators::Same<T> for rustic_core::NodeType
pub type rustic_core::NodeType::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::NodeType where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::NodeType::vzip(self) -> V
pub struct rustic_core::Archiver<BE: rustic_core::DecryptWriteBackend, I: rustic_core::IndexedBackend>
impl<BE: rustic_core::DecryptWriteBackend, I: rustic_core::IndexedBackend> rustic_core::Archiver<BE, I>
pub fn rustic_core::Archiver::archive<R>(self, src: R, backup_path: &std::path::Path, as_path: core::option::Option<&std::path::PathBuf>, p: &indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<rustic_core::SnapshotFile> where R: rustic_core::ReadSource + 'static, <R as rustic_core::ReadSource>::Open: core::marker::Send, <R as rustic_core::ReadSource>::Iter: core::marker::Send
pub fn rustic_core::Archiver::new(be: BE, index: I, config: &rustic_core::ConfigFile, parent_tree: impl core::convert::Into<core::option::Option<rustic_core::Id>> + core::marker::Copy, ignore_ctime: bool, ignore_inode: bool, snap: rustic_core::SnapshotFile) -> rustic_core::RusticResult<Self>
impl<BE, I> core::marker::Send for rustic_core::Archiver<BE, I>
impl<BE, I> core::marker::Sync for rustic_core::Archiver<BE, I>
impl<BE, I> core::marker::Unpin for rustic_core::Archiver<BE, I> where BE: core::marker::Unpin, I: core::marker::Unpin
impl<BE, I> core::panic::unwind_safe::RefUnwindSafe for rustic_core::Archiver<BE, I> where BE: core::panic::unwind_safe::RefUnwindSafe, I: core::panic::unwind_safe::RefUnwindSafe
impl<BE, I> core::panic::unwind_safe::UnwindSafe for rustic_core::Archiver<BE, I> where BE: core::panic::unwind_safe::UnwindSafe, I: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::Archiver<BE, I> where U: core::convert::From<T>
pub fn rustic_core::Archiver::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Archiver<BE, I> where U: core::convert::Into<T>
pub type rustic_core::Archiver::Error = core::convert::Infallible
pub fn rustic_core::Archiver::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Archiver<BE, I> where U: core::convert::TryFrom<T>
pub type rustic_core::Archiver::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Archiver::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::Archiver<BE, I> where T: 'static + core::marker::Sized
pub fn rustic_core::Archiver::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Archiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::Archiver::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Archiver<BE, I> where T: core::marker::Sized
pub fn rustic_core::Archiver::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Archiver<BE, I>
pub fn rustic_core::Archiver::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Archiver<BE, I>
pub type rustic_core::Archiver::Init = T
pub const rustic_core::Archiver::ALIGN: usize
pub unsafe fn rustic_core::Archiver::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Archiver::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Archiver::drop(ptr: usize)
pub unsafe fn rustic_core::Archiver::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Archiver<BE, I>
impl<T> tracing::instrument::WithSubscriber for rustic_core::Archiver<BE, I>
impl<T> typenum::type_operators::Same<T> for rustic_core::Archiver<BE, I>
pub type rustic_core::Archiver::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Archiver<BE, I> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Archiver::vzip(self) -> V
pub struct rustic_core::BlobLocation
pub rustic_core::BlobLocation::length: u32
pub rustic_core::BlobLocation::offset: u32
pub rustic_core::BlobLocation::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::data_length(&self) -> u64
impl core::clone::Clone for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::clone(&self) -> rustic_core::BlobLocation
impl core::cmp::Eq for rustic_core::BlobLocation
impl core::cmp::PartialEq<rustic_core::BlobLocation> for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::eq(&self, other: &rustic_core::BlobLocation) -> bool
impl core::default::Default for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::default() -> rustic_core::BlobLocation
impl core::fmt::Debug for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::hash<__H: core::hash::Hasher>(&self, state: &mut __H) -> ()
impl core::marker::Copy for rustic_core::BlobLocation
impl core::marker::StructuralEq for rustic_core::BlobLocation
impl core::marker::StructuralPartialEq for rustic_core::BlobLocation
impl core::marker::Send for rustic_core::BlobLocation
impl core::marker::Sync for rustic_core::BlobLocation
impl core::marker::Unpin for rustic_core::BlobLocation
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::BlobLocation
impl core::panic::unwind_safe::UnwindSafe for rustic_core::BlobLocation
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::BlobLocation where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::BlobLocation::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::BlobLocation where U: core::convert::From<T>
pub fn rustic_core::BlobLocation::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::BlobLocation where U: core::convert::Into<T>
pub type rustic_core::BlobLocation::Error = core::convert::Infallible
pub fn rustic_core::BlobLocation::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::BlobLocation where U: core::convert::TryFrom<T>
pub type rustic_core::BlobLocation::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::BlobLocation::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::BlobLocation where T: core::clone::Clone
pub type rustic_core::BlobLocation::Owned = T
pub fn rustic_core::BlobLocation::clone_into(&self, target: &mut T)
pub fn rustic_core::BlobLocation::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::BlobLocation where T: 'static + core::marker::Sized
pub fn rustic_core::BlobLocation::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::BlobLocation where T: core::marker::Sized
pub fn rustic_core::BlobLocation::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::BlobLocation where T: core::marker::Sized
pub fn rustic_core::BlobLocation::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::BlobLocation
pub fn rustic_core::BlobLocation::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::BlobLocation
pub type rustic_core::BlobLocation::Init = T
pub const rustic_core::BlobLocation::ALIGN: usize
pub unsafe fn rustic_core::BlobLocation::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::BlobLocation::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::BlobLocation::drop(ptr: usize)
pub unsafe fn rustic_core::BlobLocation::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::BlobLocation
impl<T> tracing::instrument::WithSubscriber for rustic_core::BlobLocation
impl<T> typenum::type_operators::Same<T> for rustic_core::BlobLocation
pub type rustic_core::BlobLocation::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::BlobLocation where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::BlobLocation::vzip(self) -> V
pub struct rustic_core::Cache
impl rustic_core::Cache
pub fn rustic_core::Cache::dir(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> std::path::PathBuf
pub fn rustic_core::Cache::list_with_size(&self, tpe: rustic_core::FileType) -> rustic_core::RusticResult<std::collections::hash::map::HashMap<rustic_core::Id, u32>>
pub fn rustic_core::Cache::location(&self) -> &str
pub fn rustic_core::Cache::new(id: rustic_core::Id, path: impl core::convert::Into<core::option::Option<std::path::PathBuf>>) -> rustic_core::RusticResult<Self>
pub fn rustic_core::Cache::path(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> std::path::PathBuf
pub fn rustic_core::Cache::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::Cache::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, offset: u32, length: u32) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::Cache::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<()>
pub fn rustic_core::Cache::remove_not_in_list(&self, tpe: rustic_core::FileType, list: &alloc::vec::Vec<(rustic_core::Id, u32)>) -> rustic_core::RusticResult<()>
pub fn rustic_core::Cache::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, buf: bytes::bytes::Bytes) -> rustic_core::RusticResult<()>
impl core::clone::Clone for rustic_core::Cache
pub fn rustic_core::Cache::clone(&self) -> rustic_core::Cache
impl core::fmt::Debug for rustic_core::Cache
pub fn rustic_core::Cache::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::Cache
impl core::marker::Sync for rustic_core::Cache
impl core::marker::Unpin for rustic_core::Cache
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Cache
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Cache
impl<T, U> core::convert::Into<U> for rustic_core::Cache where U: core::convert::From<T>
pub fn rustic_core::Cache::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Cache where U: core::convert::Into<T>
pub type rustic_core::Cache::Error = core::convert::Infallible
pub fn rustic_core::Cache::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Cache where U: core::convert::TryFrom<T>
pub type rustic_core::Cache::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Cache::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Cache where T: core::clone::Clone
pub type rustic_core::Cache::Owned = T
pub fn rustic_core::Cache::clone_into(&self, target: &mut T)
pub fn rustic_core::Cache::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Cache where T: 'static + core::marker::Sized
pub fn rustic_core::Cache::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Cache where T: core::marker::Sized
pub fn rustic_core::Cache::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Cache where T: core::marker::Sized
pub fn rustic_core::Cache::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Cache
pub fn rustic_core::Cache::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Cache
pub type rustic_core::Cache::Init = T
pub const rustic_core::Cache::ALIGN: usize
pub unsafe fn rustic_core::Cache::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Cache::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Cache::drop(ptr: usize)
pub unsafe fn rustic_core::Cache::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Cache
impl<T> tracing::instrument::WithSubscriber for rustic_core::Cache
impl<T> typenum::type_operators::Same<T> for rustic_core::Cache
pub type rustic_core::Cache::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Cache where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Cache::vzip(self) -> V
pub struct rustic_core::ConfigFile
pub rustic_core::ConfigFile::chunker_polynomial: alloc::string::String
pub rustic_core::ConfigFile::compression: core::option::Option<i32>
pub rustic_core::ConfigFile::datapack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigFile::datapack_size: core::option::Option<u32>
pub rustic_core::ConfigFile::datapack_size_limit: core::option::Option<u32>
pub rustic_core::ConfigFile::id: rustic_core::Id
pub rustic_core::ConfigFile::is_hot: core::option::Option<bool>
pub rustic_core::ConfigFile::max_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigFile::min_packsize_tolerate_percent: core::option::Option<u32>
pub rustic_core::ConfigFile::treepack_growfactor: core::option::Option<u32>
pub rustic_core::ConfigFile::treepack_size: core::option::Option<u32>
pub rustic_core::ConfigFile::treepack_size_limit: core::option::Option<u32>
pub rustic_core::ConfigFile::version: u32
impl rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::new(version: u32, id: rustic_core::Id, poly: u64) -> Self
pub fn rustic_core::ConfigFile::packsize(&self, blob: rustic_core::BlobType) -> (u32, u32, u32)
pub fn rustic_core::ConfigFile::packsize_ok_percents(&self) -> (u32, u32)
pub fn rustic_core::ConfigFile::poly(&self) -> rustic_core::RusticResult<u64>
pub fn rustic_core::ConfigFile::zstd(&self) -> rustic_core::RusticResult<core::option::Option<i32>>
impl rustic_core::RepoFile for rustic_core::ConfigFile
pub const rustic_core::ConfigFile::TYPE: rustic_core::FileType
impl core::clone::Clone for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::clone(&self) -> rustic_core::ConfigFile
impl core::cmp::Eq for rustic_core::ConfigFile
impl core::cmp::PartialEq<rustic_core::ConfigFile> for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::eq(&self, other: &rustic_core::ConfigFile) -> bool
impl core::default::Default for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::default() -> rustic_core::ConfigFile
impl core::fmt::Debug for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::ConfigFile
impl core::marker::StructuralPartialEq for rustic_core::ConfigFile
impl serde::ser::Serialize for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::ConfigFile
impl core::marker::Sync for rustic_core::ConfigFile
impl core::marker::Unpin for rustic_core::ConfigFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::ConfigFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::ConfigFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::ConfigFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::ConfigFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::ConfigFile where U: core::convert::From<T>
pub fn rustic_core::ConfigFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ConfigFile where U: core::convert::Into<T>
pub type rustic_core::ConfigFile::Error = core::convert::Infallible
pub fn rustic_core::ConfigFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ConfigFile where U: core::convert::TryFrom<T>
pub type rustic_core::ConfigFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ConfigFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::ConfigFile where T: core::clone::Clone
pub type rustic_core::ConfigFile::Owned = T
pub fn rustic_core::ConfigFile::clone_into(&self, target: &mut T)
pub fn rustic_core::ConfigFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::ConfigFile where T: 'static + core::marker::Sized
pub fn rustic_core::ConfigFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ConfigFile where T: core::marker::Sized
pub fn rustic_core::ConfigFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ConfigFile where T: core::marker::Sized
pub fn rustic_core::ConfigFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ConfigFile
pub fn rustic_core::ConfigFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ConfigFile
pub type rustic_core::ConfigFile::Init = T
pub const rustic_core::ConfigFile::ALIGN: usize
pub unsafe fn rustic_core::ConfigFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ConfigFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ConfigFile::drop(ptr: usize)
pub unsafe fn rustic_core::ConfigFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::ConfigFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::ConfigFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::ConfigFile
impl<T> typenum::type_operators::Same<T> for rustic_core::ConfigFile
pub type rustic_core::ConfigFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ConfigFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ConfigFile::vzip(self) -> V
pub struct rustic_core::DecryptBackend<R, C>
impl<R: rustic_core::ReadBackend, C: CryptoKey> rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptBackend::new(be: &R, key: C) -> Self
impl<R: rustic_core::ReadBackend, C: CryptoKey> rustic_core::DecryptReadBackend for rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptBackend::decrypt(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::DecryptBackend::read_encrypted_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
impl<R: rustic_core::ReadBackend, C: CryptoKey> rustic_core::ReadBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptBackend::ReadBackendError = <R as rustic_core::ReadBackend>::ReadBackendError
pub fn rustic_core::DecryptBackend::list(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<rustic_core::Id>, Self::ReadBackendError>
pub fn rustic_core::DecryptBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::DecryptBackend::location(&self) -> alloc::string::String
pub fn rustic_core::DecryptBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::DecryptBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::DecryptBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<R: rustic_core::WriteBackend, C: CryptoKey> rustic_core::DecryptWriteBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptBackend::Key = C
pub fn rustic_core::DecryptBackend::hash_write_full(&self, tpe: rustic_core::FileType, data: &[u8]) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DecryptBackend::key(&self) -> &Self::Key
pub fn rustic_core::DecryptBackend::set_zstd(&mut self, zstd: impl core::convert::Into<core::option::Option<i32>>)
impl<R: rustic_core::WriteBackend, C: CryptoKey> rustic_core::WriteBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptBackend::WriteBackendError = <R as rustic_core::WriteBackend>::WriteBackendError
pub fn rustic_core::DecryptBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::DecryptBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::DecryptBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<R: core::clone::Clone, C: core::clone::Clone> core::clone::Clone for rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptBackend::clone(&self) -> rustic_core::DecryptBackend<R, C>
impl<R: core::fmt::Debug, C: core::fmt::Debug> core::fmt::Debug for rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<R, C> core::marker::Send for rustic_core::DecryptBackend<R, C> where C: core::marker::Send, R: core::marker::Send
impl<R, C> core::marker::Sync for rustic_core::DecryptBackend<R, C> where C: core::marker::Sync, R: core::marker::Sync
impl<R, C> core::marker::Unpin for rustic_core::DecryptBackend<R, C> where C: core::marker::Unpin, R: core::marker::Unpin
impl<R, C> core::panic::unwind_safe::RefUnwindSafe for rustic_core::DecryptBackend<R, C> where C: core::panic::unwind_safe::RefUnwindSafe, R: core::panic::unwind_safe::RefUnwindSafe
impl<R, C> core::panic::unwind_safe::UnwindSafe for rustic_core::DecryptBackend<R, C> where C: core::panic::unwind_safe::UnwindSafe, R: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::DecryptBackend<R, C> where U: core::convert::From<T>
pub fn rustic_core::DecryptBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::DecryptBackend<R, C> where U: core::convert::Into<T>
pub type rustic_core::DecryptBackend::Error = core::convert::Infallible
pub fn rustic_core::DecryptBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::DecryptBackend<R, C> where U: core::convert::TryFrom<T>
pub type rustic_core::DecryptBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::DecryptBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::DecryptBackend<R, C> where T: core::clone::Clone
pub type rustic_core::DecryptBackend::Owned = T
pub fn rustic_core::DecryptBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::DecryptBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::DecryptBackend<R, C> where T: 'static + core::marker::Sized
pub fn rustic_core::DecryptBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::DecryptBackend<R, C> where T: core::marker::Sized
pub fn rustic_core::DecryptBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::DecryptBackend<R, C> where T: core::marker::Sized
pub fn rustic_core::DecryptBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptBackend::Init = T
pub const rustic_core::DecryptBackend::ALIGN: usize
pub unsafe fn rustic_core::DecryptBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::DecryptBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::DecryptBackend::drop(ptr: usize)
pub unsafe fn rustic_core::DecryptBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::DecryptBackend<R, C>
impl<T> tracing::instrument::WithSubscriber for rustic_core::DecryptBackend<R, C>
impl<T> typenum::type_operators::Same<T> for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::DecryptBackend<R, C> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::DecryptBackend::vzip(self) -> V
pub struct rustic_core::DryRunBackend<BE: rustic_core::DecryptFullBackend>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::DryRunBackend<BE>
pub const fn rustic_core::DryRunBackend::new(be: BE, dry_run: bool) -> Self
impl<BE: rustic_core::DecryptFullBackend> rustic_core::DecryptReadBackend for rustic_core::DryRunBackend<BE>
pub fn rustic_core::DryRunBackend::decrypt(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::DryRunBackend::read_encrypted_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::DecryptWriteBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::DryRunBackend::Key = <BE as rustic_core::DecryptWriteBackend>::Key
pub fn rustic_core::DryRunBackend::hash_write_full(&self, tpe: rustic_core::FileType, data: &[u8]) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DryRunBackend::key(&self) -> &Self::Key
pub fn rustic_core::DryRunBackend::set_zstd(&mut self, zstd: impl core::convert::Into<core::option::Option<i32>>)
impl<BE: rustic_core::DecryptFullBackend> rustic_core::ReadBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::DryRunBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::DryRunBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::DryRunBackend::location(&self) -> alloc::string::String
pub fn rustic_core::DryRunBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::DryRunBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::DryRunBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::WriteBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::DryRunBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::DryRunBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::DryRunBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::DryRunBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<BE: core::clone::Clone + rustic_core::DecryptFullBackend> core::clone::Clone for rustic_core::DryRunBackend<BE>
pub fn rustic_core::DryRunBackend::clone(&self) -> rustic_core::DryRunBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::DecryptFullBackend> core::fmt::Debug for rustic_core::DryRunBackend<BE>
pub fn rustic_core::DryRunBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::DryRunBackend<BE>
impl<BE> core::marker::Sync for rustic_core::DryRunBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::DryRunBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::DryRunBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::DryRunBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::DryRunBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::DryRunBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::DryRunBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::DryRunBackend::Error = core::convert::Infallible
pub fn rustic_core::DryRunBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::DryRunBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::DryRunBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::DryRunBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::DryRunBackend<BE> where T: core::clone::Clone
pub type rustic_core::DryRunBackend::Owned = T
pub fn rustic_core::DryRunBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::DryRunBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::DryRunBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::DryRunBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::DryRunBackend<BE> where T: core::marker::Sized
pub fn rustic_core::DryRunBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::DryRunBackend<BE> where T: core::marker::Sized
pub fn rustic_core::DryRunBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::DryRunBackend<BE>
pub fn rustic_core::DryRunBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::DryRunBackend<BE>
pub type rustic_core::DryRunBackend::Init = T
pub const rustic_core::DryRunBackend::ALIGN: usize
pub unsafe fn rustic_core::DryRunBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::DryRunBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::DryRunBackend::drop(ptr: usize)
pub unsafe fn rustic_core::DryRunBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::DryRunBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::DryRunBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::DryRunBackend<BE>
pub type rustic_core::DryRunBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::DryRunBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::DryRunBackend::vzip(self) -> V
pub struct rustic_core::FileInfos
pub rustic_core::FileInfos::matched_size: u64
pub rustic_core::FileInfos::names: alloc::vec::Vec<std::path::PathBuf>
pub rustic_core::FileInfos::r: std::collections::hash::map::HashMap<rustic_core::Id, std::collections::hash::map::HashMap<rustic_core::BlobLocation, alloc::vec::Vec<FileLocation>>>
pub rustic_core::FileInfos::restore_size: u64
impl rustic_core::FileInfos
pub fn rustic_core::FileInfos::add_file<P>(&mut self, dest: &rustic_core::LocalDestination, file: &rustic_core::Node, name: P, index: &impl rustic_core::IndexedBackend, ignore_mtime: bool) -> rustic_core::RusticResult<rustic_core::AddFileResult> where P: core::convert::Into<std::path::PathBuf> + core::convert::AsRef<std::path::Path> + core::fmt::Debug
pub fn rustic_core::FileInfos::new() -> Self
pub fn rustic_core::FileInfos::to_packs(&self) -> alloc::vec::Vec<rustic_core::Id>
impl core::default::Default for rustic_core::FileInfos
pub fn rustic_core::FileInfos::default() -> rustic_core::FileInfos
impl core::fmt::Debug for rustic_core::FileInfos
pub fn rustic_core::FileInfos::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::FileInfos
impl core::marker::Sync for rustic_core::FileInfos
impl core::marker::Unpin for rustic_core::FileInfos
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::FileInfos
impl core::panic::unwind_safe::UnwindSafe for rustic_core::FileInfos
impl<T, U> core::convert::Into<U> for rustic_core::FileInfos where U: core::convert::From<T>
pub fn rustic_core::FileInfos::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::FileInfos where U: core::convert::Into<T>
pub type rustic_core::FileInfos::Error = core::convert::Infallible
pub fn rustic_core::FileInfos::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::FileInfos where U: core::convert::TryFrom<T>
pub type rustic_core::FileInfos::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::FileInfos::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::FileInfos where T: 'static + core::marker::Sized
pub fn rustic_core::FileInfos::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::FileInfos where T: core::marker::Sized
pub fn rustic_core::FileInfos::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::FileInfos where T: core::marker::Sized
pub fn rustic_core::FileInfos::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::FileInfos
pub fn rustic_core::FileInfos::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::FileInfos
pub type rustic_core::FileInfos::Init = T
pub const rustic_core::FileInfos::ALIGN: usize
pub unsafe fn rustic_core::FileInfos::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::FileInfos::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::FileInfos::drop(ptr: usize)
pub unsafe fn rustic_core::FileInfos::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::FileInfos
impl<T> tracing::instrument::WithSubscriber for rustic_core::FileInfos
impl<T> typenum::type_operators::Same<T> for rustic_core::FileInfos
pub type rustic_core::FileInfos::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::FileInfos where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::FileInfos::vzip(self) -> V
pub struct rustic_core::Id(_)
impl rustic_core::Id
pub fn rustic_core::Id::from_hex(s: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::Id::is_null(&self) -> bool
pub fn rustic_core::Id::random() -> Self
pub fn rustic_core::Id::to_hex(self) -> HexId
impl rustic_core::Id
pub fn rustic_core::Id::new(__0: [u8; 32]) -> rustic_core::Id
impl core::fmt::Debug for rustic_core::Id
pub fn rustic_core::Id::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for rustic_core::Id
pub fn rustic_core::Id::fmt(&self, _derive_more_display_formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl binrw::binread::BinRead for rustic_core::Id
pub type rustic_core::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::Id::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::Id
pub type rustic_core::Id::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::Id::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::Id
pub fn rustic_core::Id::clone(&self) -> rustic_core::Id
impl core::cmp::Eq for rustic_core::Id
impl core::cmp::Ord for rustic_core::Id
pub fn rustic_core::Id::cmp(&self, other: &rustic_core::Id) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::Id> for rustic_core::Id
pub fn rustic_core::Id::eq(&self, other: &rustic_core::Id) -> bool
impl core::cmp::PartialOrd<rustic_core::Id> for rustic_core::Id
pub fn rustic_core::Id::partial_cmp(&self, other: &rustic_core::Id) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::Id
pub fn rustic_core::Id::default() -> rustic_core::Id
impl core::hash::Hash for rustic_core::Id
pub fn rustic_core::Id::hash<__H: core::hash::Hasher>(&self, state: &mut __H) -> ()
impl core::marker::Copy for rustic_core::Id
impl core::marker::StructuralEq for rustic_core::Id
impl core::marker::StructuralPartialEq for rustic_core::Id
impl serde::ser::Serialize for rustic_core::Id
pub fn rustic_core::Id::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::Id
pub fn rustic_core::Id::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::Id
impl core::marker::Sync for rustic_core::Id
impl core::marker::Unpin for rustic_core::Id
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Id
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Id
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::Id where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::Id::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::Id where U: core::convert::From<T>
pub fn rustic_core::Id::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Id where U: core::convert::Into<T>
pub type rustic_core::Id::Error = core::convert::Infallible
pub fn rustic_core::Id::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Id where U: core::convert::TryFrom<T>
pub type rustic_core::Id::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Id::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Id where T: core::clone::Clone
pub type rustic_core::Id::Owned = T
pub fn rustic_core::Id::clone_into(&self, target: &mut T)
pub fn rustic_core::Id::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::Id where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::Id::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::Id where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::Id::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::Id::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::Id::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::Id where T: 'static + core::marker::Sized
pub fn rustic_core::Id::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Id where T: core::marker::Sized
pub fn rustic_core::Id::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Id where T: core::marker::Sized
pub fn rustic_core::Id::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Id
pub fn rustic_core::Id::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Id
pub type rustic_core::Id::Init = T
pub const rustic_core::Id::ALIGN: usize
pub unsafe fn rustic_core::Id::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Id::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Id::drop(ptr: usize)
pub unsafe fn rustic_core::Id::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::Id where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::Id
impl<T> tracing::instrument::WithSubscriber for rustic_core::Id
impl<T> typenum::type_operators::Same<T> for rustic_core::Id
pub type rustic_core::Id::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Id where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Id::vzip(self) -> V
pub struct rustic_core::IndexBackend<BE: rustic_core::DecryptReadBackend>
impl<BE: rustic_core::DecryptReadBackend> rustic_core::IndexBackend<BE>
pub fn rustic_core::IndexBackend::into_index(self) -> Index
pub fn rustic_core::IndexBackend::new(be: &BE, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<Self>
pub fn rustic_core::IndexBackend::new_from_index(be: &BE, index: Index) -> Self
pub fn rustic_core::IndexBackend::only_full_trees(be: &BE, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<Self>
impl<BE: rustic_core::DecryptReadBackend> rustic_core::IndexedBackend for rustic_core::IndexBackend<BE>
pub type rustic_core::IndexBackend::Backend = BE
pub type rustic_core::IndexBackend::IndexBackendError = rustic_core::RusticError
pub fn rustic_core::IndexBackend::be(&self) -> &Self::Backend
pub fn rustic_core::IndexBackend::blob_from_backend(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::IndexBackendError>
impl<BE: rustic_core::DecryptReadBackend> rustic_core::ReadIndex for rustic_core::IndexBackend<BE>
pub fn rustic_core::IndexBackend::get_id(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::IndexBackend::has(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> bool
pub fn rustic_core::IndexBackend::total_size(&self, tpe: rustic_core::BlobType) -> u64
impl<BE: core::clone::Clone + rustic_core::DecryptReadBackend> core::clone::Clone for rustic_core::IndexBackend<BE>
pub fn rustic_core::IndexBackend::clone(&self) -> rustic_core::IndexBackend<BE>
impl<BE: core::fmt::Debug + rustic_core::DecryptReadBackend> core::fmt::Debug for rustic_core::IndexBackend<BE>
pub fn rustic_core::IndexBackend::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::IndexBackend<BE>
impl<BE> core::marker::Sync for rustic_core::IndexBackend<BE>
impl<BE> core::marker::Unpin for rustic_core::IndexBackend<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexBackend<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::IndexBackend<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::IndexBackend<BE> where U: core::convert::From<T>
pub fn rustic_core::IndexBackend::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexBackend<BE> where U: core::convert::Into<T>
pub type rustic_core::IndexBackend::Error = core::convert::Infallible
pub fn rustic_core::IndexBackend::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexBackend<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::IndexBackend::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexBackend::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexBackend<BE> where T: core::clone::Clone
pub type rustic_core::IndexBackend::Owned = T
pub fn rustic_core::IndexBackend::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexBackend::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexBackend<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::IndexBackend::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexBackend<BE> where T: core::marker::Sized
pub fn rustic_core::IndexBackend::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexBackend<BE> where T: core::marker::Sized
pub fn rustic_core::IndexBackend::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexBackend<BE>
pub fn rustic_core::IndexBackend::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexBackend<BE>
pub type rustic_core::IndexBackend::Init = T
pub const rustic_core::IndexBackend::ALIGN: usize
pub unsafe fn rustic_core::IndexBackend::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexBackend::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexBackend::drop(ptr: usize)
pub unsafe fn rustic_core::IndexBackend::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::IndexBackend<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexBackend<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexBackend<BE>
pub type rustic_core::IndexBackend::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexBackend<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexBackend::vzip(self) -> V
pub struct rustic_core::IndexBlob
pub rustic_core::IndexBlob::id: rustic_core::Id
pub rustic_core::IndexBlob::length: u32
pub rustic_core::IndexBlob::offset: u32
pub rustic_core::IndexBlob::tpe: rustic_core::BlobType
pub rustic_core::IndexBlob::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl core::cmp::Ord for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialOrd<rustic_core::IndexBlob> for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::clone::Clone for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::clone(&self) -> rustic_core::IndexBlob
impl core::cmp::Eq for rustic_core::IndexBlob
impl core::cmp::PartialEq<rustic_core::IndexBlob> for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::eq(&self, other: &rustic_core::IndexBlob) -> bool
impl core::fmt::Debug for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::IndexBlob
impl core::marker::StructuralEq for rustic_core::IndexBlob
impl core::marker::StructuralPartialEq for rustic_core::IndexBlob
impl serde::ser::Serialize for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::IndexBlob
impl core::marker::Sync for rustic_core::IndexBlob
impl core::marker::Unpin for rustic_core::IndexBlob
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexBlob
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexBlob
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::IndexBlob where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::IndexBlob::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::IndexBlob where U: core::convert::From<T>
pub fn rustic_core::IndexBlob::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexBlob where U: core::convert::Into<T>
pub type rustic_core::IndexBlob::Error = core::convert::Infallible
pub fn rustic_core::IndexBlob::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexBlob where U: core::convert::TryFrom<T>
pub type rustic_core::IndexBlob::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexBlob::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexBlob where T: core::clone::Clone
pub type rustic_core::IndexBlob::Owned = T
pub fn rustic_core::IndexBlob::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexBlob::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexBlob where T: 'static + core::marker::Sized
pub fn rustic_core::IndexBlob::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexBlob where T: core::marker::Sized
pub fn rustic_core::IndexBlob::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexBlob where T: core::marker::Sized
pub fn rustic_core::IndexBlob::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexBlob
pub fn rustic_core::IndexBlob::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexBlob
pub type rustic_core::IndexBlob::Init = T
pub const rustic_core::IndexBlob::ALIGN: usize
pub unsafe fn rustic_core::IndexBlob::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexBlob::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexBlob::drop(ptr: usize)
pub unsafe fn rustic_core::IndexBlob::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::IndexBlob where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::IndexBlob
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexBlob
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexBlob
pub type rustic_core::IndexBlob::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexBlob where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexBlob::vzip(self) -> V
pub struct rustic_core::IndexCollector(_)
impl rustic_core::IndexCollector
pub fn rustic_core::IndexCollector::data_packs(&self) -> &alloc::vec::Vec<(rustic_core::Id, u32)>
pub fn rustic_core::IndexCollector::into_index(self) -> Index
pub fn rustic_core::IndexCollector::new(tpe: rustic_core::IndexType) -> Self
pub fn rustic_core::IndexCollector::tree_packs(&self) -> &alloc::vec::Vec<(rustic_core::Id, u32)>
impl core::iter::traits::collect::Extend<rustic_core::IndexPack> for rustic_core::IndexCollector
pub fn rustic_core::IndexCollector::extend<T>(&mut self, iter: T) where T: core::iter::traits::collect::IntoIterator<Item = rustic_core::IndexPack>
impl core::default::Default for rustic_core::IndexCollector
pub fn rustic_core::IndexCollector::default() -> rustic_core::IndexCollector
impl core::fmt::Debug for rustic_core::IndexCollector
pub fn rustic_core::IndexCollector::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::IndexCollector
impl core::marker::Sync for rustic_core::IndexCollector
impl core::marker::Unpin for rustic_core::IndexCollector
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexCollector
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexCollector
impl<T, U> core::convert::Into<U> for rustic_core::IndexCollector where U: core::convert::From<T>
pub fn rustic_core::IndexCollector::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexCollector where U: core::convert::Into<T>
pub type rustic_core::IndexCollector::Error = core::convert::Infallible
pub fn rustic_core::IndexCollector::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexCollector where U: core::convert::TryFrom<T>
pub type rustic_core::IndexCollector::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexCollector::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::IndexCollector where T: 'static + core::marker::Sized
pub fn rustic_core::IndexCollector::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexCollector where T: core::marker::Sized
pub fn rustic_core::IndexCollector::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexCollector where T: core::marker::Sized
pub fn rustic_core::IndexCollector::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexCollector
pub fn rustic_core::IndexCollector::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexCollector
pub type rustic_core::IndexCollector::Init = T
pub const rustic_core::IndexCollector::ALIGN: usize
pub unsafe fn rustic_core::IndexCollector::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexCollector::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexCollector::drop(ptr: usize)
pub unsafe fn rustic_core::IndexCollector::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::IndexCollector
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexCollector
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexCollector
pub type rustic_core::IndexCollector::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexCollector where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexCollector::vzip(self) -> V
pub struct rustic_core::IndexEntry
pub rustic_core::IndexEntry::length: u32
pub rustic_core::IndexEntry::offset: u32
pub rustic_core::IndexEntry::pack: rustic_core::Id
pub rustic_core::IndexEntry::uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>
impl rustic_core::IndexEntry
pub const fn rustic_core::IndexEntry::data_length(&self) -> u32
pub const fn rustic_core::IndexEntry::from_index_blob(blob: &rustic_core::IndexBlob, pack: rustic_core::Id) -> Self
pub fn rustic_core::IndexEntry::read_data<B: rustic_core::DecryptReadBackend>(&self, be: &B) -> rustic_core::RusticResult<bytes::bytes::Bytes>
impl rustic_core::IndexEntry
pub fn rustic_core::IndexEntry::new(blob_type: rustic_core::BlobType, pack: rustic_core::Id, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>) -> rustic_core::IndexEntry
impl core::clone::Clone for rustic_core::IndexEntry
pub fn rustic_core::IndexEntry::clone(&self) -> rustic_core::IndexEntry
impl core::cmp::Eq for rustic_core::IndexEntry
impl core::cmp::PartialEq<rustic_core::IndexEntry> for rustic_core::IndexEntry
pub fn rustic_core::IndexEntry::eq(&self, other: &rustic_core::IndexEntry) -> bool
impl core::fmt::Debug for rustic_core::IndexEntry
pub fn rustic_core::IndexEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::IndexEntry
impl core::marker::StructuralEq for rustic_core::IndexEntry
impl core::marker::StructuralPartialEq for rustic_core::IndexEntry
impl core::marker::Send for rustic_core::IndexEntry
impl core::marker::Sync for rustic_core::IndexEntry
impl core::marker::Unpin for rustic_core::IndexEntry
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexEntry
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexEntry
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::IndexEntry where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::IndexEntry::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::IndexEntry where U: core::convert::From<T>
pub fn rustic_core::IndexEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexEntry where U: core::convert::Into<T>
pub type rustic_core::IndexEntry::Error = core::convert::Infallible
pub fn rustic_core::IndexEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexEntry where U: core::convert::TryFrom<T>
pub type rustic_core::IndexEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexEntry where T: core::clone::Clone
pub type rustic_core::IndexEntry::Owned = T
pub fn rustic_core::IndexEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexEntry where T: 'static + core::marker::Sized
pub fn rustic_core::IndexEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexEntry where T: core::marker::Sized
pub fn rustic_core::IndexEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexEntry where T: core::marker::Sized
pub fn rustic_core::IndexEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexEntry
pub fn rustic_core::IndexEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexEntry
pub type rustic_core::IndexEntry::Init = T
pub const rustic_core::IndexEntry::ALIGN: usize
pub unsafe fn rustic_core::IndexEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexEntry::drop(ptr: usize)
pub unsafe fn rustic_core::IndexEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::IndexEntry
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexEntry
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexEntry
pub type rustic_core::IndexEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexEntry where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexEntry::vzip(self) -> V
pub struct rustic_core::IndexFile
pub rustic_core::IndexFile::packs: alloc::vec::Vec<rustic_core::IndexPack>
pub rustic_core::IndexFile::packs_to_delete: alloc::vec::Vec<rustic_core::IndexPack>
pub rustic_core::IndexFile::supersedes: core::option::Option<alloc::vec::Vec<rustic_core::Id>>
impl rustic_core::IndexFile
pub fn rustic_core::IndexFile::add(&mut self, p: rustic_core::IndexPack, delete: bool)
impl rustic_core::RepoFile for rustic_core::IndexFile
pub const rustic_core::IndexFile::TYPE: rustic_core::FileType
impl core::default::Default for rustic_core::IndexFile
pub fn rustic_core::IndexFile::default() -> rustic_core::IndexFile
impl core::fmt::Debug for rustic_core::IndexFile
pub fn rustic_core::IndexFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::IndexFile
pub fn rustic_core::IndexFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::IndexFile
pub fn rustic_core::IndexFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::IndexFile
impl core::marker::Sync for rustic_core::IndexFile
impl core::marker::Unpin for rustic_core::IndexFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexFile
impl<T, U> core::convert::Into<U> for rustic_core::IndexFile where U: core::convert::From<T>
pub fn rustic_core::IndexFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexFile where U: core::convert::Into<T>
pub type rustic_core::IndexFile::Error = core::convert::Infallible
pub fn rustic_core::IndexFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexFile where U: core::convert::TryFrom<T>
pub type rustic_core::IndexFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::IndexFile where T: 'static + core::marker::Sized
pub fn rustic_core::IndexFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexFile where T: core::marker::Sized
pub fn rustic_core::IndexFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexFile where T: core::marker::Sized
pub fn rustic_core::IndexFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexFile
pub fn rustic_core::IndexFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexFile
pub type rustic_core::IndexFile::Init = T
pub const rustic_core::IndexFile::ALIGN: usize
pub unsafe fn rustic_core::IndexFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexFile::drop(ptr: usize)
pub unsafe fn rustic_core::IndexFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::IndexFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::IndexFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexFile
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexFile
pub type rustic_core::IndexFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexFile::vzip(self) -> V
pub struct rustic_core::IndexPack
pub rustic_core::IndexPack::blobs: alloc::vec::Vec<rustic_core::IndexBlob>
pub rustic_core::IndexPack::id: rustic_core::Id
pub rustic_core::IndexPack::size: core::option::Option<u32>
pub rustic_core::IndexPack::time: core::option::Option<chrono::datetime::DateTime<chrono::offset::local::Local>>
impl rustic_core::IndexPack
pub fn rustic_core::IndexPack::add(&mut self, id: rustic_core::Id, tpe: rustic_core::BlobType, offset: u32, length: u32, uncompressed_length: impl core::convert::Into<core::option::Option<core::num::nonzero::NonZeroU32>>)
pub fn rustic_core::IndexPack::blob_type(&self) -> rustic_core::BlobType
pub fn rustic_core::IndexPack::pack_size(&self) -> u32
impl core::iter::traits::collect::Extend<rustic_core::IndexPack> for rustic_core::IndexCollector
pub fn rustic_core::IndexPack::extend<T>(&mut self, iter: T) where T: core::iter::traits::collect::IntoIterator<Item = rustic_core::IndexPack>
impl core::clone::Clone for rustic_core::IndexPack
pub fn rustic_core::IndexPack::clone(&self) -> rustic_core::IndexPack
impl core::default::Default for rustic_core::IndexPack
pub fn rustic_core::IndexPack::default() -> rustic_core::IndexPack
impl core::fmt::Debug for rustic_core::IndexPack
pub fn rustic_core::IndexPack::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::IndexPack
pub fn rustic_core::IndexPack::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::IndexPack
pub fn rustic_core::IndexPack::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::IndexPack
impl core::marker::Sync for rustic_core::IndexPack
impl core::marker::Unpin for rustic_core::IndexPack
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::IndexPack
impl core::panic::unwind_safe::UnwindSafe for rustic_core::IndexPack
impl<T, U> core::convert::Into<U> for rustic_core::IndexPack where U: core::convert::From<T>
pub fn rustic_core::IndexPack::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::IndexPack where U: core::convert::Into<T>
pub type rustic_core::IndexPack::Error = core::convert::Infallible
pub fn rustic_core::IndexPack::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::IndexPack where U: core::convert::TryFrom<T>
pub type rustic_core::IndexPack::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::IndexPack::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::IndexPack where T: core::clone::Clone
pub type rustic_core::IndexPack::Owned = T
pub fn rustic_core::IndexPack::clone_into(&self, target: &mut T)
pub fn rustic_core::IndexPack::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::IndexPack where T: 'static + core::marker::Sized
pub fn rustic_core::IndexPack::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::IndexPack where T: core::marker::Sized
pub fn rustic_core::IndexPack::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::IndexPack where T: core::marker::Sized
pub fn rustic_core::IndexPack::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::IndexPack
pub fn rustic_core::IndexPack::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::IndexPack
pub type rustic_core::IndexPack::Init = T
pub const rustic_core::IndexPack::ALIGN: usize
pub unsafe fn rustic_core::IndexPack::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::IndexPack::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::IndexPack::drop(ptr: usize)
pub unsafe fn rustic_core::IndexPack::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::IndexPack where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::IndexPack
impl<T> tracing::instrument::WithSubscriber for rustic_core::IndexPack
impl<T> typenum::type_operators::Same<T> for rustic_core::IndexPack
pub type rustic_core::IndexPack::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::IndexPack where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::IndexPack::vzip(self) -> V
pub struct rustic_core::Indexer<BE> where BE: rustic_core::DecryptWriteBackend
impl<BE: rustic_core::DecryptWriteBackend> rustic_core::Indexer<BE>
pub fn rustic_core::Indexer::add(&mut self, pack: rustic_core::IndexPack) -> rustic_core::RusticResult<()>
pub fn rustic_core::Indexer::add_remove(&mut self, pack: rustic_core::IndexPack) -> rustic_core::RusticResult<()>
pub fn rustic_core::Indexer::add_with(&mut self, pack: rustic_core::IndexPack, delete: bool) -> rustic_core::RusticResult<()>
pub fn rustic_core::Indexer::finalize(&self) -> rustic_core::RusticResult<()>
pub fn rustic_core::Indexer::has(&self, id: &rustic_core::Id) -> bool
pub fn rustic_core::Indexer::into_shared(self) -> alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::Indexer<BE>>>
pub fn rustic_core::Indexer::new(be: BE) -> Self
pub fn rustic_core::Indexer::new_unindexed(be: BE) -> Self
pub fn rustic_core::Indexer::reset(&mut self)
pub fn rustic_core::Indexer::save(&self) -> rustic_core::RusticResult<()>
impl<BE> core::fmt::Debug for rustic_core::Indexer<BE> where BE: rustic_core::DecryptWriteBackend + core::fmt::Debug
pub fn rustic_core::Indexer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::Indexer<BE>
impl<BE> core::marker::Sync for rustic_core::Indexer<BE>
impl<BE> core::marker::Unpin for rustic_core::Indexer<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::Indexer<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::Indexer<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::Indexer<BE> where U: core::convert::From<T>
pub fn rustic_core::Indexer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Indexer<BE> where U: core::convert::Into<T>
pub type rustic_core::Indexer::Error = core::convert::Infallible
pub fn rustic_core::Indexer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Indexer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::Indexer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Indexer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::Indexer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::Indexer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Indexer<BE> where T: core::marker::Sized
pub fn rustic_core::Indexer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Indexer<BE> where T: core::marker::Sized
pub fn rustic_core::Indexer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Indexer<BE>
pub fn rustic_core::Indexer::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Indexer<BE>
pub type rustic_core::Indexer::Init = T
pub const rustic_core::Indexer::ALIGN: usize
pub unsafe fn rustic_core::Indexer::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Indexer::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Indexer::drop(ptr: usize)
pub unsafe fn rustic_core::Indexer::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Indexer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::Indexer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::Indexer<BE>
pub type rustic_core::Indexer::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Indexer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Indexer::vzip(self) -> V
pub struct rustic_core::Key(_)
impl rustic_core::Key
pub fn rustic_core::Key::from_keys(encrypt: &[u8], k: &[u8], r: &[u8]) -> Self
pub fn rustic_core::Key::from_slice(key: &[u8]) -> Self
pub fn rustic_core::Key::new() -> Self
pub fn rustic_core::Key::to_keys(&self) -> (alloc::vec::Vec<u8>, alloc::vec::Vec<u8>, alloc::vec::Vec<u8>)
impl CryptoKey for rustic_core::Key
pub type rustic_core::Key::CryptoKeyError = rustic_core::RusticError
pub fn rustic_core::Key::decrypt_data(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::Key::encrypt_data(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
impl core::clone::Clone for rustic_core::Key
pub fn rustic_core::Key::clone(&self) -> rustic_core::Key
impl core::default::Default for rustic_core::Key
pub fn rustic_core::Key::default() -> rustic_core::Key
impl core::fmt::Debug for rustic_core::Key
pub fn rustic_core::Key::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::Key
impl core::marker::Send for rustic_core::Key
impl core::marker::Sync for rustic_core::Key
impl core::marker::Unpin for rustic_core::Key
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Key
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Key
impl<T, U> core::convert::Into<U> for rustic_core::Key where U: core::convert::From<T>
pub fn rustic_core::Key::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Key where U: core::convert::Into<T>
pub type rustic_core::Key::Error = core::convert::Infallible
pub fn rustic_core::Key::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Key where U: core::convert::TryFrom<T>
pub type rustic_core::Key::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Key::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Key where T: core::clone::Clone
pub type rustic_core::Key::Owned = T
pub fn rustic_core::Key::clone_into(&self, target: &mut T)
pub fn rustic_core::Key::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Key where T: 'static + core::marker::Sized
pub fn rustic_core::Key::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Key where T: core::marker::Sized
pub fn rustic_core::Key::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Key where T: core::marker::Sized
pub fn rustic_core::Key::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Key
pub fn rustic_core::Key::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Key
pub type rustic_core::Key::Init = T
pub const rustic_core::Key::ALIGN: usize
pub unsafe fn rustic_core::Key::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Key::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Key::drop(ptr: usize)
pub unsafe fn rustic_core::Key::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Key
impl<T> tracing::instrument::WithSubscriber for rustic_core::Key
impl<T> typenum::type_operators::Same<T> for rustic_core::Key
pub type rustic_core::Key::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Key where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Key::vzip(self) -> V
pub struct rustic_core::KeyFile
impl rustic_core::KeyFile
pub fn rustic_core::KeyFile::generate(key: rustic_core::Key, passwd: &impl core::convert::AsRef<[u8]>, hostname: impl core::convert::Into<core::option::Option<alloc::string::String>>, username: impl core::convert::Into<core::option::Option<alloc::string::String>>, with_created: bool) -> rustic_core::RusticResult<Self>
pub fn rustic_core::KeyFile::kdf_key(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::RusticResult<rustic_core::Key>
pub fn rustic_core::KeyFile::key_from_data(&self, key: &rustic_core::Key) -> rustic_core::RusticResult<rustic_core::Key>
pub fn rustic_core::KeyFile::key_from_password(&self, passwd: &impl core::convert::AsRef<[u8]>) -> rustic_core::RusticResult<rustic_core::Key>
impl core::fmt::Debug for rustic_core::KeyFile
pub fn rustic_core::KeyFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::KeyFile
pub fn rustic_core::KeyFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::KeyFile
pub fn rustic_core::KeyFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::KeyFile
impl core::marker::Sync for rustic_core::KeyFile
impl core::marker::Unpin for rustic_core::KeyFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::KeyFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::KeyFile
impl<T, U> core::convert::Into<U> for rustic_core::KeyFile where U: core::convert::From<T>
pub fn rustic_core::KeyFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::KeyFile where U: core::convert::Into<T>
pub type rustic_core::KeyFile::Error = core::convert::Infallible
pub fn rustic_core::KeyFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::KeyFile where U: core::convert::TryFrom<T>
pub type rustic_core::KeyFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::KeyFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::KeyFile where T: 'static + core::marker::Sized
pub fn rustic_core::KeyFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::KeyFile where T: core::marker::Sized
pub fn rustic_core::KeyFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::KeyFile where T: core::marker::Sized
pub fn rustic_core::KeyFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::KeyFile
pub fn rustic_core::KeyFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::KeyFile
pub type rustic_core::KeyFile::Init = T
pub const rustic_core::KeyFile::ALIGN: usize
pub unsafe fn rustic_core::KeyFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::KeyFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::KeyFile::drop(ptr: usize)
pub unsafe fn rustic_core::KeyFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::KeyFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::KeyFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::KeyFile
impl<T> typenum::type_operators::Same<T> for rustic_core::KeyFile
pub type rustic_core::KeyFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::KeyFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::KeyFile::vzip(self) -> V
pub struct rustic_core::LocalDestination
impl rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::create_dir(&self, item: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::create_special(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::Node) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::get_matching_file(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> core::option::Option<std::fs::File>
pub fn rustic_core::LocalDestination::new(path: &str, create: bool, expect_file: bool) -> rustic_core::RusticResult<Self>
pub fn rustic_core::LocalDestination::read_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, length: u64) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::LocalDestination::remove_dir(&self, dirname: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::remove_file(&self, filename: impl core::convert::AsRef<std::path::Path>) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_extended_attributes(&self, _item: impl core::convert::AsRef<std::path::Path>, _extended_attributes: &[ExtendedAttribute]) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_length(&self, item: impl core::convert::AsRef<std::path::Path>, size: u64) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_permission(&self, _item: impl core::convert::AsRef<std::path::Path>, _node: &rustic_core::Node) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_times(&self, item: impl core::convert::AsRef<std::path::Path>, meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_uid_gid(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::set_user_group(&self, _item: impl core::convert::AsRef<std::path::Path>, _meta: &Metadata) -> rustic_core::RusticResult<()>
pub fn rustic_core::LocalDestination::write_at(&self, item: impl core::convert::AsRef<std::path::Path>, offset: u64, data: &[u8]) -> rustic_core::RusticResult<()>
impl core::clone::Clone for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::clone(&self) -> rustic_core::LocalDestination
impl core::fmt::Debug for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::LocalDestination
impl core::marker::Sync for rustic_core::LocalDestination
impl core::marker::Unpin for rustic_core::LocalDestination
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalDestination
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalDestination
impl<T, U> core::convert::Into<U> for rustic_core::LocalDestination where U: core::convert::From<T>
pub fn rustic_core::LocalDestination::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalDestination where U: core::convert::Into<T>
pub type rustic_core::LocalDestination::Error = core::convert::Infallible
pub fn rustic_core::LocalDestination::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalDestination where U: core::convert::TryFrom<T>
pub type rustic_core::LocalDestination::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalDestination::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalDestination where T: core::clone::Clone
pub type rustic_core::LocalDestination::Owned = T
pub fn rustic_core::LocalDestination::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalDestination::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalDestination where T: 'static + core::marker::Sized
pub fn rustic_core::LocalDestination::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalDestination where T: core::marker::Sized
pub fn rustic_core::LocalDestination::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalDestination where T: core::marker::Sized
pub fn rustic_core::LocalDestination::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalDestination
pub fn rustic_core::LocalDestination::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalDestination
pub type rustic_core::LocalDestination::Init = T
pub const rustic_core::LocalDestination::ALIGN: usize
pub unsafe fn rustic_core::LocalDestination::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalDestination::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalDestination::drop(ptr: usize)
pub unsafe fn rustic_core::LocalDestination::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::LocalDestination
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalDestination
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalDestination
pub type rustic_core::LocalDestination::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalDestination where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalDestination::vzip(self) -> V
pub struct rustic_core::LocalSource
impl rustic_core::LocalSource
pub fn rustic_core::LocalSource::new(save_opts: rustic_core::LocalSourceSaveOptions, filter_opts: rustic_core::LocalSourceFilterOptions, backup_paths: &[impl core::convert::AsRef<std::path::Path>]) -> rustic_core::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::LocalSource
pub type rustic_core::LocalSource::Item = core::result::Result<rustic_core::ReadSourceEntry<OpenFile>, rustic_core::RusticError>
pub fn rustic_core::LocalSource::next(&mut self) -> core::option::Option<Self::Item>
impl rustic_core::ReadSource for rustic_core::LocalSource
pub type rustic_core::LocalSource::Iter = rustic_core::LocalSource
pub type rustic_core::LocalSource::Open = OpenFile
pub type rustic_core::LocalSource::ReadSourceError = rustic_core::RusticError
pub fn rustic_core::LocalSource::entries(self) -> Self::Iter
pub fn rustic_core::LocalSource::size(&self) -> core::result::Result<core::option::Option<u64>, Self::ReadSourceError>
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSource
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSource
impl core::marker::Send for rustic_core::LocalSource
impl core::marker::Sync for rustic_core::LocalSource
impl core::marker::Unpin for rustic_core::LocalSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::LocalSource::IntoIter = I
pub type rustic_core::LocalSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::LocalSource::into_iter(self) -> I
impl<I> encode_unicode::traits::IterExt for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
pub fn rustic_core::LocalSource::to_bytes(self) -> encode_unicode::utf8_iterators::Utf8CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf8_char::Utf8Char>
pub fn rustic_core::LocalSource::to_units(self) -> encode_unicode::utf16_iterators::Utf16CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf16_char::Utf16Char>
pub fn rustic_core::LocalSource::to_utf16chars(self) -> encode_unicode::decoding_iterators::Utf16CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u16>
pub fn rustic_core::LocalSource::to_utf8chars(self) -> encode_unicode::decoding_iterators::Utf8CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u8>
impl<I> pariter::IteratorExt for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::LocalSource where I: core::iter::traits::iterator::Iterator
impl<S, T> indicatif::iter::ProgressIterator for rustic_core::LocalSource where T: core::iter::traits::iterator::Iterator<Item = S>
pub fn rustic_core::LocalSource::progress_with(self, progress: indicatif::progress_bar::ProgressBar) -> indicatif::iter::ProgressBarIter<T>
impl<T, U> core::convert::Into<U> for rustic_core::LocalSource where U: core::convert::From<T>
pub fn rustic_core::LocalSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSource where U: core::convert::Into<T>
pub type rustic_core::LocalSource::Error = core::convert::Infallible
pub fn rustic_core::LocalSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSource where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::LocalSource where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSource where T: core::marker::Sized
pub fn rustic_core::LocalSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSource where T: core::marker::Sized
pub fn rustic_core::LocalSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSource
pub fn rustic_core::LocalSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSource
pub type rustic_core::LocalSource::Init = T
pub const rustic_core::LocalSource::ALIGN: usize
pub unsafe fn rustic_core::LocalSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSource::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::LocalSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::LocalSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSource
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSource
pub type rustic_core::LocalSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSource::vzip(self) -> V
pub struct rustic_core::LocalSourceFilterOptions
impl core::clone::Clone for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::clone(&self) -> rustic_core::LocalSourceFilterOptions
impl core::default::Default for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::default() -> rustic_core::LocalSourceFilterOptions
impl core::fmt::Debug for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'de> serde::de::Deserialize<'de> for rustic_core::LocalSourceFilterOptions where rustic_core::LocalSourceFilterOptions: core::default::Default
pub fn rustic_core::LocalSourceFilterOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::LocalSourceFilterOptions
impl core::marker::Sync for rustic_core::LocalSourceFilterOptions
impl core::marker::Unpin for rustic_core::LocalSourceFilterOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSourceFilterOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSourceFilterOptions
impl<T, U> core::convert::Into<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::From<T>
pub fn rustic_core::LocalSourceFilterOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::Into<T>
pub type rustic_core::LocalSourceFilterOptions::Error = core::convert::Infallible
pub fn rustic_core::LocalSourceFilterOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSourceFilterOptions where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSourceFilterOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSourceFilterOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalSourceFilterOptions where T: core::clone::Clone
pub type rustic_core::LocalSourceFilterOptions::Owned = T
pub fn rustic_core::LocalSourceFilterOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalSourceFilterOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalSourceFilterOptions where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSourceFilterOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceFilterOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSourceFilterOptions
pub fn rustic_core::LocalSourceFilterOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSourceFilterOptions
pub type rustic_core::LocalSourceFilterOptions::Init = T
pub const rustic_core::LocalSourceFilterOptions::ALIGN: usize
pub unsafe fn rustic_core::LocalSourceFilterOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSourceFilterOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSourceFilterOptions::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSourceFilterOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::LocalSourceFilterOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::LocalSourceFilterOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSourceFilterOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSourceFilterOptions
pub type rustic_core::LocalSourceFilterOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSourceFilterOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSourceFilterOptions::vzip(self) -> V
pub struct rustic_core::LocalSourceSaveOptions
impl core::clone::Clone for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::clone(&self) -> rustic_core::LocalSourceSaveOptions
impl core::default::Default for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::default() -> rustic_core::LocalSourceSaveOptions
impl core::fmt::Debug for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::LocalSourceSaveOptions
impl<'de> serde::de::Deserialize<'de> for rustic_core::LocalSourceSaveOptions where rustic_core::LocalSourceSaveOptions: core::default::Default
pub fn rustic_core::LocalSourceSaveOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::LocalSourceSaveOptions
impl core::marker::Sync for rustic_core::LocalSourceSaveOptions
impl core::marker::Unpin for rustic_core::LocalSourceSaveOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::LocalSourceSaveOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::LocalSourceSaveOptions
impl<T, U> core::convert::Into<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::From<T>
pub fn rustic_core::LocalSourceSaveOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::Into<T>
pub type rustic_core::LocalSourceSaveOptions::Error = core::convert::Infallible
pub fn rustic_core::LocalSourceSaveOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::LocalSourceSaveOptions where U: core::convert::TryFrom<T>
pub type rustic_core::LocalSourceSaveOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::LocalSourceSaveOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::LocalSourceSaveOptions where T: core::clone::Clone
pub type rustic_core::LocalSourceSaveOptions::Owned = T
pub fn rustic_core::LocalSourceSaveOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::LocalSourceSaveOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::LocalSourceSaveOptions where T: 'static + core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::LocalSourceSaveOptions where T: core::marker::Sized
pub fn rustic_core::LocalSourceSaveOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::LocalSourceSaveOptions
pub fn rustic_core::LocalSourceSaveOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::LocalSourceSaveOptions
pub type rustic_core::LocalSourceSaveOptions::Init = T
pub const rustic_core::LocalSourceSaveOptions::ALIGN: usize
pub unsafe fn rustic_core::LocalSourceSaveOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::LocalSourceSaveOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::LocalSourceSaveOptions::drop(ptr: usize)
pub unsafe fn rustic_core::LocalSourceSaveOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::LocalSourceSaveOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::LocalSourceSaveOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::LocalSourceSaveOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::LocalSourceSaveOptions
pub type rustic_core::LocalSourceSaveOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::LocalSourceSaveOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::LocalSourceSaveOptions::vzip(self) -> V
pub struct rustic_core::Node
pub rustic_core::Node::content: core::option::Option<alloc::vec::Vec<rustic_core::Id>>
pub rustic_core::Node::meta: Metadata
pub rustic_core::Node::name: alloc::string::String
pub rustic_core::Node::node_type: rustic_core::NodeType
pub rustic_core::Node::subtree: core::option::Option<rustic_core::Id>
impl rustic_core::Node
pub const fn rustic_core::Node::is_dir(&self) -> bool
pub const fn rustic_core::Node::is_file(&self) -> bool
pub const fn rustic_core::Node::is_special(&self) -> bool
pub fn rustic_core::Node::name(&self) -> std::ffi::os_str::OsString
pub fn rustic_core::Node::new_node(name: &std::ffi::os_str::OsStr, node_type: rustic_core::NodeType, meta: Metadata) -> Self
impl rustic_core::Node
pub fn rustic_core::Node::new(name: alloc::string::String, node_type: rustic_core::NodeType, meta: Metadata, content: core::option::Option<alloc::vec::Vec<rustic_core::Id>>, subtree: core::option::Option<rustic_core::Id>) -> rustic_core::Node
impl core::clone::Clone for rustic_core::Node
pub fn rustic_core::Node::clone(&self) -> rustic_core::Node
impl core::cmp::Eq for rustic_core::Node
impl core::cmp::PartialEq<rustic_core::Node> for rustic_core::Node
pub fn rustic_core::Node::eq(&self, other: &rustic_core::Node) -> bool
impl core::default::Default for rustic_core::Node
pub fn rustic_core::Node::default() -> rustic_core::Node
impl core::fmt::Debug for rustic_core::Node
pub fn rustic_core::Node::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::Node
impl core::marker::StructuralPartialEq for rustic_core::Node
impl serde::ser::Serialize for rustic_core::Node
pub fn rustic_core::Node::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::Node
pub fn rustic_core::Node::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::Node
impl core::marker::Sync for rustic_core::Node
impl core::marker::Unpin for rustic_core::Node
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Node
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Node
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::Node where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::Node::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::Node where U: core::convert::From<T>
pub fn rustic_core::Node::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Node where U: core::convert::Into<T>
pub type rustic_core::Node::Error = core::convert::Infallible
pub fn rustic_core::Node::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Node where U: core::convert::TryFrom<T>
pub type rustic_core::Node::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Node::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Node where T: core::clone::Clone
pub type rustic_core::Node::Owned = T
pub fn rustic_core::Node::clone_into(&self, target: &mut T)
pub fn rustic_core::Node::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Node where T: 'static + core::marker::Sized
pub fn rustic_core::Node::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Node where T: core::marker::Sized
pub fn rustic_core::Node::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Node where T: core::marker::Sized
pub fn rustic_core::Node::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Node
pub fn rustic_core::Node::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Node
pub type rustic_core::Node::Init = T
pub const rustic_core::Node::ALIGN: usize
pub unsafe fn rustic_core::Node::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Node::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Node::drop(ptr: usize)
pub unsafe fn rustic_core::Node::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::Node where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::Node
impl<T> tracing::instrument::WithSubscriber for rustic_core::Node
impl<T> typenum::type_operators::Same<T> for rustic_core::Node
pub type rustic_core::Node::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Node where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Node::vzip(self) -> V
pub struct rustic_core::NodeStreamer<BE> where BE: rustic_core::IndexedBackend
impl<BE> rustic_core::NodeStreamer<BE> where BE: rustic_core::IndexedBackend
pub fn rustic_core::NodeStreamer::new(be: BE, node: &rustic_core::Node) -> rustic_core::RusticResult<Self>
pub fn rustic_core::NodeStreamer::new_with_glob(be: BE, node: &rustic_core::Node, opts: &rustic_core::TreeStreamerOptions) -> rustic_core::RusticResult<Self>
impl<BE> core::iter::traits::iterator::Iterator for rustic_core::NodeStreamer<BE> where BE: rustic_core::IndexedBackend
pub type rustic_core::NodeStreamer::Item = core::result::Result<(std::path::PathBuf, rustic_core::Node), rustic_core::RusticError>
pub fn rustic_core::NodeStreamer::next(&mut self) -> core::option::Option<Self::Item>
impl<BE> core::fmt::Debug for rustic_core::NodeStreamer<BE> where BE: rustic_core::IndexedBackend + core::fmt::Debug
pub fn rustic_core::NodeStreamer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<BE> core::marker::Send for rustic_core::NodeStreamer<BE>
impl<BE> core::marker::Sync for rustic_core::NodeStreamer<BE>
impl<BE> core::marker::Unpin for rustic_core::NodeStreamer<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::NodeStreamer<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::NodeStreamer<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
pub type rustic_core::NodeStreamer::IntoIter = I
pub type rustic_core::NodeStreamer::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::NodeStreamer::into_iter(self) -> I
impl<I> encode_unicode::traits::IterExt for rustic_core::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
pub fn rustic_core::NodeStreamer::to_bytes(self) -> encode_unicode::utf8_iterators::Utf8CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf8_char::Utf8Char>
pub fn rustic_core::NodeStreamer::to_units(self) -> encode_unicode::utf16_iterators::Utf16CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf16_char::Utf16Char>
pub fn rustic_core::NodeStreamer::to_utf16chars(self) -> encode_unicode::decoding_iterators::Utf16CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u16>
pub fn rustic_core::NodeStreamer::to_utf8chars(self) -> encode_unicode::decoding_iterators::Utf8CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u8>
impl<I> pariter::IteratorExt for rustic_core::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::NodeStreamer<BE> where I: core::iter::traits::iterator::Iterator
impl<S, T> indicatif::iter::ProgressIterator for rustic_core::NodeStreamer<BE> where T: core::iter::traits::iterator::Iterator<Item = S>
pub fn rustic_core::NodeStreamer::progress_with(self, progress: indicatif::progress_bar::ProgressBar) -> indicatif::iter::ProgressBarIter<T>
impl<T, U> core::convert::Into<U> for rustic_core::NodeStreamer<BE> where U: core::convert::From<T>
pub fn rustic_core::NodeStreamer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::NodeStreamer<BE> where U: core::convert::Into<T>
pub type rustic_core::NodeStreamer::Error = core::convert::Infallible
pub fn rustic_core::NodeStreamer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::NodeStreamer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::NodeStreamer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::NodeStreamer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::NodeStreamer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::NodeStreamer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::NodeStreamer<BE> where T: core::marker::Sized
pub fn rustic_core::NodeStreamer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::NodeStreamer<BE> where T: core::marker::Sized
pub fn rustic_core::NodeStreamer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::NodeStreamer<BE>
pub fn rustic_core::NodeStreamer::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::NodeStreamer<BE>
pub type rustic_core::NodeStreamer::Init = T
pub const rustic_core::NodeStreamer::ALIGN: usize
pub unsafe fn rustic_core::NodeStreamer::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::NodeStreamer::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::NodeStreamer::drop(ptr: usize)
pub unsafe fn rustic_core::NodeStreamer::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::NodeStreamer<BE> where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::NodeStreamer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::NodeStreamer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::NodeStreamer<BE>
pub type rustic_core::NodeStreamer::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::NodeStreamer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::NodeStreamer::vzip(self) -> V
pub struct rustic_core::OpenRepository
pub rustic_core::OpenRepository::be: HotColdBackend<ChooseBackend>
pub rustic_core::OpenRepository::be_hot: core::option::Option<ChooseBackend>
pub rustic_core::OpenRepository::cache: core::option::Option<rustic_core::Cache>
pub rustic_core::OpenRepository::config: rustic_core::ConfigFile
pub rustic_core::OpenRepository::dbe: rustic_core::DecryptBackend<CachedBackend<HotColdBackend<ChooseBackend>>, rustic_core::Key>
pub rustic_core::OpenRepository::key: rustic_core::Key
pub rustic_core::OpenRepository::name: alloc::string::String
pub rustic_core::OpenRepository::opts: rustic_core::RepositoryOptions
impl core::fmt::Debug for rustic_core::OpenRepository
pub fn rustic_core::OpenRepository::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::OpenRepository
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::OpenRepository
impl core::marker::Send for rustic_core::OpenRepository
impl core::marker::Sync for rustic_core::OpenRepository
impl core::marker::Unpin for rustic_core::OpenRepository
impl<T, U> core::convert::Into<U> for rustic_core::OpenRepository where U: core::convert::From<T>
pub fn rustic_core::OpenRepository::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::OpenRepository where U: core::convert::Into<T>
pub type rustic_core::OpenRepository::Error = core::convert::Infallible
pub fn rustic_core::OpenRepository::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::OpenRepository where U: core::convert::TryFrom<T>
pub type rustic_core::OpenRepository::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::OpenRepository::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::OpenRepository where T: 'static + core::marker::Sized
pub fn rustic_core::OpenRepository::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::OpenRepository where T: core::marker::Sized
pub fn rustic_core::OpenRepository::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::OpenRepository where T: core::marker::Sized
pub fn rustic_core::OpenRepository::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::OpenRepository
pub fn rustic_core::OpenRepository::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::OpenRepository
pub type rustic_core::OpenRepository::Init = T
pub const rustic_core::OpenRepository::ALIGN: usize
pub unsafe fn rustic_core::OpenRepository::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::OpenRepository::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::OpenRepository::drop(ptr: usize)
pub unsafe fn rustic_core::OpenRepository::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::OpenRepository
impl<T> tracing::instrument::WithSubscriber for rustic_core::OpenRepository
impl<T> typenum::type_operators::Same<T> for rustic_core::OpenRepository
pub type rustic_core::OpenRepository::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::OpenRepository where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::OpenRepository::vzip(self) -> V
pub struct rustic_core::PackHeader(_)
impl rustic_core::PackHeader
pub fn rustic_core::PackHeader::from_binary(pack: &[u8]) -> rustic_core::RusticResult<Self>
pub fn rustic_core::PackHeader::from_file(be: &impl rustic_core::DecryptReadBackend, id: rustic_core::Id, size_hint: impl core::convert::Into<core::option::Option<u32>>, pack_size: u32) -> rustic_core::RusticResult<Self>
pub fn rustic_core::PackHeader::into_blobs(self) -> alloc::vec::Vec<rustic_core::IndexBlob>
impl core::clone::Clone for rustic_core::PackHeader
pub fn rustic_core::PackHeader::clone(&self) -> rustic_core::PackHeader
impl core::fmt::Debug for rustic_core::PackHeader
pub fn rustic_core::PackHeader::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::PackHeader
impl core::marker::Sync for rustic_core::PackHeader
impl core::marker::Unpin for rustic_core::PackHeader
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PackHeader
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PackHeader
impl<T, U> core::convert::Into<U> for rustic_core::PackHeader where U: core::convert::From<T>
pub fn rustic_core::PackHeader::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PackHeader where U: core::convert::Into<T>
pub type rustic_core::PackHeader::Error = core::convert::Infallible
pub fn rustic_core::PackHeader::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PackHeader where U: core::convert::TryFrom<T>
pub type rustic_core::PackHeader::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PackHeader::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PackHeader where T: core::clone::Clone
pub type rustic_core::PackHeader::Owned = T
pub fn rustic_core::PackHeader::clone_into(&self, target: &mut T)
pub fn rustic_core::PackHeader::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PackHeader where T: 'static + core::marker::Sized
pub fn rustic_core::PackHeader::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PackHeader where T: core::marker::Sized
pub fn rustic_core::PackHeader::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PackHeader where T: core::marker::Sized
pub fn rustic_core::PackHeader::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PackHeader
pub fn rustic_core::PackHeader::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PackHeader
pub type rustic_core::PackHeader::Init = T
pub const rustic_core::PackHeader::ALIGN: usize
pub unsafe fn rustic_core::PackHeader::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PackHeader::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PackHeader::drop(ptr: usize)
pub unsafe fn rustic_core::PackHeader::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PackHeader
impl<T> tracing::instrument::WithSubscriber for rustic_core::PackHeader
impl<T> typenum::type_operators::Same<T> for rustic_core::PackHeader
pub type rustic_core::PackHeader::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PackHeader where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PackHeader::vzip(self) -> V
pub struct rustic_core::PackHeaderLength(_)
impl rustic_core::PackHeaderLength
pub fn rustic_core::PackHeaderLength::from_binary(data: &[u8]) -> rustic_core::RusticResult<Self>
pub const fn rustic_core::PackHeaderLength::from_u32(len: u32) -> Self
pub fn rustic_core::PackHeaderLength::to_binary(&self) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub const fn rustic_core::PackHeaderLength::to_u32(&self) -> u32
impl binrw::meta::ReadEndian for rustic_core::PackHeaderLength
pub const rustic_core::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::meta::WriteEndian for rustic_core::PackHeaderLength
pub const rustic_core::PackHeaderLength::ENDIAN: binrw::meta::EndianKind
impl binrw::binread::BinRead for rustic_core::PackHeaderLength
pub type rustic_core::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::PackHeaderLength::read_options<R: std::io::Read + std::io::Seek>(__binrw_generated_var_reader: &mut R, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<Self>
impl binrw::binwrite::BinWrite for rustic_core::PackHeaderLength
pub type rustic_core::PackHeaderLength::Args<'__binrw_generated_args_lifetime> = ()
pub fn rustic_core::PackHeaderLength::write_options<W: std::io::Write + std::io::Seek>(&self, __binrw_generated_var_writer: &mut W, __binrw_generated_var_endian: binrw::endian::Endian, __binrw_generated_var_arguments: Self::Args) -> binrw::BinResult<()>
impl core::clone::Clone for rustic_core::PackHeaderLength
pub fn rustic_core::PackHeaderLength::clone(&self) -> rustic_core::PackHeaderLength
impl core::fmt::Debug for rustic_core::PackHeaderLength
pub fn rustic_core::PackHeaderLength::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::PackHeaderLength
impl core::marker::Send for rustic_core::PackHeaderLength
impl core::marker::Sync for rustic_core::PackHeaderLength
impl core::marker::Unpin for rustic_core::PackHeaderLength
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PackHeaderLength
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PackHeaderLength
impl<T, U> core::convert::Into<U> for rustic_core::PackHeaderLength where U: core::convert::From<T>
pub fn rustic_core::PackHeaderLength::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PackHeaderLength where U: core::convert::Into<T>
pub type rustic_core::PackHeaderLength::Error = core::convert::Infallible
pub fn rustic_core::PackHeaderLength::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PackHeaderLength where U: core::convert::TryFrom<T>
pub type rustic_core::PackHeaderLength::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PackHeaderLength::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PackHeaderLength where T: core::clone::Clone
pub type rustic_core::PackHeaderLength::Owned = T
pub fn rustic_core::PackHeaderLength::clone_into(&self, target: &mut T)
pub fn rustic_core::PackHeaderLength::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PackHeaderLength where T: 'static + core::marker::Sized
pub fn rustic_core::PackHeaderLength::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::PackHeaderLength::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PackHeaderLength where T: core::marker::Sized
pub fn rustic_core::PackHeaderLength::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PackHeaderLength
pub fn rustic_core::PackHeaderLength::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PackHeaderLength
pub type rustic_core::PackHeaderLength::Init = T
pub const rustic_core::PackHeaderLength::ALIGN: usize
pub unsafe fn rustic_core::PackHeaderLength::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PackHeaderLength::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PackHeaderLength::drop(ptr: usize)
pub unsafe fn rustic_core::PackHeaderLength::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PackHeaderLength
impl<T> tracing::instrument::WithSubscriber for rustic_core::PackHeaderLength
impl<T> typenum::type_operators::Same<T> for rustic_core::PackHeaderLength
pub type rustic_core::PackHeaderLength::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PackHeaderLength where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PackHeaderLength::vzip(self) -> V
pub struct rustic_core::PackHeaderRef<'a>(_)
impl<'a> rustic_core::PackHeaderRef<'a>
pub fn rustic_core::PackHeaderRef::from_index_pack(pack: &'a rustic_core::IndexPack) -> Self
pub fn rustic_core::PackHeaderRef::pack_size(&self) -> u32
pub fn rustic_core::PackHeaderRef::size(&self) -> u32
pub fn rustic_core::PackHeaderRef::to_binary(&self) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
impl<'a> core::clone::Clone for rustic_core::PackHeaderRef<'a>
pub fn rustic_core::PackHeaderRef::clone(&self) -> rustic_core::PackHeaderRef<'a>
impl<'a> core::fmt::Debug for rustic_core::PackHeaderRef<'a>
pub fn rustic_core::PackHeaderRef::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'a> core::marker::Send for rustic_core::PackHeaderRef<'a>
impl<'a> core::marker::Sync for rustic_core::PackHeaderRef<'a>
impl<'a> core::marker::Unpin for rustic_core::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::RefUnwindSafe for rustic_core::PackHeaderRef<'a>
impl<'a> core::panic::unwind_safe::UnwindSafe for rustic_core::PackHeaderRef<'a>
impl<T, U> core::convert::Into<U> for rustic_core::PackHeaderRef<'a> where U: core::convert::From<T>
pub fn rustic_core::PackHeaderRef::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PackHeaderRef<'a> where U: core::convert::Into<T>
pub type rustic_core::PackHeaderRef::Error = core::convert::Infallible
pub fn rustic_core::PackHeaderRef::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PackHeaderRef<'a> where U: core::convert::TryFrom<T>
pub type rustic_core::PackHeaderRef::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PackHeaderRef::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PackHeaderRef<'a> where T: core::clone::Clone
pub type rustic_core::PackHeaderRef::Owned = T
pub fn rustic_core::PackHeaderRef::clone_into(&self, target: &mut T)
pub fn rustic_core::PackHeaderRef::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PackHeaderRef<'a> where T: 'static + core::marker::Sized
pub fn rustic_core::PackHeaderRef::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::PackHeaderRef::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PackHeaderRef<'a> where T: core::marker::Sized
pub fn rustic_core::PackHeaderRef::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PackHeaderRef<'a>
pub fn rustic_core::PackHeaderRef::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PackHeaderRef<'a>
pub type rustic_core::PackHeaderRef::Init = T
pub const rustic_core::PackHeaderRef::ALIGN: usize
pub unsafe fn rustic_core::PackHeaderRef::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PackHeaderRef::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PackHeaderRef::drop(ptr: usize)
pub unsafe fn rustic_core::PackHeaderRef::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PackHeaderRef<'a>
impl<T> tracing::instrument::WithSubscriber for rustic_core::PackHeaderRef<'a>
impl<T> typenum::type_operators::Same<T> for rustic_core::PackHeaderRef<'a>
pub type rustic_core::PackHeaderRef::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PackHeaderRef<'a> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PackHeaderRef::vzip(self) -> V
pub struct rustic_core::PackSizer
impl rustic_core::PackSizer
pub fn rustic_core::PackSizer::from_config(config: &rustic_core::ConfigFile, blob_type: rustic_core::BlobType, current_size: u64) -> Self
pub fn rustic_core::PackSizer::pack_size(&self) -> u32
pub fn rustic_core::PackSizer::size_ok(&self, size: u32) -> bool
impl core::clone::Clone for rustic_core::PackSizer
pub fn rustic_core::PackSizer::clone(&self) -> rustic_core::PackSizer
impl core::fmt::Debug for rustic_core::PackSizer
pub fn rustic_core::PackSizer::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::PackSizer
impl core::marker::Send for rustic_core::PackSizer
impl core::marker::Sync for rustic_core::PackSizer
impl core::marker::Unpin for rustic_core::PackSizer
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PackSizer
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PackSizer
impl<T, U> core::convert::Into<U> for rustic_core::PackSizer where U: core::convert::From<T>
pub fn rustic_core::PackSizer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PackSizer where U: core::convert::Into<T>
pub type rustic_core::PackSizer::Error = core::convert::Infallible
pub fn rustic_core::PackSizer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PackSizer where U: core::convert::TryFrom<T>
pub type rustic_core::PackSizer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PackSizer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PackSizer where T: core::clone::Clone
pub type rustic_core::PackSizer::Owned = T
pub fn rustic_core::PackSizer::clone_into(&self, target: &mut T)
pub fn rustic_core::PackSizer::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::PackSizer where T: 'static + core::marker::Sized
pub fn rustic_core::PackSizer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PackSizer where T: core::marker::Sized
pub fn rustic_core::PackSizer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PackSizer where T: core::marker::Sized
pub fn rustic_core::PackSizer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PackSizer
pub fn rustic_core::PackSizer::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PackSizer
pub type rustic_core::PackSizer::Init = T
pub const rustic_core::PackSizer::ALIGN: usize
pub unsafe fn rustic_core::PackSizer::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PackSizer::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PackSizer::drop(ptr: usize)
pub unsafe fn rustic_core::PackSizer::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PackSizer
impl<T> tracing::instrument::WithSubscriber for rustic_core::PackSizer
impl<T> typenum::type_operators::Same<T> for rustic_core::PackSizer
pub type rustic_core::PackSizer::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PackSizer where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PackSizer::vzip(self) -> V
pub struct rustic_core::Packer<BE: rustic_core::DecryptWriteBackend>
impl<BE: rustic_core::DecryptWriteBackend> rustic_core::Packer<BE>
pub fn rustic_core::Packer::add(&self, data: bytes::bytes::Bytes, id: rustic_core::Id) -> rustic_core::RusticResult<()>
pub fn rustic_core::Packer::finalize(self) -> rustic_core::RusticResult<PackerStats>
pub fn rustic_core::Packer::new(be: BE, blob_type: rustic_core::BlobType, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::Indexer<BE>>>, config: &rustic_core::ConfigFile, total_size: u64) -> rustic_core::RusticResult<Self>
impl<BE: core::clone::Clone + rustic_core::DecryptWriteBackend> core::clone::Clone for rustic_core::Packer<BE>
pub fn rustic_core::Packer::clone(&self) -> rustic_core::Packer<BE>
impl<BE> core::marker::Send for rustic_core::Packer<BE>
impl<BE> core::marker::Sync for rustic_core::Packer<BE>
impl<BE> core::marker::Unpin for rustic_core::Packer<BE>
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::Packer<BE>
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::Packer<BE>
impl<T, U> core::convert::Into<U> for rustic_core::Packer<BE> where U: core::convert::From<T>
pub fn rustic_core::Packer::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Packer<BE> where U: core::convert::Into<T>
pub type rustic_core::Packer::Error = core::convert::Infallible
pub fn rustic_core::Packer::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Packer<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::Packer::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Packer::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Packer<BE> where T: core::clone::Clone
pub type rustic_core::Packer::Owned = T
pub fn rustic_core::Packer::clone_into(&self, target: &mut T)
pub fn rustic_core::Packer::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Packer<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::Packer::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Packer<BE> where T: core::marker::Sized
pub fn rustic_core::Packer::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Packer<BE> where T: core::marker::Sized
pub fn rustic_core::Packer::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Packer<BE>
pub fn rustic_core::Packer::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Packer<BE>
pub type rustic_core::Packer::Init = T
pub const rustic_core::Packer::ALIGN: usize
pub unsafe fn rustic_core::Packer::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Packer::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Packer::drop(ptr: usize)
pub unsafe fn rustic_core::Packer::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Packer<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::Packer<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::Packer<BE>
pub type rustic_core::Packer::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Packer<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Packer::vzip(self) -> V
pub struct rustic_core::PathList(_)
impl rustic_core::PathList
pub fn rustic_core::PathList::from_string(sources: &str, sanitize: bool) -> rustic_core::RusticResult<Self>
pub fn rustic_core::PathList::from_strings<I>(source: I, sanitize: bool) -> rustic_core::RusticResult<Self> where I: core::iter::traits::collect::IntoIterator, <I as core::iter::traits::collect::IntoIterator>::Item: core::convert::AsRef<str>
pub fn rustic_core::PathList::is_empty(&self) -> bool
pub fn rustic_core::PathList::len(&self) -> usize
pub fn rustic_core::PathList::paths(&self) -> alloc::vec::Vec<std::path::PathBuf>
impl core::fmt::Display for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::clone::Clone for rustic_core::PathList
pub fn rustic_core::PathList::clone(&self) -> rustic_core::PathList
impl core::cmp::Eq for rustic_core::PathList
impl core::cmp::Ord for rustic_core::PathList
pub fn rustic_core::PathList::cmp(&self, other: &rustic_core::PathList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::eq(&self, other: &rustic_core::PathList) -> bool
impl core::cmp::PartialOrd<rustic_core::PathList> for rustic_core::PathList
pub fn rustic_core::PathList::partial_cmp(&self, other: &rustic_core::PathList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::PathList
pub fn rustic_core::PathList::default() -> rustic_core::PathList
impl core::fmt::Debug for rustic_core::PathList
pub fn rustic_core::PathList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::PathList
impl core::marker::StructuralPartialEq for rustic_core::PathList
impl core::marker::Send for rustic_core::PathList
impl core::marker::Sync for rustic_core::PathList
impl core::marker::Unpin for rustic_core::PathList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::PathList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::PathList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::PathList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::PathList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::PathList where U: core::convert::From<T>
pub fn rustic_core::PathList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::PathList where U: core::convert::Into<T>
pub type rustic_core::PathList::Error = core::convert::Infallible
pub fn rustic_core::PathList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::PathList where U: core::convert::TryFrom<T>
pub type rustic_core::PathList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::PathList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::PathList where T: core::clone::Clone
pub type rustic_core::PathList::Owned = T
pub fn rustic_core::PathList::clone_into(&self, target: &mut T)
pub fn rustic_core::PathList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::PathList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::PathList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::PathList where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::PathList::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::PathList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::PathList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::PathList where T: 'static + core::marker::Sized
pub fn rustic_core::PathList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::PathList where T: core::marker::Sized
pub fn rustic_core::PathList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::PathList
pub fn rustic_core::PathList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::PathList
pub type rustic_core::PathList::Init = T
pub const rustic_core::PathList::ALIGN: usize
pub unsafe fn rustic_core::PathList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::PathList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::PathList::drop(ptr: usize)
pub unsafe fn rustic_core::PathList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::PathList
impl<T> tracing::instrument::WithSubscriber for rustic_core::PathList
impl<T> typenum::type_operators::Same<T> for rustic_core::PathList
pub type rustic_core::PathList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::PathList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::PathList::vzip(self) -> V
pub struct rustic_core::ReadSourceEntry<O>
pub rustic_core::ReadSourceEntry::node: rustic_core::Node
pub rustic_core::ReadSourceEntry::open: core::option::Option<O>
pub rustic_core::ReadSourceEntry::path: std::path::PathBuf
impl<O: core::clone::Clone> core::clone::Clone for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry::clone(&self) -> rustic_core::ReadSourceEntry<O>
impl<O: core::fmt::Debug> core::fmt::Debug for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<O> core::marker::Send for rustic_core::ReadSourceEntry<O> where O: core::marker::Send
impl<O> core::marker::Sync for rustic_core::ReadSourceEntry<O> where O: core::marker::Sync
impl<O> core::marker::Unpin for rustic_core::ReadSourceEntry<O> where O: core::marker::Unpin
impl<O> core::panic::unwind_safe::RefUnwindSafe for rustic_core::ReadSourceEntry<O> where O: core::panic::unwind_safe::RefUnwindSafe
impl<O> core::panic::unwind_safe::UnwindSafe for rustic_core::ReadSourceEntry<O> where O: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::From<T>
pub fn rustic_core::ReadSourceEntry::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::Into<T>
pub type rustic_core::ReadSourceEntry::Error = core::convert::Infallible
pub fn rustic_core::ReadSourceEntry::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::ReadSourceEntry<O> where U: core::convert::TryFrom<T>
pub type rustic_core::ReadSourceEntry::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::ReadSourceEntry::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::ReadSourceEntry<O> where T: core::clone::Clone
pub type rustic_core::ReadSourceEntry::Owned = T
pub fn rustic_core::ReadSourceEntry::clone_into(&self, target: &mut T)
pub fn rustic_core::ReadSourceEntry::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::ReadSourceEntry<O> where T: 'static + core::marker::Sized
pub fn rustic_core::ReadSourceEntry::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::ReadSourceEntry::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::ReadSourceEntry<O> where T: core::marker::Sized
pub fn rustic_core::ReadSourceEntry::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::ReadSourceEntry<O>
pub fn rustic_core::ReadSourceEntry::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::ReadSourceEntry<O>
pub type rustic_core::ReadSourceEntry::Init = T
pub const rustic_core::ReadSourceEntry::ALIGN: usize
pub unsafe fn rustic_core::ReadSourceEntry::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::ReadSourceEntry::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::ReadSourceEntry::drop(ptr: usize)
pub unsafe fn rustic_core::ReadSourceEntry::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::ReadSourceEntry<O>
impl<T> tracing::instrument::WithSubscriber for rustic_core::ReadSourceEntry<O>
impl<T> typenum::type_operators::Same<T> for rustic_core::ReadSourceEntry<O>
pub type rustic_core::ReadSourceEntry::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::ReadSourceEntry<O> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::ReadSourceEntry::vzip(self) -> V
pub struct rustic_core::Repacker<BE> where BE: rustic_core::DecryptFullBackend
impl<BE: rustic_core::DecryptFullBackend> rustic_core::Repacker<BE>
pub fn rustic_core::Repacker::add(&self, pack_id: &rustic_core::Id, blob: &rustic_core::IndexBlob) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repacker::add_fast(&self, pack_id: &rustic_core::Id, blob: &rustic_core::IndexBlob) -> rustic_core::RusticResult<()>
pub fn rustic_core::Repacker::finalize(self) -> rustic_core::RusticResult<PackerStats>
pub fn rustic_core::Repacker::new(be: BE, blob_type: rustic_core::BlobType, indexer: alloc::sync::Arc<std::sync::rwlock::RwLock<rustic_core::Indexer<BE>>>, config: &rustic_core::ConfigFile, total_size: u64) -> rustic_core::RusticResult<Self>
impl<BE> core::marker::Send for rustic_core::Repacker<BE>
impl<BE> core::marker::Sync for rustic_core::Repacker<BE>
impl<BE> core::marker::Unpin for rustic_core::Repacker<BE> where BE: core::marker::Unpin
impl<BE> core::panic::unwind_safe::RefUnwindSafe for rustic_core::Repacker<BE> where BE: core::panic::unwind_safe::RefUnwindSafe
impl<BE> core::panic::unwind_safe::UnwindSafe for rustic_core::Repacker<BE> where BE: core::panic::unwind_safe::UnwindSafe
impl<T, U> core::convert::Into<U> for rustic_core::Repacker<BE> where U: core::convert::From<T>
pub fn rustic_core::Repacker::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Repacker<BE> where U: core::convert::Into<T>
pub type rustic_core::Repacker::Error = core::convert::Infallible
pub fn rustic_core::Repacker::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Repacker<BE> where U: core::convert::TryFrom<T>
pub type rustic_core::Repacker::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Repacker::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::Repacker<BE> where T: 'static + core::marker::Sized
pub fn rustic_core::Repacker::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Repacker<BE> where T: core::marker::Sized
pub fn rustic_core::Repacker::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Repacker<BE> where T: core::marker::Sized
pub fn rustic_core::Repacker::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Repacker<BE>
pub fn rustic_core::Repacker::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Repacker<BE>
pub type rustic_core::Repacker::Init = T
pub const rustic_core::Repacker::ALIGN: usize
pub unsafe fn rustic_core::Repacker::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Repacker::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Repacker::drop(ptr: usize)
pub unsafe fn rustic_core::Repacker::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Repacker<BE>
impl<T> tracing::instrument::WithSubscriber for rustic_core::Repacker<BE>
impl<T> typenum::type_operators::Same<T> for rustic_core::Repacker<BE>
pub type rustic_core::Repacker::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Repacker<BE> where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Repacker::vzip(self) -> V
pub struct rustic_core::RepoInfo
pub rustic_core::RepoInfo::count: u64
pub rustic_core::RepoInfo::data_size: u64
pub rustic_core::RepoInfo::max_pack_size: u64
pub rustic_core::RepoInfo::min_pack_size: u64
pub rustic_core::RepoInfo::pack_count: u64
pub rustic_core::RepoInfo::size: u64
pub rustic_core::RepoInfo::total_pack_size: u64
impl rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::add(&mut self, ie: rustic_core::IndexEntry)
pub fn rustic_core::RepoInfo::add_pack(&mut self, ip: &rustic_core::IndexPack)
impl core::ops::arith::Add<rustic_core::RepoInfo> for rustic_core::RepoInfo
pub type rustic_core::RepoInfo::Output = rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::add(self, rhs: rustic_core::RepoInfo) -> rustic_core::RepoInfo
impl core::clone::Clone for rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::clone(&self) -> rustic_core::RepoInfo
impl core::default::Default for rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::default() -> rustic_core::RepoInfo
impl core::fmt::Debug for rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RepoInfo
impl core::marker::Send for rustic_core::RepoInfo
impl core::marker::Sync for rustic_core::RepoInfo
impl core::marker::Unpin for rustic_core::RepoInfo
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepoInfo
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepoInfo
impl<T, U> core::convert::Into<U> for rustic_core::RepoInfo where U: core::convert::From<T>
pub fn rustic_core::RepoInfo::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepoInfo where U: core::convert::Into<T>
pub type rustic_core::RepoInfo::Error = core::convert::Infallible
pub fn rustic_core::RepoInfo::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepoInfo where U: core::convert::TryFrom<T>
pub type rustic_core::RepoInfo::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepoInfo::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepoInfo where T: core::clone::Clone
pub type rustic_core::RepoInfo::Owned = T
pub fn rustic_core::RepoInfo::clone_into(&self, target: &mut T)
pub fn rustic_core::RepoInfo::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepoInfo where T: 'static + core::marker::Sized
pub fn rustic_core::RepoInfo::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepoInfo where T: core::marker::Sized
pub fn rustic_core::RepoInfo::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepoInfo where T: core::marker::Sized
pub fn rustic_core::RepoInfo::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepoInfo
pub fn rustic_core::RepoInfo::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepoInfo
pub type rustic_core::RepoInfo::Init = T
pub const rustic_core::RepoInfo::ALIGN: usize
pub unsafe fn rustic_core::RepoInfo::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepoInfo::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepoInfo::drop(ptr: usize)
pub unsafe fn rustic_core::RepoInfo::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RepoInfo
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepoInfo
impl<T> typenum::type_operators::Same<T> for rustic_core::RepoInfo
pub type rustic_core::RepoInfo::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepoInfo where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepoInfo::vzip(self) -> V
pub struct rustic_core::Repository
pub rustic_core::Repository::be: HotColdBackend<ChooseBackend>
pub rustic_core::Repository::be_hot: core::option::Option<ChooseBackend>
impl rustic_core::Repository
pub fn rustic_core::Repository::new(opts: &rustic_core::RepositoryOptions) -> rustic_core::RusticResult<Self>
pub fn rustic_core::Repository::open(self) -> rustic_core::RusticResult<rustic_core::OpenRepository>
pub fn rustic_core::Repository::password(&self) -> rustic_core::RusticResult<core::option::Option<alloc::string::String>>
impl core::fmt::Debug for rustic_core::Repository
pub fn rustic_core::Repository::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::Repository
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::Repository
impl core::marker::Send for rustic_core::Repository
impl core::marker::Sync for rustic_core::Repository
impl core::marker::Unpin for rustic_core::Repository
impl<T, U> core::convert::Into<U> for rustic_core::Repository where U: core::convert::From<T>
pub fn rustic_core::Repository::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Repository where U: core::convert::Into<T>
pub type rustic_core::Repository::Error = core::convert::Infallible
pub fn rustic_core::Repository::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Repository where U: core::convert::TryFrom<T>
pub type rustic_core::Repository::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Repository::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::Repository where T: 'static + core::marker::Sized
pub fn rustic_core::Repository::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Repository where T: core::marker::Sized
pub fn rustic_core::Repository::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Repository where T: core::marker::Sized
pub fn rustic_core::Repository::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Repository
pub fn rustic_core::Repository::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Repository
pub type rustic_core::Repository::Init = T
pub const rustic_core::Repository::ALIGN: usize
pub unsafe fn rustic_core::Repository::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Repository::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Repository::drop(ptr: usize)
pub unsafe fn rustic_core::Repository::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::Repository
impl<T> tracing::instrument::WithSubscriber for rustic_core::Repository
impl<T> typenum::type_operators::Same<T> for rustic_core::Repository
pub type rustic_core::Repository::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Repository where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Repository::vzip(self) -> V
pub struct rustic_core::RepositoryOptions
pub rustic_core::RepositoryOptions::warm_up: bool
pub rustic_core::RepositoryOptions::warm_up_command: core::option::Option<alloc::string::String>
pub rustic_core::RepositoryOptions::warm_up_wait: core::option::Option<humantime::wrapper::Duration>
impl core::clone::Clone for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::clone(&self) -> rustic_core::RepositoryOptions
impl core::default::Default for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::default() -> rustic_core::RepositoryOptions
impl core::fmt::Debug for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'de> serde::de::Deserialize<'de> for rustic_core::RepositoryOptions where rustic_core::RepositoryOptions: core::default::Default
pub fn rustic_core::RepositoryOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::RepositoryOptions
impl core::marker::Sync for rustic_core::RepositoryOptions
impl core::marker::Unpin for rustic_core::RepositoryOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RepositoryOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RepositoryOptions
impl<T, U> core::convert::Into<U> for rustic_core::RepositoryOptions where U: core::convert::From<T>
pub fn rustic_core::RepositoryOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RepositoryOptions where U: core::convert::Into<T>
pub type rustic_core::RepositoryOptions::Error = core::convert::Infallible
pub fn rustic_core::RepositoryOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RepositoryOptions where U: core::convert::TryFrom<T>
pub type rustic_core::RepositoryOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RepositoryOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RepositoryOptions where T: core::clone::Clone
pub type rustic_core::RepositoryOptions::Owned = T
pub fn rustic_core::RepositoryOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::RepositoryOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RepositoryOptions where T: 'static + core::marker::Sized
pub fn rustic_core::RepositoryOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::RepositoryOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RepositoryOptions where T: core::marker::Sized
pub fn rustic_core::RepositoryOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RepositoryOptions
pub fn rustic_core::RepositoryOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RepositoryOptions
pub type rustic_core::RepositoryOptions::Init = T
pub const rustic_core::RepositoryOptions::ALIGN: usize
pub unsafe fn rustic_core::RepositoryOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RepositoryOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RepositoryOptions::drop(ptr: usize)
pub unsafe fn rustic_core::RepositoryOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::RepositoryOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::RepositoryOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::RepositoryOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::RepositoryOptions
pub type rustic_core::RepositoryOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RepositoryOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RepositoryOptions::vzip(self) -> V
pub struct rustic_core::RestoreStats
pub rustic_core::RestoreStats::dir: FileStats
pub rustic_core::RestoreStats::file: FileStats
impl core::clone::Clone for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::clone(&self) -> rustic_core::RestoreStats
impl core::default::Default for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::default() -> rustic_core::RestoreStats
impl core::fmt::Debug for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::RestoreStats
impl core::marker::Send for rustic_core::RestoreStats
impl core::marker::Sync for rustic_core::RestoreStats
impl core::marker::Unpin for rustic_core::RestoreStats
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::RestoreStats
impl core::panic::unwind_safe::UnwindSafe for rustic_core::RestoreStats
impl<T, U> core::convert::Into<U> for rustic_core::RestoreStats where U: core::convert::From<T>
pub fn rustic_core::RestoreStats::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RestoreStats where U: core::convert::Into<T>
pub type rustic_core::RestoreStats::Error = core::convert::Infallible
pub fn rustic_core::RestoreStats::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RestoreStats where U: core::convert::TryFrom<T>
pub type rustic_core::RestoreStats::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RestoreStats::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::RestoreStats where T: core::clone::Clone
pub type rustic_core::RestoreStats::Owned = T
pub fn rustic_core::RestoreStats::clone_into(&self, target: &mut T)
pub fn rustic_core::RestoreStats::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::RestoreStats where T: 'static + core::marker::Sized
pub fn rustic_core::RestoreStats::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RestoreStats where T: core::marker::Sized
pub fn rustic_core::RestoreStats::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RestoreStats where T: core::marker::Sized
pub fn rustic_core::RestoreStats::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RestoreStats
pub fn rustic_core::RestoreStats::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RestoreStats
pub type rustic_core::RestoreStats::Init = T
pub const rustic_core::RestoreStats::ALIGN: usize
pub unsafe fn rustic_core::RestoreStats::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RestoreStats::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RestoreStats::drop(ptr: usize)
pub unsafe fn rustic_core::RestoreStats::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RestoreStats
impl<T> tracing::instrument::WithSubscriber for rustic_core::RestoreStats
impl<T> typenum::type_operators::Same<T> for rustic_core::RestoreStats
pub type rustic_core::RestoreStats::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RestoreStats where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RestoreStats::vzip(self) -> V
pub struct rustic_core::RusticError(_)
impl core::convert::From<RusticErrorKind> for rustic_core::RusticError
pub fn rustic_core::RusticError::from(source: RusticErrorKind) -> Self
impl core::error::Error for rustic_core::RusticError
pub fn rustic_core::RusticError::source(&self) -> core::option::Option<&(dyn core::error::Error + 'static)>
impl core::fmt::Display for rustic_core::RusticError
pub fn rustic_core::RusticError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Debug for rustic_core::RusticError
pub fn rustic_core::RusticError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl !core::panic::unwind_safe::RefUnwindSafe for rustic_core::RusticError
impl !core::panic::unwind_safe::UnwindSafe for rustic_core::RusticError
impl core::marker::Send for rustic_core::RusticError
impl core::marker::Sync for rustic_core::RusticError
impl core::marker::Unpin for rustic_core::RusticError
impl<E> core::any::Provider for rustic_core::RusticError where E: core::error::Error + core::marker::Sized
pub fn rustic_core::RusticError::provide<'a>(&'a self, demand: &mut core::any::Demand<'a>)
impl<T, U> core::convert::Into<U> for rustic_core::RusticError where U: core::convert::From<T>
pub fn rustic_core::RusticError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::RusticError where U: core::convert::Into<T>
pub type rustic_core::RusticError::Error = core::convert::Infallible
pub fn rustic_core::RusticError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::RusticError where U: core::convert::TryFrom<T>
pub type rustic_core::RusticError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::RusticError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::RusticError where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::RusticError::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::RusticError where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::RusticError::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::RusticError::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::RusticError::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::RusticError where T: 'static + core::marker::Sized
pub fn rustic_core::RusticError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::RusticError where T: core::marker::Sized
pub fn rustic_core::RusticError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::RusticError where T: core::marker::Sized
pub fn rustic_core::RusticError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::RusticError
pub fn rustic_core::RusticError::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::RusticError
pub type rustic_core::RusticError::Init = T
pub const rustic_core::RusticError::ALIGN: usize
pub unsafe fn rustic_core::RusticError::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::RusticError::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::RusticError::drop(ptr: usize)
pub unsafe fn rustic_core::RusticError::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::RusticError
impl<T> tracing::instrument::WithSubscriber for rustic_core::RusticError
impl<T> typenum::type_operators::Same<T> for rustic_core::RusticError
pub type rustic_core::RusticError::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::RusticError where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::RusticError::vzip(self) -> V
pub struct rustic_core::SnapshotFile
pub rustic_core::SnapshotFile::delete: rustic_core::DeleteOption
pub rustic_core::SnapshotFile::description: core::option::Option<alloc::string::String>
pub rustic_core::SnapshotFile::gid: u32
pub rustic_core::SnapshotFile::hostname: alloc::string::String
pub rustic_core::SnapshotFile::id: rustic_core::Id
pub rustic_core::SnapshotFile::label: alloc::string::String
pub rustic_core::SnapshotFile::original: core::option::Option<rustic_core::Id>
pub rustic_core::SnapshotFile::parent: core::option::Option<rustic_core::Id>
pub rustic_core::SnapshotFile::paths: rustic_core::StringList
pub rustic_core::SnapshotFile::program_version: alloc::string::String
pub rustic_core::SnapshotFile::summary: core::option::Option<SnapshotSummary>
pub rustic_core::SnapshotFile::tags: rustic_core::StringList
pub rustic_core::SnapshotFile::time: chrono::datetime::DateTime<chrono::offset::local::Local>
pub rustic_core::SnapshotFile::tree: rustic_core::Id
pub rustic_core::SnapshotFile::uid: u32
pub rustic_core::SnapshotFile::username: alloc::string::String
impl rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::add_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::StringList>) -> bool
pub fn rustic_core::SnapshotFile::all_from_backend<B, F>(be: &B, filter: F) -> rustic_core::RusticResult<alloc::vec::Vec<Self>> where B: rustic_core::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::SnapshotFile::clear_ids(sn: Self) -> Self
pub fn rustic_core::SnapshotFile::from_id<B: rustic_core::DecryptReadBackend>(be: &B, id: &str) -> rustic_core::RusticResult<Self>
pub fn rustic_core::SnapshotFile::from_ids<B: rustic_core::DecryptReadBackend>(be: &B, ids: &[alloc::string::String]) -> rustic_core::RusticResult<alloc::vec::Vec<Self>>
pub fn rustic_core::SnapshotFile::from_str<B: rustic_core::DecryptReadBackend>(be: &B, string: &str, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<Self>
pub fn rustic_core::SnapshotFile::group_from_backend<B, F>(be: &B, filter: F, crit: &rustic_core::SnapshotGroupCriterion) -> rustic_core::RusticResult<alloc::vec::Vec<(rustic_core::SnapshotGroup, alloc::vec::Vec<Self>)>> where B: rustic_core::DecryptReadBackend, F: core::ops::function::FnMut(&Self) -> bool
pub fn rustic_core::SnapshotFile::has_group(&self, group: &rustic_core::SnapshotGroup) -> bool
pub fn rustic_core::SnapshotFile::latest<B: rustic_core::DecryptReadBackend>(be: &B, predicate: impl core::ops::function::FnMut(&Self) -> bool + core::marker::Send + core::marker::Sync, p: &indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<Self>
pub fn rustic_core::SnapshotFile::modify_sn(&mut self, set: alloc::vec::Vec<rustic_core::StringList>, add: alloc::vec::Vec<rustic_core::StringList>, remove: &[rustic_core::StringList], delete: &core::option::Option<rustic_core::DeleteOption>) -> core::option::Option<Self>
pub fn rustic_core::SnapshotFile::must_delete(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::SnapshotFile::must_keep(&self, now: chrono::datetime::DateTime<chrono::offset::local::Local>) -> bool
pub fn rustic_core::SnapshotFile::new_from_options(opts: &rustic_core::SnapshotOptions, time: chrono::datetime::DateTime<chrono::offset::local::Local>, command: alloc::string::String) -> rustic_core::RusticResult<Self>
pub fn rustic_core::SnapshotFile::remove_tags(&mut self, tag_lists: &[rustic_core::StringList]) -> bool
pub fn rustic_core::SnapshotFile::set_tags(&mut self, tag_lists: alloc::vec::Vec<rustic_core::StringList>) -> bool
impl core::cmp::Eq for rustic_core::SnapshotFile
impl core::cmp::Ord for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::cmp(&self, other: &Self) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::SnapshotFile> for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::eq(&self, other: &Self) -> bool
impl core::cmp::PartialOrd<rustic_core::SnapshotFile> for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::partial_cmp(&self, other: &Self) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::default() -> Self
impl rustic_core::RepoFile for rustic_core::SnapshotFile
pub const rustic_core::SnapshotFile::TYPE: rustic_core::FileType
impl core::clone::Clone for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::clone(&self) -> rustic_core::SnapshotFile
impl core::fmt::Debug for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::SnapshotFile
impl core::marker::Sync for rustic_core::SnapshotFile
impl core::marker::Unpin for rustic_core::SnapshotFile
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotFile
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotFile
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::SnapshotFile where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::SnapshotFile::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotFile where U: core::convert::From<T>
pub fn rustic_core::SnapshotFile::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotFile where U: core::convert::Into<T>
pub type rustic_core::SnapshotFile::Error = core::convert::Infallible
pub fn rustic_core::SnapshotFile::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotFile where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotFile::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotFile::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::SnapshotFile where T: core::clone::Clone
pub type rustic_core::SnapshotFile::Owned = T
pub fn rustic_core::SnapshotFile::clone_into(&self, target: &mut T)
pub fn rustic_core::SnapshotFile::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::SnapshotFile where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotFile::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::SnapshotFile::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotFile where T: core::marker::Sized
pub fn rustic_core::SnapshotFile::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotFile
pub fn rustic_core::SnapshotFile::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotFile
pub type rustic_core::SnapshotFile::Init = T
pub const rustic_core::SnapshotFile::ALIGN: usize
pub unsafe fn rustic_core::SnapshotFile::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotFile::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotFile::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotFile::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::SnapshotFile where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotFile
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotFile
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotFile
pub type rustic_core::SnapshotFile::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotFile where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotFile::vzip(self) -> V
pub struct rustic_core::SnapshotGroup
impl rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::from_sn(sn: &rustic_core::SnapshotFile, crit: &rustic_core::SnapshotGroupCriterion) -> Self
pub fn rustic_core::SnapshotGroup::is_empty(&self) -> bool
impl core::fmt::Display for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::cmp::Eq for rustic_core::SnapshotGroup
impl core::cmp::PartialEq<rustic_core::SnapshotGroup> for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::eq(&self, other: &rustic_core::SnapshotGroup) -> bool
impl core::default::Default for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::default() -> rustic_core::SnapshotGroup
impl core::fmt::Debug for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::SnapshotGroup
impl core::marker::StructuralPartialEq for rustic_core::SnapshotGroup
impl serde::ser::Serialize for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl core::marker::Send for rustic_core::SnapshotGroup
impl core::marker::Sync for rustic_core::SnapshotGroup
impl core::marker::Unpin for rustic_core::SnapshotGroup
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotGroup
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotGroup
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::SnapshotGroup where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::SnapshotGroup::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotGroup where U: core::convert::From<T>
pub fn rustic_core::SnapshotGroup::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotGroup where U: core::convert::Into<T>
pub type rustic_core::SnapshotGroup::Error = core::convert::Infallible
pub fn rustic_core::SnapshotGroup::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotGroup where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotGroup::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotGroup::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for rustic_core::SnapshotGroup where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::SnapshotGroup::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::SnapshotGroup where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::SnapshotGroup::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::SnapshotGroup::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::SnapshotGroup::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::SnapshotGroup where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotGroup::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::SnapshotGroup::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotGroup where T: core::marker::Sized
pub fn rustic_core::SnapshotGroup::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotGroup
pub fn rustic_core::SnapshotGroup::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotGroup
pub type rustic_core::SnapshotGroup::Init = T
pub const rustic_core::SnapshotGroup::ALIGN: usize
pub unsafe fn rustic_core::SnapshotGroup::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotGroup::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotGroup::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotGroup::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotGroup
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotGroup
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotGroup
pub type rustic_core::SnapshotGroup::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotGroup where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotGroup::vzip(self) -> V
pub struct rustic_core::SnapshotGroupCriterion
impl core::str::traits::FromStr for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Err = rustic_core::RusticError
pub fn rustic_core::SnapshotGroupCriterion::from_str(s: &str) -> rustic_core::RusticResult<Self>
impl core::clone::Clone for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::clone(&self) -> rustic_core::SnapshotGroupCriterion
impl core::default::Default for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::default() -> rustic_core::SnapshotGroupCriterion
impl core::fmt::Debug for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Copy for rustic_core::SnapshotGroupCriterion
impl<'de> serde::de::Deserialize<'de> for rustic_core::SnapshotGroupCriterion where Self: core::str::traits::FromStr, <Self as core::str::traits::FromStr>::Err: core::fmt::Display
pub fn rustic_core::SnapshotGroupCriterion::deserialize<__D>(deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::SnapshotGroupCriterion
impl core::marker::Sync for rustic_core::SnapshotGroupCriterion
impl core::marker::Unpin for rustic_core::SnapshotGroupCriterion
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotGroupCriterion
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotGroupCriterion
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::From<T>
pub fn rustic_core::SnapshotGroupCriterion::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::Into<T>
pub type rustic_core::SnapshotGroupCriterion::Error = core::convert::Infallible
pub fn rustic_core::SnapshotGroupCriterion::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotGroupCriterion where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotGroupCriterion::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotGroupCriterion::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::SnapshotGroupCriterion where T: core::clone::Clone
pub type rustic_core::SnapshotGroupCriterion::Owned = T
pub fn rustic_core::SnapshotGroupCriterion::clone_into(&self, target: &mut T)
pub fn rustic_core::SnapshotGroupCriterion::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::SnapshotGroupCriterion where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotGroupCriterion where T: core::marker::Sized
pub fn rustic_core::SnapshotGroupCriterion::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotGroupCriterion
pub fn rustic_core::SnapshotGroupCriterion::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Init = T
pub const rustic_core::SnapshotGroupCriterion::ALIGN: usize
pub unsafe fn rustic_core::SnapshotGroupCriterion::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotGroupCriterion::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotGroupCriterion::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotGroupCriterion::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::SnapshotGroupCriterion where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotGroupCriterion
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotGroupCriterion
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotGroupCriterion
pub type rustic_core::SnapshotGroupCriterion::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotGroupCriterion where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotGroupCriterion::vzip(self) -> V
pub struct rustic_core::SnapshotOptions
impl core::clone::Clone for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::clone(&self) -> rustic_core::SnapshotOptions
impl core::default::Default for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::default() -> rustic_core::SnapshotOptions
impl core::fmt::Debug for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl<'de> serde::de::Deserialize<'de> for rustic_core::SnapshotOptions where rustic_core::SnapshotOptions: core::default::Default
pub fn rustic_core::SnapshotOptions::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::SnapshotOptions
impl core::marker::Sync for rustic_core::SnapshotOptions
impl core::marker::Unpin for rustic_core::SnapshotOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::SnapshotOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::SnapshotOptions
impl<T, U> core::convert::Into<U> for rustic_core::SnapshotOptions where U: core::convert::From<T>
pub fn rustic_core::SnapshotOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::SnapshotOptions where U: core::convert::Into<T>
pub type rustic_core::SnapshotOptions::Error = core::convert::Infallible
pub fn rustic_core::SnapshotOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::SnapshotOptions where U: core::convert::TryFrom<T>
pub type rustic_core::SnapshotOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::SnapshotOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::SnapshotOptions where T: core::clone::Clone
pub type rustic_core::SnapshotOptions::Owned = T
pub fn rustic_core::SnapshotOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::SnapshotOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::SnapshotOptions where T: 'static + core::marker::Sized
pub fn rustic_core::SnapshotOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::SnapshotOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::SnapshotOptions where T: core::marker::Sized
pub fn rustic_core::SnapshotOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::SnapshotOptions
pub fn rustic_core::SnapshotOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::SnapshotOptions
pub type rustic_core::SnapshotOptions::Init = T
pub const rustic_core::SnapshotOptions::ALIGN: usize
pub unsafe fn rustic_core::SnapshotOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::SnapshotOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::SnapshotOptions::drop(ptr: usize)
pub unsafe fn rustic_core::SnapshotOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::SnapshotOptions where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::SnapshotOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::SnapshotOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::SnapshotOptions
pub type rustic_core::SnapshotOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::SnapshotOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::SnapshotOptions::vzip(self) -> V
pub struct rustic_core::StdinSource
impl rustic_core::StdinSource
pub const fn rustic_core::StdinSource::new(path: std::path::PathBuf) -> rustic_core::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::StdinSource
pub type rustic_core::StdinSource::Item = core::result::Result<rustic_core::ReadSourceEntry<OpenStdin>, rustic_core::RusticError>
pub fn rustic_core::StdinSource::next(&mut self) -> core::option::Option<Self::Item>
impl rustic_core::ReadSource for rustic_core::StdinSource
pub type rustic_core::StdinSource::Iter = rustic_core::StdinSource
pub type rustic_core::StdinSource::Open = OpenStdin
pub type rustic_core::StdinSource::ReadSourceError = rustic_core::RusticError
pub fn rustic_core::StdinSource::entries(self) -> Self::Iter
pub fn rustic_core::StdinSource::size(&self) -> core::result::Result<core::option::Option<u64>, Self::ReadSourceError>
impl core::fmt::Debug for rustic_core::StdinSource
pub fn rustic_core::StdinSource::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::StdinSource
impl core::marker::Sync for rustic_core::StdinSource
impl core::marker::Unpin for rustic_core::StdinSource
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::StdinSource
impl core::panic::unwind_safe::UnwindSafe for rustic_core::StdinSource
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::StdinSource where I: core::iter::traits::iterator::Iterator
pub type rustic_core::StdinSource::IntoIter = I
pub type rustic_core::StdinSource::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::StdinSource::into_iter(self) -> I
impl<I> encode_unicode::traits::IterExt for rustic_core::StdinSource where I: core::iter::traits::iterator::Iterator
pub fn rustic_core::StdinSource::to_bytes(self) -> encode_unicode::utf8_iterators::Utf8CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf8_char::Utf8Char>
pub fn rustic_core::StdinSource::to_units(self) -> encode_unicode::utf16_iterators::Utf16CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf16_char::Utf16Char>
pub fn rustic_core::StdinSource::to_utf16chars(self) -> encode_unicode::decoding_iterators::Utf16CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u16>
pub fn rustic_core::StdinSource::to_utf8chars(self) -> encode_unicode::decoding_iterators::Utf8CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u8>
impl<I> pariter::IteratorExt for rustic_core::StdinSource where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::StdinSource where I: core::iter::traits::iterator::Iterator
impl<S, T> indicatif::iter::ProgressIterator for rustic_core::StdinSource where T: core::iter::traits::iterator::Iterator<Item = S>
pub fn rustic_core::StdinSource::progress_with(self, progress: indicatif::progress_bar::ProgressBar) -> indicatif::iter::ProgressBarIter<T>
impl<T, U> core::convert::Into<U> for rustic_core::StdinSource where U: core::convert::From<T>
pub fn rustic_core::StdinSource::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::StdinSource where U: core::convert::Into<T>
pub type rustic_core::StdinSource::Error = core::convert::Infallible
pub fn rustic_core::StdinSource::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::StdinSource where U: core::convert::TryFrom<T>
pub type rustic_core::StdinSource::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::StdinSource::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::StdinSource where T: 'static + core::marker::Sized
pub fn rustic_core::StdinSource::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::StdinSource where T: core::marker::Sized
pub fn rustic_core::StdinSource::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::StdinSource where T: core::marker::Sized
pub fn rustic_core::StdinSource::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::StdinSource
pub fn rustic_core::StdinSource::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::StdinSource
pub type rustic_core::StdinSource::Init = T
pub const rustic_core::StdinSource::ALIGN: usize
pub unsafe fn rustic_core::StdinSource::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::StdinSource::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::StdinSource::drop(ptr: usize)
pub unsafe fn rustic_core::StdinSource::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::StdinSource where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::StdinSource
impl<T> tracing::instrument::WithSubscriber for rustic_core::StdinSource
impl<T> typenum::type_operators::Same<T> for rustic_core::StdinSource
pub type rustic_core::StdinSource::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::StdinSource where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::StdinSource::vzip(self) -> V
pub struct rustic_core::StringList(_)
impl rustic_core::StringList
pub fn rustic_core::StringList::formatln(&self) -> alloc::string::String
pub fn rustic_core::StringList::iter(&self) -> core::slice::iter::Iter<'_, alloc::string::String>
pub fn rustic_core::StringList::matches(&self, sls: &[Self]) -> bool
pub fn rustic_core::StringList::set_paths(&mut self, paths: &[std::path::PathBuf]) -> rustic_core::RusticResult<()>
impl core::fmt::Display for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::str::traits::FromStr for rustic_core::StringList
pub type rustic_core::StringList::Err = rustic_core::RusticError
pub fn rustic_core::StringList::from_str(s: &str) -> rustic_core::RusticResult<Self>
impl core::clone::Clone for rustic_core::StringList
pub fn rustic_core::StringList::clone(&self) -> rustic_core::StringList
impl core::cmp::Eq for rustic_core::StringList
impl core::cmp::Ord for rustic_core::StringList
pub fn rustic_core::StringList::cmp(&self, other: &rustic_core::StringList) -> core::cmp::Ordering
impl core::cmp::PartialEq<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::eq(&self, other: &rustic_core::StringList) -> bool
impl core::cmp::PartialOrd<rustic_core::StringList> for rustic_core::StringList
pub fn rustic_core::StringList::partial_cmp(&self, other: &rustic_core::StringList) -> core::option::Option<core::cmp::Ordering>
impl core::default::Default for rustic_core::StringList
pub fn rustic_core::StringList::default() -> rustic_core::StringList
impl core::fmt::Debug for rustic_core::StringList
pub fn rustic_core::StringList::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::StructuralEq for rustic_core::StringList
impl core::marker::StructuralPartialEq for rustic_core::StringList
impl serde::ser::Serialize for rustic_core::StringList
pub fn rustic_core::StringList::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::StringList
pub fn rustic_core::StringList::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::StringList
impl core::marker::Sync for rustic_core::StringList
impl core::marker::Unpin for rustic_core::StringList
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::StringList
impl core::panic::unwind_safe::UnwindSafe for rustic_core::StringList
impl<Q, K> indexmap::equivalent::Equivalent<K> for rustic_core::StringList where Q: core::cmp::Eq + core::marker::Sized, K: core::borrow::Borrow<Q> + core::marker::Sized
pub fn rustic_core::StringList::equivalent(&self, key: &K) -> bool
impl<T, U> core::convert::Into<U> for rustic_core::StringList where U: core::convert::From<T>
pub fn rustic_core::StringList::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::StringList where U: core::convert::Into<T>
pub type rustic_core::StringList::Error = core::convert::Infallible
pub fn rustic_core::StringList::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::StringList where U: core::convert::TryFrom<T>
pub type rustic_core::StringList::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::StringList::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::StringList where T: core::clone::Clone
pub type rustic_core::StringList::Owned = T
pub fn rustic_core::StringList::clone_into(&self, target: &mut T)
pub fn rustic_core::StringList::to_owned(&self) -> T
impl<T> alloc::string::ToString for rustic_core::StringList where T: core::fmt::Display + core::marker::Sized
pub fn rustic_core::StringList::to_string(&self) -> alloc::string::String
impl<T> binrw::error::CustomError for rustic_core::StringList where T: 'static + core::fmt::Display + core::fmt::Debug + core::marker::Send + core::marker::Sync
pub fn rustic_core::StringList::as_any(&self) -> &(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::StringList::as_any_mut(&mut self) -> &mut (dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static)
pub fn rustic_core::StringList::as_box_any(self: alloc::boxed::Box<T, alloc::alloc::Global>) -> alloc::boxed::Box<(dyn core::any::Any + core::marker::Send + core::marker::Sync + 'static), alloc::alloc::Global>
impl<T> core::any::Any for rustic_core::StringList where T: 'static + core::marker::Sized
pub fn rustic_core::StringList::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::StringList where T: core::marker::Sized
pub fn rustic_core::StringList::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::StringList
pub fn rustic_core::StringList::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::StringList
pub type rustic_core::StringList::Init = T
pub const rustic_core::StringList::ALIGN: usize
pub unsafe fn rustic_core::StringList::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::StringList::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::StringList::drop(ptr: usize)
pub unsafe fn rustic_core::StringList::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::StringList where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::StringList
impl<T> tracing::instrument::WithSubscriber for rustic_core::StringList
impl<T> typenum::type_operators::Same<T> for rustic_core::StringList
pub type rustic_core::StringList::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::StringList where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::StringList::vzip(self) -> V
pub struct rustic_core::Tree
pub rustic_core::Tree::nodes: alloc::vec::Vec<rustic_core::Node>
impl rustic_core::Tree
pub fn rustic_core::Tree::add(&mut self, node: rustic_core::Node)
pub fn rustic_core::Tree::from_backend(be: &impl rustic_core::IndexedBackend, id: rustic_core::Id) -> rustic_core::RusticResult<Self>
pub const fn rustic_core::Tree::new() -> Self
pub fn rustic_core::Tree::node_from_path(be: &impl rustic_core::IndexedBackend, id: rustic_core::Id, path: &std::path::Path) -> rustic_core::RusticResult<rustic_core::Node>
pub fn rustic_core::Tree::serialize(&self) -> rustic_core::RusticResult<(alloc::vec::Vec<u8>, rustic_core::Id)>
impl core::iter::traits::collect::IntoIterator for rustic_core::Tree
pub type rustic_core::Tree::IntoIter = alloc::vec::into_iter::IntoIter<rustic_core::Node, alloc::alloc::Global>
pub type rustic_core::Tree::Item = rustic_core::Node
pub fn rustic_core::Tree::into_iter(self) -> Self::IntoIter
impl core::clone::Clone for rustic_core::Tree
pub fn rustic_core::Tree::clone(&self) -> rustic_core::Tree
impl core::default::Default for rustic_core::Tree
pub fn rustic_core::Tree::default() -> rustic_core::Tree
impl core::fmt::Debug for rustic_core::Tree
pub fn rustic_core::Tree::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl serde::ser::Serialize for rustic_core::Tree
pub fn rustic_core::Tree::serialize<__S>(&self, __serializer: __S) -> core::result::Result<<__S as serde::ser::Serializer>::Ok, <__S as serde::ser::Serializer>::Error> where __S: serde::ser::Serializer
impl<'de> serde::de::Deserialize<'de> for rustic_core::Tree
pub fn rustic_core::Tree::deserialize<__D>(__deserializer: __D) -> core::result::Result<Self, <__D as serde::de::Deserializer>::Error> where __D: serde::de::Deserializer<'de>
impl core::marker::Send for rustic_core::Tree
impl core::marker::Sync for rustic_core::Tree
impl core::marker::Unpin for rustic_core::Tree
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::Tree
impl core::panic::unwind_safe::UnwindSafe for rustic_core::Tree
impl<T, U> core::convert::Into<U> for rustic_core::Tree where U: core::convert::From<T>
pub fn rustic_core::Tree::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::Tree where U: core::convert::Into<T>
pub type rustic_core::Tree::Error = core::convert::Infallible
pub fn rustic_core::Tree::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::Tree where U: core::convert::TryFrom<T>
pub type rustic_core::Tree::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::Tree::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::Tree where T: core::clone::Clone
pub type rustic_core::Tree::Owned = T
pub fn rustic_core::Tree::clone_into(&self, target: &mut T)
pub fn rustic_core::Tree::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::Tree where T: 'static + core::marker::Sized
pub fn rustic_core::Tree::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::Tree where T: core::marker::Sized
pub fn rustic_core::Tree::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::Tree where T: core::marker::Sized
pub fn rustic_core::Tree::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::Tree
pub fn rustic_core::Tree::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::Tree
pub type rustic_core::Tree::Init = T
pub const rustic_core::Tree::ALIGN: usize
pub unsafe fn rustic_core::Tree::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::Tree::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::Tree::drop(ptr: usize)
pub unsafe fn rustic_core::Tree::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> serde::de::DeserializeOwned for rustic_core::Tree where T: for<'de> serde::de::Deserialize<'de>
impl<T> tracing::instrument::Instrument for rustic_core::Tree
impl<T> tracing::instrument::WithSubscriber for rustic_core::Tree
impl<T> typenum::type_operators::Same<T> for rustic_core::Tree
pub type rustic_core::Tree::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::Tree where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::Tree::vzip(self) -> V
pub struct rustic_core::TreeStreamerOnce
impl rustic_core::TreeStreamerOnce
pub fn rustic_core::TreeStreamerOnce::new<BE: rustic_core::IndexedBackend>(be: BE, ids: alloc::vec::Vec<rustic_core::Id>, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<Self>
impl core::iter::traits::iterator::Iterator for rustic_core::TreeStreamerOnce
pub type rustic_core::TreeStreamerOnce::Item = core::result::Result<(std::path::PathBuf, rustic_core::Tree), rustic_core::RusticError>
pub fn rustic_core::TreeStreamerOnce::next(&mut self) -> core::option::Option<Self::Item>
impl core::fmt::Debug for rustic_core::TreeStreamerOnce
pub fn rustic_core::TreeStreamerOnce::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::TreeStreamerOnce
impl core::marker::Sync for rustic_core::TreeStreamerOnce
impl core::marker::Unpin for rustic_core::TreeStreamerOnce
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::TreeStreamerOnce
impl core::panic::unwind_safe::UnwindSafe for rustic_core::TreeStreamerOnce
impl<I> core::iter::traits::collect::IntoIterator for rustic_core::TreeStreamerOnce where I: core::iter::traits::iterator::Iterator
pub type rustic_core::TreeStreamerOnce::IntoIter = I
pub type rustic_core::TreeStreamerOnce::Item = <I as core::iter::traits::iterator::Iterator>::Item
pub fn rustic_core::TreeStreamerOnce::into_iter(self) -> I
impl<I> encode_unicode::traits::IterExt for rustic_core::TreeStreamerOnce where I: core::iter::traits::iterator::Iterator
pub fn rustic_core::TreeStreamerOnce::to_bytes(self) -> encode_unicode::utf8_iterators::Utf8CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf8_char::Utf8Char>
pub fn rustic_core::TreeStreamerOnce::to_units(self) -> encode_unicode::utf16_iterators::Utf16CharSplitter<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<encode_unicode::utf16_char::Utf16Char>
pub fn rustic_core::TreeStreamerOnce::to_utf16chars(self) -> encode_unicode::decoding_iterators::Utf16CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u16>
pub fn rustic_core::TreeStreamerOnce::to_utf8chars(self) -> encode_unicode::decoding_iterators::Utf8CharMerger<<I as core::iter::traits::iterator::Iterator>::Item, I> where <I as core::iter::traits::iterator::Iterator>::Item: core::borrow::Borrow<u8>
impl<I> pariter::IteratorExt for rustic_core::TreeStreamerOnce where I: core::iter::traits::iterator::Iterator
impl<I> rand::seq::IteratorRandom for rustic_core::TreeStreamerOnce where I: core::iter::traits::iterator::Iterator
impl<S, T> indicatif::iter::ProgressIterator for rustic_core::TreeStreamerOnce where T: core::iter::traits::iterator::Iterator<Item = S>
pub fn rustic_core::TreeStreamerOnce::progress_with(self, progress: indicatif::progress_bar::ProgressBar) -> indicatif::iter::ProgressBarIter<T>
impl<T, U> core::convert::Into<U> for rustic_core::TreeStreamerOnce where U: core::convert::From<T>
pub fn rustic_core::TreeStreamerOnce::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::TreeStreamerOnce where U: core::convert::Into<T>
pub type rustic_core::TreeStreamerOnce::Error = core::convert::Infallible
pub fn rustic_core::TreeStreamerOnce::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::TreeStreamerOnce where U: core::convert::TryFrom<T>
pub type rustic_core::TreeStreamerOnce::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::TreeStreamerOnce::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for rustic_core::TreeStreamerOnce where T: 'static + core::marker::Sized
pub fn rustic_core::TreeStreamerOnce::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::TreeStreamerOnce where T: core::marker::Sized
pub fn rustic_core::TreeStreamerOnce::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::TreeStreamerOnce where T: core::marker::Sized
pub fn rustic_core::TreeStreamerOnce::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::TreeStreamerOnce
pub fn rustic_core::TreeStreamerOnce::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::TreeStreamerOnce
pub type rustic_core::TreeStreamerOnce::Init = T
pub const rustic_core::TreeStreamerOnce::ALIGN: usize
pub unsafe fn rustic_core::TreeStreamerOnce::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::TreeStreamerOnce::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::TreeStreamerOnce::drop(ptr: usize)
pub unsafe fn rustic_core::TreeStreamerOnce::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> itertools::Itertools for rustic_core::TreeStreamerOnce where T: core::iter::traits::iterator::Iterator + core::marker::Sized
impl<T> tracing::instrument::Instrument for rustic_core::TreeStreamerOnce
impl<T> tracing::instrument::WithSubscriber for rustic_core::TreeStreamerOnce
impl<T> typenum::type_operators::Same<T> for rustic_core::TreeStreamerOnce
pub type rustic_core::TreeStreamerOnce::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::TreeStreamerOnce where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::TreeStreamerOnce::vzip(self) -> V
pub struct rustic_core::TreeStreamerOptions
impl core::clone::Clone for rustic_core::TreeStreamerOptions
pub fn rustic_core::TreeStreamerOptions::clone(&self) -> rustic_core::TreeStreamerOptions
impl core::default::Default for rustic_core::TreeStreamerOptions
pub fn rustic_core::TreeStreamerOptions::default() -> rustic_core::TreeStreamerOptions
impl core::fmt::Debug for rustic_core::TreeStreamerOptions
pub fn rustic_core::TreeStreamerOptions::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Send for rustic_core::TreeStreamerOptions
impl core::marker::Sync for rustic_core::TreeStreamerOptions
impl core::marker::Unpin for rustic_core::TreeStreamerOptions
impl core::panic::unwind_safe::RefUnwindSafe for rustic_core::TreeStreamerOptions
impl core::panic::unwind_safe::UnwindSafe for rustic_core::TreeStreamerOptions
impl<T, U> core::convert::Into<U> for rustic_core::TreeStreamerOptions where U: core::convert::From<T>
pub fn rustic_core::TreeStreamerOptions::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for rustic_core::TreeStreamerOptions where U: core::convert::Into<T>
pub type rustic_core::TreeStreamerOptions::Error = core::convert::Infallible
pub fn rustic_core::TreeStreamerOptions::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for rustic_core::TreeStreamerOptions where U: core::convert::TryFrom<T>
pub type rustic_core::TreeStreamerOptions::Error = <U as core::convert::TryFrom<T>>::Error
pub fn rustic_core::TreeStreamerOptions::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for rustic_core::TreeStreamerOptions where T: core::clone::Clone
pub type rustic_core::TreeStreamerOptions::Owned = T
pub fn rustic_core::TreeStreamerOptions::clone_into(&self, target: &mut T)
pub fn rustic_core::TreeStreamerOptions::to_owned(&self) -> T
impl<T> core::any::Any for rustic_core::TreeStreamerOptions where T: 'static + core::marker::Sized
pub fn rustic_core::TreeStreamerOptions::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for rustic_core::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::TreeStreamerOptions::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for rustic_core::TreeStreamerOptions where T: core::marker::Sized
pub fn rustic_core::TreeStreamerOptions::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for rustic_core::TreeStreamerOptions
pub fn rustic_core::TreeStreamerOptions::from(t: T) -> T
impl<T> crossbeam_epoch::atomic::Pointable for rustic_core::TreeStreamerOptions
pub type rustic_core::TreeStreamerOptions::Init = T
pub const rustic_core::TreeStreamerOptions::ALIGN: usize
pub unsafe fn rustic_core::TreeStreamerOptions::deref<'a>(ptr: usize) -> &'a T
pub unsafe fn rustic_core::TreeStreamerOptions::deref_mut<'a>(ptr: usize) -> &'a mut T
pub unsafe fn rustic_core::TreeStreamerOptions::drop(ptr: usize)
pub unsafe fn rustic_core::TreeStreamerOptions::init(init: <T as crossbeam_epoch::atomic::Pointable>::Init) -> usize
impl<T> tracing::instrument::Instrument for rustic_core::TreeStreamerOptions
impl<T> tracing::instrument::WithSubscriber for rustic_core::TreeStreamerOptions
impl<T> typenum::type_operators::Same<T> for rustic_core::TreeStreamerOptions
pub type rustic_core::TreeStreamerOptions::Output = T
impl<V, T> ppv_lite86::types::VZip<V> for rustic_core::TreeStreamerOptions where V: ppv_lite86::types::MultiLane<T>
pub fn rustic_core::TreeStreamerOptions::vzip(self) -> V
pub const rustic_core::ALL_FILE_TYPES: _
pub trait rustic_core::DecryptFullBackend: rustic_core::DecryptWriteBackend + rustic_core::DecryptReadBackend
impl<T: rustic_core::DecryptWriteBackend + rustic_core::DecryptReadBackend> rustic_core::DecryptFullBackend for T
pub trait rustic_core::DecryptReadBackend: rustic_core::ReadBackend
pub fn rustic_core::DecryptReadBackend::decrypt(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::DecryptReadBackend::get_file<F: rustic_core::RepoFile>(&self, id: &rustic_core::Id) -> rustic_core::RusticResult<F>
pub fn rustic_core::DecryptReadBackend::read_encrypted_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::DecryptReadBackend::read_encrypted_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32, uncompressed_length: core::option::Option<core::num::nonzero::NonZeroU32>) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub fn rustic_core::DecryptReadBackend::stream_all<F: rustic_core::RepoFile>(&self, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<crossbeam_channel::channel::Receiver<rustic_core::RusticResult<(rustic_core::Id, F)>>>
pub fn rustic_core::DecryptReadBackend::stream_list<F: rustic_core::RepoFile>(&self, list: alloc::vec::Vec<rustic_core::Id>, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<crossbeam_channel::channel::Receiver<rustic_core::RusticResult<(rustic_core::Id, F)>>>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::DecryptReadBackend for rustic_core::DryRunBackend<BE>
pub fn rustic_core::DecryptReadBackend::decrypt(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::DecryptReadBackend::read_encrypted_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
impl<R: rustic_core::ReadBackend, C: CryptoKey> rustic_core::DecryptReadBackend for rustic_core::DecryptBackend<R, C>
pub fn rustic_core::DecryptReadBackend::decrypt(&self, data: &[u8]) -> rustic_core::RusticResult<alloc::vec::Vec<u8>>
pub fn rustic_core::DecryptReadBackend::read_encrypted_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> rustic_core::RusticResult<bytes::bytes::Bytes>
pub trait rustic_core::DecryptWriteBackend: rustic_core::WriteBackend
pub type rustic_core::DecryptWriteBackend::Key: CryptoKey
pub fn rustic_core::DecryptWriteBackend::delete_list<'a, I: core::iter::traits::exact_size::ExactSizeIterator<Item = &'a rustic_core::Id> + core::marker::Send>(&self, tpe: rustic_core::FileType, cacheable: bool, list: I, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<()>
pub fn rustic_core::DecryptWriteBackend::hash_write_full(&self, tpe: rustic_core::FileType, data: &[u8]) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DecryptWriteBackend::key(&self) -> &Self::Key
pub fn rustic_core::DecryptWriteBackend::save_file<F: rustic_core::RepoFile>(&self, file: &F) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DecryptWriteBackend::save_list<'a, F: rustic_core::RepoFile, I: core::iter::traits::exact_size::ExactSizeIterator<Item = &'a F> + core::marker::Send>(&self, list: I, p: indicatif::progress_bar::ProgressBar) -> rustic_core::RusticResult<()>
pub fn rustic_core::DecryptWriteBackend::set_zstd(&mut self, zstd: impl core::convert::Into<core::option::Option<i32>>)
impl<BE: rustic_core::DecryptFullBackend> rustic_core::DecryptWriteBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::DecryptWriteBackend::Key = <BE as rustic_core::DecryptWriteBackend>::Key
pub fn rustic_core::DecryptWriteBackend::hash_write_full(&self, tpe: rustic_core::FileType, data: &[u8]) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DecryptWriteBackend::key(&self) -> &Self::Key
pub fn rustic_core::DecryptWriteBackend::set_zstd(&mut self, zstd: impl core::convert::Into<core::option::Option<i32>>)
impl<R: rustic_core::WriteBackend, C: CryptoKey> rustic_core::DecryptWriteBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::DecryptWriteBackend::Key = C
pub fn rustic_core::DecryptWriteBackend::hash_write_full(&self, tpe: rustic_core::FileType, data: &[u8]) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::DecryptWriteBackend::key(&self) -> &Self::Key
pub fn rustic_core::DecryptWriteBackend::set_zstd(&mut self, zstd: impl core::convert::Into<core::option::Option<i32>>)
pub trait rustic_core::IndexedBackend: rustic_core::ReadIndex + core::clone::Clone + core::marker::Sync + core::marker::Send + 'static
pub type rustic_core::IndexedBackend::Backend: rustic_core::DecryptReadBackend
pub type rustic_core::IndexedBackend::IndexBackendError: core::marker::Sync + core::marker::Send + 'static + core::error::Error
pub fn rustic_core::IndexedBackend::be(&self) -> &Self::Backend
pub fn rustic_core::IndexedBackend::blob_from_backend(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::IndexBackendError>
impl<BE: rustic_core::DecryptReadBackend> rustic_core::IndexedBackend for rustic_core::IndexBackend<BE>
pub type rustic_core::IndexedBackend::Backend = BE
pub type rustic_core::IndexedBackend::IndexBackendError = rustic_core::RusticError
pub fn rustic_core::IndexedBackend::be(&self) -> &Self::Backend
pub fn rustic_core::IndexedBackend::blob_from_backend(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::IndexBackendError>
pub trait rustic_core::Initialize<T: core::default::Default + core::marker::Sized>
pub fn rustic_core::Initialize::init<F: core::ops::function::FnMut(rustic_core::BlobType) -> T>(init: F) -> rustic_core::BlobTypeMap<T>
impl<T: core::default::Default> rustic_core::Initialize<T> for rustic_core::BlobTypeMap<T>
pub fn rustic_core::Initialize::init<F: core::ops::function::FnMut(rustic_core::BlobType) -> T>(init: F) -> Self
pub trait rustic_core::ReadBackend: core::clone::Clone + core::marker::Send + core::marker::Sync + 'static
pub type rustic_core::ReadBackend::ReadBackendError: core::marker::Send + core::marker::Sync + 'static + core::error::Error
pub fn rustic_core::ReadBackend::find_id(&self, tpe: rustic_core::FileType, id: &str) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::ReadBackend::find_ids(&self, tpe: rustic_core::FileType, ids: &[alloc::string::String]) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::Id>>
pub fn rustic_core::ReadBackend::find_starts_with(&self, tpe: rustic_core::FileType, vec: &[alloc::string::String]) -> rustic_core::RusticResult<alloc::vec::Vec<rustic_core::Id>>
pub fn rustic_core::ReadBackend::list(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<rustic_core::Id>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl rustic_core::ReadBackend for ChooseBackend
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl rustic_core::ReadBackend for LocalBackend
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<rustic_core::Id>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl rustic_core::ReadBackend for RcloneBackend
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl rustic_core::ReadBackend for RestBackend
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::ReadBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<BE: rustic_core::WriteBackend> rustic_core::ReadBackend for CachedBackend<BE>
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<BE: rustic_core::WriteBackend> rustic_core::ReadBackend for HotColdBackend<BE>
pub type rustic_core::ReadBackend::ReadBackendError = rustic_core::RusticError
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
impl<R: rustic_core::ReadBackend, C: CryptoKey> rustic_core::ReadBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::ReadBackend::ReadBackendError = <R as rustic_core::ReadBackend>::ReadBackendError
pub fn rustic_core::ReadBackend::list(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<rustic_core::Id>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::list_with_size(&self, tpe: rustic_core::FileType) -> core::result::Result<alloc::vec::Vec<(rustic_core::Id, u32)>, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::location(&self) -> alloc::string::String
pub fn rustic_core::ReadBackend::read_full(&self, tpe: rustic_core::FileType, id: &rustic_core::Id) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::read_partial(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, offset: u32, length: u32) -> core::result::Result<bytes::bytes::Bytes, Self::ReadBackendError>
pub fn rustic_core::ReadBackend::set_option(&mut self, option: &str, value: &str) -> core::result::Result<(), Self::ReadBackendError>
pub trait rustic_core::ReadIndex
pub fn rustic_core::ReadIndex::get_data(&self, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::ReadIndex::get_id(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::ReadIndex::get_tree(&self, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::ReadIndex::has(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> bool
pub fn rustic_core::ReadIndex::has_data(&self, id: &rustic_core::Id) -> bool
pub fn rustic_core::ReadIndex::has_tree(&self, id: &rustic_core::Id) -> bool
pub fn rustic_core::ReadIndex::total_size(&self, tpe: rustic_core::BlobType) -> u64
impl rustic_core::ReadIndex for Index
pub fn rustic_core::ReadIndex::get_id(&self, blob_type: rustic_core::BlobType, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::ReadIndex::has(&self, blob_type: rustic_core::BlobType, id: &rustic_core::Id) -> bool
pub fn rustic_core::ReadIndex::total_size(&self, blob_type: rustic_core::BlobType) -> u64
impl<BE: rustic_core::DecryptReadBackend> rustic_core::ReadIndex for rustic_core::IndexBackend<BE>
pub fn rustic_core::ReadIndex::get_id(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> core::option::Option<rustic_core::IndexEntry>
pub fn rustic_core::ReadIndex::has(&self, tpe: rustic_core::BlobType, id: &rustic_core::Id) -> bool
pub fn rustic_core::ReadIndex::total_size(&self, tpe: rustic_core::BlobType) -> u64
pub trait rustic_core::ReadSource
pub type rustic_core::ReadSource::Iter: core::iter::traits::iterator::Iterator<Item = core::result::Result<rustic_core::ReadSourceEntry<Self::Open>, Self::ReadSourceError>>
pub type rustic_core::ReadSource::Open: rustic_core::ReadSourceOpen
pub type rustic_core::ReadSource::ReadSourceError: core::marker::Send + core::marker::Sync + 'static + core::error::Error
pub fn rustic_core::ReadSource::entries(self) -> Self::Iter
pub fn rustic_core::ReadSource::size(&self) -> core::result::Result<core::option::Option<u64>, Self::ReadSourceError>
impl rustic_core::ReadSource for rustic_core::LocalSource
pub type rustic_core::ReadSource::Iter = rustic_core::LocalSource
pub type rustic_core::ReadSource::Open = OpenFile
pub type rustic_core::ReadSource::ReadSourceError = rustic_core::RusticError
pub fn rustic_core::ReadSource::entries(self) -> Self::Iter
pub fn rustic_core::ReadSource::size(&self) -> core::result::Result<core::option::Option<u64>, Self::ReadSourceError>
impl rustic_core::ReadSource for rustic_core::StdinSource
pub type rustic_core::ReadSource::Iter = rustic_core::StdinSource
pub type rustic_core::ReadSource::Open = OpenStdin
pub type rustic_core::ReadSource::ReadSourceError = rustic_core::RusticError
pub fn rustic_core::ReadSource::entries(self) -> Self::Iter
pub fn rustic_core::ReadSource::size(&self) -> core::result::Result<core::option::Option<u64>, Self::ReadSourceError>
pub trait rustic_core::ReadSourceOpen
pub type rustic_core::ReadSourceOpen::ReadSourceOpenError: core::marker::Send + core::marker::Sync + 'static + core::error::Error
pub type rustic_core::ReadSourceOpen::Reader: std::io::Read + core::marker::Send + 'static
pub fn rustic_core::ReadSourceOpen::open(self) -> core::result::Result<Self::Reader, Self::ReadSourceOpenError>
pub trait rustic_core::RepoFile: serde::ser::Serialize + serde::de::DeserializeOwned + core::marker::Sized + core::marker::Send + core::marker::Sync + 'static
pub const rustic_core::RepoFile::TYPE: rustic_core::FileType
impl rustic_core::RepoFile for rustic_core::ConfigFile
pub const rustic_core::RepoFile::TYPE: rustic_core::FileType
impl rustic_core::RepoFile for rustic_core::IndexFile
pub const rustic_core::RepoFile::TYPE: rustic_core::FileType
impl rustic_core::RepoFile for rustic_core::SnapshotFile
pub const rustic_core::RepoFile::TYPE: rustic_core::FileType
pub trait rustic_core::Sum<T>
pub fn rustic_core::Sum::sum(&self) -> T
impl<T: core::default::Default + core::marker::Copy + core::ops::arith::Add<Output = T>> rustic_core::Sum<T> for rustic_core::BlobTypeMap<T>
pub fn rustic_core::Sum::sum(&self) -> T
pub trait rustic_core::WriteBackend: rustic_core::ReadBackend
pub type rustic_core::WriteBackend::WriteBackendError: core::marker::Send + core::marker::Sync + 'static + core::error::Error
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl rustic_core::WriteBackend for ChooseBackend
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl rustic_core::WriteBackend for LocalBackend
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl rustic_core::WriteBackend for RcloneBackend
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl rustic_core::WriteBackend for RestBackend
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, _cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<BE: rustic_core::DecryptFullBackend> rustic_core::WriteBackend for rustic_core::DryRunBackend<BE>
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<BE: rustic_core::WriteBackend> rustic_core::WriteBackend for CachedBackend<BE>
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<BE: rustic_core::WriteBackend> rustic_core::WriteBackend for HotColdBackend<BE>
pub type rustic_core::WriteBackend::WriteBackendError = rustic_core::RusticError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
impl<R: rustic_core::WriteBackend, C: CryptoKey> rustic_core::WriteBackend for rustic_core::DecryptBackend<R, C>
pub type rustic_core::WriteBackend::WriteBackendError = <R as rustic_core::WriteBackend>::WriteBackendError
pub fn rustic_core::WriteBackend::create(&self) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::remove(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool) -> core::result::Result<(), Self::WriteBackendError>
pub fn rustic_core::WriteBackend::write_bytes(&self, tpe: rustic_core::FileType, id: &rustic_core::Id, cacheable: bool, buf: bytes::bytes::Bytes) -> core::result::Result<(), Self::WriteBackendError>
pub trait rustic_core::WriteSource: core::clone::Clone
pub fn rustic_core::WriteSource::create<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, node: rustic_core::Node)
pub fn rustic_core::WriteSource::set_metadata<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, node: rustic_core::Node)
pub fn rustic_core::WriteSource::write_at<P: core::convert::Into<std::path::PathBuf>>(&self, path: P, offset: u64, data: bytes::bytes::Bytes)
pub fn rustic_core::bytes_size_to_string(b: u64) -> alloc::string::String
pub fn rustic_core::hash(data: &[u8]) -> rustic_core::Id
pub fn rustic_core::merge_trees(be: &impl rustic_core::IndexedBackend, trees: &[rustic_core::Id], cmp: &impl core::ops::function::Fn(&rustic_core::Node, &rustic_core::Node) -> core::cmp::Ordering, save: &impl core::ops::function::Fn(rustic_core::Tree) -> rustic_core::RusticResult<(rustic_core::Id, u64)>, summary: &mut SnapshotSummary) -> rustic_core::RusticResult<rustic_core::Id>
pub fn rustic_core::parse_command<'a, E: nom::error::ParseError<&'a str>>(input: &'a str) -> nom::internal::IResult<&'a str, alloc::vec::Vec<&'a str>, E>
pub fn rustic_core::random_poly() -> rustic_core::RusticResult<u64>
pub type rustic_core::BlobTypeMap<T> = enum_map::EnumMap<rustic_core::BlobType, T>
pub type rustic_core::RusticResult<T> = core::result::Result<T, rustic_core::RusticError>
